{
  "openapi": "3.0.1",
  "info": {
    "title": "Ontology API",
    "version": "v0.35.0"
  },
  "security": [
	{
	  "oauthsample": [
		"api://openbos/BosApi.Proxy"
	  ]
	}
  ],
  "servers": [
    { 
      "url": "https://api.electrification.ability.abb/buildings/openbos/apiproxy/v1/{gwid}",
      "description":"Cloud endpoint",
      "variables":{
        "gwid":{
          "default":"demonstrationEdge1",
          "description": "Unique identifier of the SmartEdge"
        }
      }
    }
  ],
  "paths": {
    "/api/v1/ontology/alarm/{id}": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get an alarm configuration instance by id",
        "operationId": "6D950E9D3D44F2C0896F0CD7BDE340B09777468680E22709F081FD0E052EDC14",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlarmInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlarmInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlarmInstanceDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Alarms"
        ],
        "summary": "Update an existing alarm configuration",
        "operationId": "5789F32271A5FFAD5B635FE789601EA18CA9982879661956111992D4B7E92C9B",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the alarm to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New alarm configuration",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Alarms"
        ],
        "summary": "Delete an existing alarm configuration",
        "operationId": "93A7A8A7D3BB6C064228830166BA4A88D247D0D47C8D5B430DF1BED54B61BDEB",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the alarm to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/alarm/advanced/{id}": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get details of an alarm configuration by id. Detail will contain information like zone or asset name it is connected to.",
        "operationId": "9A2F6A4122FF8A81BBF84BEE8C80DD0BA3014D86C54CB2DF9EC7CB6ECA462191",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlarmInstanceAdvancedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlarmInstanceAdvancedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlarmInstanceAdvancedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarm": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get all the alarm configurations in the site.",
        "description": "<br>OpenBOS manages alarms. These alarms are synchronized to alarm templates or may be manual alarms.\r\n<br>Ontology also stores alarm triggers (levels, hysteresis, [...]) and the datapoint associated to the alarm.\r\n<br>That resource path returns all alarm configurations inside the property. ",
        "operationId": "3278DAEBB3AC16CBC02C5B10574C289F626FDAAD2143AF9696BB27FAD6B59F40",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned alarm instance (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of alarm instance in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Alarms"
        ],
        "summary": "Create a new alarm configuration",
        "operationId": "7C5455AE3C17429A58091E975F49E98839A6D75C282D4803A3D8AE27068BB32B",
        "requestBody": {
          "description": "Alarm configuration to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceCreationDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceCreationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceCreationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmInstanceCreationDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created item"
          }
        }
      }
    },
    "/api/v1/ontology/alarm/advanced": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get list of alarm configuration that matches advanced filtering criteria the result object contained detailled information like zone or asset name it is connected to",
        "description": "Logged user must have access to parent to get the alarms",
        "operationId": "C6B51DC84B0F7930DFBD8A8D076F600C49C331B30D7612199DDEDFC1A77A0269",
        "parameters": [
          {
            "name": "zoneName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneParentName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerSeverity",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AlarmSeverity"
            }
          },
          {
            "name": "needAcknowledge",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned alarm instance (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of alarm instance in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstanceAdvancedDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstanceAdvancedDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstanceAdvancedDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarm/advanced/count": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get number of alarm configuration that matches the filter criteria using advanced filtering criteria",
        "description": "NOTE: count and advanced/count endpoints are doing exactly the same",
        "operationId": "E4147A4698137AAE66CBB52FF38669F8CC97CA82F25E515883EC7FD4D6A98056",
        "parameters": [
          {
            "name": "zoneName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneParentName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerSeverity",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AlarmSeverity"
            }
          },
          {
            "name": "needAcknowledge",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarm/advanced/countbytype": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get number of alarm instances grouped by severity, acknowledge and active",
        "operationId": "DC08A2314AA614556F09313BD5CF0EABC0ADE11CDECF9A7D14E8CA125AC5C55F",
        "parameters": [
          {
            "name": "zoneName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneParentName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerSeverity",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AlarmSeverity"
            }
          },
          {
            "name": "needAcknowledge",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstancesCountDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstancesCountDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmInstancesCountDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarmhistorics": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get trend of alarm events between two dates",
        "operationId": "52666F481B3FAEAE7A392C430E468071564274688EA2DC0C26853FE0ADD1BB11",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Null or DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Null or DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "If true or absent alarms sorted with ascending order else descending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned alarms (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of alarms in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarmhistorics/count": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Retrieve the number of alarm events that occured between two dates",
        "operationId": "BF57219E4FE4994C5C4D271AAA6800F639360140C1765A6D63250C8B75D19DF0",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Null or DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Null or DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarmhistorics/zone/{id}": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get trend of alarm events that occured between two dates for a specific zone and its children (including functional blocks)",
        "operationId": "1F9A6605DE488789321025EBA68401510A31915B1F26651E4EBAB3099FB600A2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Null or DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Null or DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "If true or absent alarms sorted with ascending order else descending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned alarms (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of alarms in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/livealarms": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Get the list of alarm currently detected in the system",
        "operationId": "8DF5352B31757410D99578D09458611040380085F3F4F4DC97CF7601108B82E9",
        "parameters": [
          {
            "name": "ascending",
            "in": "query",
            "description": "If true or absent alarms sorted with ascending order else descending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned alarms (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of alarms in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/livealarms/count": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Retrieves the number of alarms currently detected in the system",
        "operationId": "34FD28F24E4ECE1C7424C7B3614DD8C4C06987065456F34671332AFD1878B6CD",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/livealarms/zone/{id}": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Retrieves the alarms currently detected in the system under a specific zone.\r\nIt contains all alarms of the zone and its children (including functional blocks)",
        "operationId": "E0C69DAF7DEBA69CC322CA80EF96E00BDD6A6F5F67140438E45376EAC3CCE9A5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "If true or absent alarms sorted with ascending order else descending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "size of a page if paging is used",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset of page if paging is used",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/livealarms/zone/{id}/count": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Retrieves the number of alarms currently detected in the system under a specific zone.\r\nIt counts all alarms of the zone and its children (including functional blocks)",
        "operationId": "FB8BBB080FAFB2190F7F0EE6BC0CEA6399271CF432A0A8A5B42F4428FF025F8A",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/livealarms/functionalblock/{id}": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Retrieves the alarms currently detected in the system under a specific functional block.",
        "operationId": "75CB935BF6B6B0600A26C40D2CF5AF7051F0D2C3071F1B2F61C4C2F4BA7662E5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the functional block",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "If true or absent alarms sorted with ascending order else descending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned alarms (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of alarms in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmHistoricDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/livealarms/functionalblock/{id}/count": {
      "get": {
        "tags": [
          "Alarms"
        ],
        "summary": "Retrieves the number of alarms currently detected in the system under a specific functional block.",
        "operationId": "8845802F049A4130B5BAD0BDBEF19F444886F05D16304C46BEA464077FC5475F",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the functional bloc",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarm/acknowledge": {
      "post": {
        "tags": [
          "Alarms"
        ],
        "summary": "Acknowledge a specific alarm.\r\nonly authorized alarms are acked",
        "operationId": "5B99B7DAD1741EF88BDBE963A76227049F8110927F00FF7829AC05CD4680ED82",
        "requestBody": {
          "description": "Descriptoin of acknowledges to do with id and comment of each alarm",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AcknowledgeAlarmDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AcknowledgeAlarmDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AcknowledgeAlarmDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AcknowledgeAlarmDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/alarm/subscription": {
      "post": {
        "tags": [
          "Alarms"
        ],
        "summary": "Add a new subscription for live alarm notification",
        "description": "<br>We propose an event driven mechanism to access the data changes. Instead of continuously reading a data you may subscribe to a value change.\r\n<br>That resource path is used to subscribe to an alarms of openBOS when it is triggered.\r\n<br>As soon as client has subscribed he will be able to receive the state change of alarms inside openBOS.",
        "operationId": "972AA539561B4009F0C7CA4692A35EA99A3E70F6FA594B4FE1C5E9A50FB0D975",
        "requestBody": {
          "description": "DTO that contains alarmInstance Id, alarmTrigger Id and Comment",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/alarm/subscription/zone": {
      "post": {
        "tags": [
          "Alarms"
        ],
        "summary": "Add a new subscription for live alarm notification but only for alarms of the zone and its children including functional blocks",
        "description": "<br>We propose an event driven mechanism to access the data changes. Instead of continuously reading a data you may subscribe to a value change.\r\n<br>That resource path is used to subscribe to an alarms of openBOS when it is triggered.\r\n<br>As soon as client has subscribed he will be able to receive the state change of alarms inside openBOS.",
        "operationId": "F2A7D7895E0A6E72D49D45F557AB5CC359CDAFFB586E1BBDEA73A0BA868DA8DF",
        "requestBody": {
          "description": "Subscription DTO",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ZoneLiveAlarmSubscriptionDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZoneLiveAlarmSubscriptionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ZoneLiveAlarmSubscriptionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ZoneLiveAlarmSubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/alarm/subscription/functionalblock": {
      "post": {
        "tags": [
          "Alarms"
        ],
        "summary": "Add a new subscription for live alarm notification but only for alarms of a functional block.",
        "description": "<br>We propose an event driven mechanism to access the data changes. Instead of continuously reading a data you may subscribe to a value change.\r\n<br>That resource path is used to subscribe to an alarms of openBOS when it is triggered.\r\n<br>As soon as client has subscribed he will be able to receive the state change of alarms inside openBOS.",
        "operationId": "6C59B1F7989DC13BC6C8F6D83C8BC55ACCB233CD3A857547C3969D892AC3B7CB",
        "requestBody": {
          "description": "Subscription DTO",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionalBlockLiveAlarmSubscriptionDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionalBlockLiveAlarmSubscriptionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionalBlockLiveAlarmSubscriptionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionalBlockLiveAlarmSubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/alarm/subscription/{id}": {
      "put": {
        "tags": [
          "Alarms"
        ],
        "summary": "Subscribe to an alarm change.",
        "operationId": "76DD9BF203E406400A0625E7A6DDE2ECCB773522F189F746544C1D944180ABA1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifiaer of the subscription to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "DTO that contains alarmInstance Id, alarmTrigger Id and Comment",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LiveAlarmSubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Alarms"
        ],
        "summary": "delete a subscription to an alarm change.",
        "operationId": "66DEA1CD160875B4C887B96E62685A7D0C3C73C3BB9B4B44F392CD0933E5AD46",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the alarm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/authentication": {
      "post": {
        "tags": [
          "Basics"
        ],
        "summary": "Authenticate a user of the openBOS using the local edge access point (does not apply for cloud authentication)",
        "description": "<br>\r\n  <b>openBOS</b> offers a secure authentication using Json Web Token (JWT) workflow.\r\n<br>This resource path authenticates an API user and retrieves a valid token to be set inside Authorization header for further API calls\r\n<br>Header format as follows Authorization: Bearer \"jwt\" \r\n<br>Token duration is 30 minutes",
        "operationId": "97874D1FA680D45D751B2D42554C55E9CEDBA112C242A465269590E55FDEBD0F",
        "requestBody": {
          "description": "Object with credentials for authentition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication result including the JWT to be used for further calls",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Basics"
        ],
        "summary": "Configure the initial password on the edge",
        "description": "Changes the password of the first default user. Used only once at site's initialization.",
        "operationId": "DD1A586F1375AF9AF77A0D39AC476D5D7273FDDE86B728F950D21734240D21C4",
        "requestBody": {
          "description": "Password to be set in following format:\r\n  <br><b>\r\n  {\r\n     \"password\": \"new-pwd\"\r\n  }\r\n  </b>",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the initial password has been correctly set"
          }
        }
      }
    },
    "/api/v1/ontology/authentication/refresh": {
      "post": {
        "tags": [
          "Basics"
        ],
        "summary": "Refresh the access token (Json Web Token) for further API calls",
        "description": "<br>Used to generate a new JWT (Json Web Token) on basis of the one retrieved by /api/v1/ontology/authentication.\r\n<br>It allows to refresh communication token without having to pass original login/password",
        "operationId": "7A70BFE01C1B3858D21D844115F9A020F99B080FFD57F8C888AA1682F69E3F19",
        "requestBody": {
          "description": "Object with credentials renewal",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication result including the JWT to be used for further calls",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/user": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Returns users of a certain type for a certain property zone",
        "description": "This resource path retrieves the basics information of users matching a criteria.\r\n<br>openBOS offers several type of users and you may have differences in roles, agreements, … between these types of users.<br>We are managing: Tenant, Owner, PropertyManager, FacilityManager, Visitor and Administrator.\r\nConnected user must have at least CanConfigureUser access right to retrieve more users than himself.",
        "operationId": "8D7CD91A8E93CF627B42F267254B70E4241455F4CED04638E78F60AC3A8F6989",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of requested users",
            "schema": {
              "$ref": "#/components/schemas/UserType"
            }
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "Id of the parent property zone",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of basics information of users matching the criteria.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/user/{id}": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Get detail of a specific user",
        "description": "This resource path retrieves detailed information of a user identified by its unique identifier\r\n<br>openBOS offers several type of users having different roles, agreements, … between these types of users.\r\nConnected user must have at least CanConfigureUser access right and same root role as the requested user to use this method on a user different than himself.",
        "operationId": "06168B990804D7500596663F7CB8BDB636F682BF3D2716C2F5112ECFD147C641",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve detailed information of found users.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/authentication/{login}": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Get lockout duration for a given locked out user",
        "description": "If too many consecutive login failures the end-user is lockout a certain ammount of time. This resource path retrieves the time to wait before being authorized to make a new attempt.",
        "operationId": "C24BE4C3002726592B9D6DBA141369CC36D132DB5E1111CFF554316202429A6B",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "description": "Unique identifier of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The duration in ms that needs to wait the user to log in again",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/role": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Get the roles available in the site",
        "description": "This resource path retrieves the list of roles a user can be assigned to.\r\n<b>openBOS</b> uses a Role Based Access Control system. Each user can be assigned to one or several Role. Each role being configured with access rights and topology accessibility (limit to certain zones)",
        "operationId": "47966213D1CB35B67B9233A713CEE0CCF885E9B627697A3FCB5F4B654B71D311",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "<br>Contains search pattern to produce the list. If no set all roles will be returned.\r\n            Filter can look like : \r\n            <ul>Name contains \"A\"</ul><ul>Name = \"A\"</ul><ul>Name startswith \"A\"</ul><ul>Name endswith \"A\"</ul><ul>Tags contains \"A\"</ul><br>And/Or can be used to generate complex query like : <b>(</b>Tags contains \"A\"<b>)</b><b>or</b><b>(</b>Name endswith \"r\"<b>)</b>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of roles matching the filter criteria.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/role/{id}": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Get a specific role",
        "description": "This resource path retrieves a specific role by its unique identifier.\r\n<b>openBOS</b> uses a Role Based Access Control system. Each user can be assigned to one or several Role. Each role being configured with access rights and topology accessibility (limit to certain zones)",
        "operationId": "FBC8B991B4D901BCE530CFDDCA6EF097D02E96A11A0992B13A383C827BF1A28F",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the requested role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The matching role.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/role/building": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Get roles for a building, and owning at least one space with tag in the building.",
        "operationId": "6C10260B961AC13ABD0D2D79FC72D239C360A0135D777C6BB039E4520C5C3263",
        "parameters": [
          {
            "name": "buildingId",
            "in": "query",
            "description": "Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/tag": {
      "get": {
        "tags": [
          "Core root objects: ZONE and TAGS"
        ],
        "summary": "Get a list of all tags",
        "operationId": "421B5D38B478599BA98276A3E2163CE3D44C04C918CAA22F658F8341C2AB003C",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zone": {
      "get": {
        "tags": [
          "Core root objects: ZONE and TAGS"
        ],
        "summary": "Get list of zone instances in the site",
        "description": "<br>openBOS hierarchy is based on zones. A zone can be a property a building a floor...\r\n<br>This resource path finds a list of all the zone instance matching the filter criteria.\r\n<br>Only zone instances that are authorized to the end user are returned",
        "operationId": "1DB0C6CC4AFA36C833D887A7D46E1C51017D7CB236F3F9A61A598D30E0B9FD64",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "<br>Filter criteria to find zone instance in the site.\r\n<br>Example\r\n<br>Name contains \"ABC\"\r\n<br>underzone \"{idofzone}\"\r\n<br>Name contains \"ABC\" and Tags contains \"light\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of basic information on matching zone instances",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zone/hierarchy": {
      "get": {
        "tags": [
          "Core root objects: ZONE and TAGS"
        ],
        "summary": "Return the list of zones (all kinds) in a tree (parent/child) data model pattern",
        "description": "<br>openBOS hierarchy is based on zones. A zone can be a property a building a floor...\r\n<br>This resource returns a list of ZoneInstanceHierarchyDTO object each of them containing there direct children.\r\n<br>Only zone instances that are authorized to the end user are returned",
        "operationId": "59F9747C23E9573D724ECE91FF8D14CB34867D59C00A1B105ADB9349793FE405",
        "parameters": [
          {
            "name": "ptag",
            "in": "query",
            "description": "List of tags used to filter zones that will be retrieved. Each retrieved zone must contain one of the tag of this list.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "zone",
            "in": "query",
            "description": "List of zone template id used to filter zones that will be retrieved.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "trends",
            "in": "query",
            "description": "Indicates if only datapoints attached to a trend instance must be retrieved",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of ZoneInstanceHierarchyDTO object each of them containing there direct children.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceHierarchyDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceHierarchyDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceHierarchyDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zone/parents/{id}": {
      "get": {
        "tags": [
          "Core root objects: ZONE and TAGS"
        ],
        "summary": "Find the parents of a certain type for a building, structure, space, area or generic zone inside the site",
        "description": "If working on a space and asking for parent of type building, the result will be the building of the space.",
        "operationId": "FD3D05DEBEBECDDFA8CA7A7AA2F7D5F77D64884A2A85CED5A64ABF1D93492374",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the property zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentsType",
            "in": "query",
            "description": "type of parents",
            "schema": {
              "$ref": "#/components/schemas/PropertyZoneType"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Additional filter criteria on retrieved zone instance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of parents of any property zone matching type of zone",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zone/children/{id}": {
      "get": {
        "tags": [
          "Core root objects: ZONE and TAGS"
        ],
        "summary": "returns the children of any property zone instance filtering on the type of the children",
        "operationId": "468B7EC258FF82586FABDE30EF119E4EF73022FFE8CAA12B5C0E267E2B082C43",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the property zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "childrenType",
            "in": "query",
            "description": "type of children",
            "schema": {
              "$ref": "#/components/schemas/PropertyZoneType"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Additional filter criteria on retrieved zone instance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zone/{id}": {
      "get": {
        "tags": [
          "Core root objects: ZONE and TAGS"
        ],
        "summary": "Get a zone instance detail in the site",
        "description": "<br>openBOS hierarchy is based on zones. A zone can be a property a building a floor...\r\n<br>This resource returns the detail information of the zone instance.\r\n<br>Only zone instances that are authorized to the end user are returned",
        "operationId": "F733798B15D3631681D6BABC07AC4A97AA4F44FCF31EA587AA90BC73ADFF91F4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested zone instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyInZoneFbs",
            "in": "query",
            "description": "Get only functional blocks in zone",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detail information of the zone instance",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneInstanceDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/station": {
      "get": {
        "tags": [
          "Edge and stations"
        ],
        "summary": "Get the list of stations inside the site",
        "description": "<br>This resource path retrieves the basics information of station defined in the site.\r\n<br>A station is an hardware embedding at least a middleware. That middleware may read several protocols and several networks.\r\n<br>Detailled information on a station can be found by using station resource path including its unique id (ie: .../station/{id} )",
        "operationId": "2993452C680CE0BC7C8985A8E6ABCCF1A96879CA6879E1AE4B789F8156320658",
        "responses": {
          "200": {
            "description": "Retrieve the list of station in the system with for each the basics information",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/station/{id}": {
      "get": {
        "tags": [
          "Edge and stations"
        ],
        "summary": "Get detailled information for a specific station",
        "description": "<br>A station is an hardware embedding at least a middleware. That middleware may read several protocols and several networks. \r\n<br>That resource path returns the detailled information of a specific station in the site. ",
        "operationId": "462ADA187AB5FC254E1C2727182A49BA7B9039CCC8CF669973CEBABF6450B6BE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested middleware station",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve detailled definition of the middleware station",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StationInfoDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationInfoDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationInfoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/station/{id}/synchronizationtable": {
      "get": {
        "tags": [
          "Edge and stations"
        ],
        "summary": "Get the list of minimal information about the BOS MiddlewareTable items linked to a station.",
        "operationId": "151EEAECAB5C2B4BFA232A88B4EAF9EBDB3959AD2E12AA1A308A395A2CDA914A",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the station",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MiddlewareTableInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MiddlewareTableInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MiddlewareTableInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/stationsynchrostatus": {
      "get": {
        "tags": [
          "Edge and stations"
        ],
        "summary": "Get the status of synchronization of the stations inside the site",
        "description": "<br>A station is an hardware embedding at least a middleware. That middleware may read several protocols and several networks. \r\n<br>The synchronization is the operation of keeping in sync the openBOS and its underlying middleware. \r\n<br>Each time an update is done on openBOS that has impact on the middleware layer (used to communicate with fieldbus devices) a synchronization is required to align both definition.\r\n<br>Synchronization can be set manual or automatic for each station.\r\n<br>That route retrieves the synchronization status for all the stations of the site.",
        "operationId": "4AC9B7FF9D35B831CDA0CEB84F72B89F549CB2F9E3F7DCC8ECAB1E40558B7D63",
        "responses": {
          "200": {
            "description": "Retrieves synchronization status of middleware stations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationSynchroStatusDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationSynchroStatusDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationSynchroStatusDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/distribution/structuretypes": {
      "get": {
        "tags": [
          "Meters"
        ],
        "operationId": "8A3C9C356ACD338921E545019B417E0CEDFBDF321F4FD647C6B8E26476E2A013",
        "parameters": [
          {
            "name": "energyId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnergyStructureTypeDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnergyStructureTypeDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnergyStructureTypeDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/distribution/{id}": {
      "get": {
        "tags": [
          "Meters"
        ],
        "operationId": "63955256269D59C5E4E0C6E2C48089F30BC8287049D7DE8BA9AFBA839BC04AB1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/distribution": {
      "get": {
        "tags": [
          "Meters"
        ],
        "operationId": "B133E7A0A0C1D0200B895FCFD2929252CFB2FD76FBC16BAFE3E9C0246E0F4474",
        "parameters": [
          {
            "name": "energyId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistributionDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistributionDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistributionDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/meter/energy": {
      "get": {
        "tags": [
          "Meters"
        ],
        "operationId": "F47846AF97412144CB3771E7CD1AE382B05DBA6A58E87B6D98A811E155542C22",
        "parameters": [
          {
            "name": "onlySupported",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnergyDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnergyDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnergyDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/meter/{id}": {
      "get": {
        "tags": [
          "Meters"
        ],
        "operationId": "4C795AA277402B36CD2773B0163DAEDD03A92775E672F0844A3EFEF4BA640CDF",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeterDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/meter/hierarchy": {
      "get": {
        "tags": [
          "Meters"
        ],
        "operationId": "6895A03ED00F4C7C5E32F43DDFEF4493B9D5708DD32912F8F1687DEE70BF445C",
        "parameters": [
          {
            "name": "energyid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterHierarchyInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterHierarchyInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterHierarchyInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/network/{id}/organization": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get the database of devices and parameters of a network",
        "description": "<br>A station is a hardware embedding at least one middleware.\r\n<br>That middleware may read several protocols.\r\n<br>Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): the networks.\r\n<br>Each network includes a collection of devices, infrastructure, has a list of parameters, a list of datapoints, [...]: we call it the network organization.\r\n<br>The network organization is built has a standard hierarchic tree.\r\n<br>The exploration of an organization is done level by level by requesting the children.\r\n<br>This resource path retrieves a level in the hierarchic tree of the network organization",
        "operationId": "F8B0FCCEA0086656EA8905E82A7ACB62BB3F3EF081858F536123CA59AD2B860C",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the network",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "null to get the root branches, otherwise parent id of the branch to get its children",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional filter on datapoints",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the branches matching parentId criteria",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BranchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BranchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BranchDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/network/{id}/organization/information": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get the version number of the database of devices and parameters of a network",
        "description": "<br>A station is a hardware embedding at least one middleware.That middleware may read several protocols.\r\n<br>Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): the networks.\r\n<br>Each network includes a collection of devices, infrastructure, has a list of parameters, a list of datapoints, [...]: we call it the network organization.\r\n<br>This resource path retrieves the internal version of the network organization in the database (each update of the network organization increase this version number)",
        "operationId": "799B24AE23FAB7E0D16E152BE9C0DD9CBD5D677522A15B559F81E46FAF631A28",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version information about the organization",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkOrganizationInfoDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkOrganizationInfoDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkOrganizationInfoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/network/organization/branch/{id}": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get an item (branch) of the database of devices and parameters (temporary or not) of a network",
        "description": "<br>A station is a hardware embedding at least one middleware.That middleware may read several protocols.\r\n<br>Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): the networks.\r\n<br>Each network includes a collection of devices, infrastructure, has a list of parameters, a list of datapoints, [...]: we call it the \"network organization\".\r\n<br>The network organization is built has a standard hierarchic tree.\r\n<br>Querying the organization is done level by level.\r\n<br>When updating a network organization a temporary one is created and manipulated. Once the temporary organization is comitted it will become the newest.\r\n<br>This resource path retrieves an item (branch) in the hierarchic tree of the network organization (temporary or not)",
        "operationId": "AD6E8F92C9DB535B8753FD572306E7A3EDD15C8D0B5E600CB96FFF6B2FD144D1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional filter on datapoints",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the branch matching id criteria",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BranchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/network/{id}/organization/rootbranchesinfo": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get the root level of the database of devices and parameters of a network",
        "description": "<br>A station is a hardware embedding at least one middleware.That middleware may read several protocols.\r\n<br>Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): the networks.\r\n<br>Each network includes a collection of devices, infrastructure, has a list of parameters, a list of datapoints, [...]: we call it the \"network organization\".\r\n<br>The network organization is built has a standard hierarchic tree.\r\n<br>Querying the organization is done level by level.",
        "operationId": "2F1A2217D60E4F442CB461D95588A92215C354F4059648A6EE543AE62DFC052C",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the network",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional filter on datapoints",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the root branch matching the network id",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BranchInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BranchInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BranchInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/deviceinstance": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get list of device instances available in the system or filtered by networkId and/or templateId",
        "operationId": "A08199057D9898BB7599FB73E095D8ACFE91FEA1FA8A135B3255B11E5D048103",
        "parameters": [
          {
            "name": "networkId",
            "in": "query",
            "description": "Id of the network you want the devices. null for all",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "Id of the device template you want the devices. null for all",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/deviceinstance/{id}": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get a device instance detail by id",
        "operationId": "F39664E3D19ED0B93015DBE8CC0E109B86FA4B9349FD9138088829A7E66AF419",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInstanceDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/station/{id}/driver": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get the list of available protocol driver in a specific Station",
        "description": "<br>A station is a hardware embeding at least a middleware.\r\n<br>That middleware may read several protocols.\r\n<br>Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): The networks.\r\n<br>That resource path sends back the entire protocols supported by the Station . That may be used to read data from fieldbus.\r\n<br>For more information on a driver use the resource path .../station/{stationId}/driver/get/{id} with the ID of the driver.",
        "operationId": "BC6BB98B45187099D40B16874A07ACE2A57A3EE53B2C27880C5B983712AFFECA",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the station",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of protocol driver definitions on the station.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriverDescriptorInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriverDescriptorInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriverDescriptorInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/station/{stationId}/driver/{id}": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get the detail of a specific protocol driver on a station",
        "description": "<br>A station is a hardware embeding at least a middleware.\r\n<br>That middleware may read several protocols. Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): the networks.\r\n<br>Each fieldbus is accessible through a dedicated driver, this command retrieve the detail of a driver. \r\n<br>The driver detail contains the list of configuration values used to communicate with the fieldbus device of the protocol.\r\n<br>The list of configuration is dependant from the driver itself (ie: the configuration used for a ModBus communication is different from the configuration used for a BACNet communication.",
        "operationId": "4700A09AEEB89ADFD0A809F90F938FFA2B837013FB8EF3E5694BC1FFE6D8B200",
        "parameters": [
          {
            "name": "stationId",
            "in": "path",
            "description": "Unique identifier of the station",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the driver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Protocol driver definitions on the station.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDescriptorDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDescriptorDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDescriptorDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/network": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get the list of field bus networks available in the whole site.",
        "description": "<br>A station is a hardware embedding at least a middleware.\r\n<br>That middleware may read several protocols.\r\n<br>Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): the networks.\r\n<br>A fieldbus network is a declared network of devices communicating on a protocol.\r\n<br>We may have for example LonWorks, BACnet, KNX, MQTT network That resource path returns the collection of available networks in a station.\r\n<br>For detailled on a network use the dedicated network resource path with the ID of the network (.../network/{id}) ",
        "operationId": "319C2FBFC3402466E531A4B4309E9FAD7F1EA8E14B1E2E17ACA4A387D534CD2C",
        "responses": {
          "200": {
            "description": "List of basics definition of network inside the site.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NetworkDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NetworkDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NetworkDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/network/{id}": {
      "get": {
        "tags": [
          "Network organizations, drivers and protocols"
        ],
        "summary": "Get detail information of a specific network of a station.",
        "description": "<br>A station is a hardware embeding at least a middleware.\r\n<br>That middleware may read several protocols.\r\n<br>Each protocol has a unique driver (i.e KNX) and may have several fieldbus networks of that protocol (several networks and database of the same protocol): the networks.\r\n<br>That resource path gives the details of the specific network giving its unique identifier as parameter.",
        "operationId": "501C6FA5FC0AC25B92E0CE8B7C5A34E1D56A2BD25AAD9F5C68C47303CEDE89B4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detail information of a specific network.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Read value from a sensor",
        "description": "<br>A datapoint Instance is a variable of a sensor or actuator.\r\n<br>With that resource path you read the value of a sensor from the network knowing the ID of the datapoint.",
        "operationId": "4B220AF50F93423848D10A9FD7F79C359A9AC409F4AA5B3D2867C870E64CF9FF",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id of the datapoints to read",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceValueDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceValueDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceValueDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Write value to an actuator",
        "description": "<br>A datapoint Instance is a variable of a sensor or actuator.\r\n<br>With that resource path you force an output of an actuator with a value knowing the ID of the datapoint.",
        "operationId": "1D648311458BA3C1654BEAB95EF9F723505A7F450E9DB609B1B194A7C87AA52E",
        "requestBody": {
          "description": "Values of datapoints",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceWriteResultDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceWriteResultDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceWriteResultDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/subscribe": {
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Create empty subscription to monitor datapoint value change",
        "operationId": "E4075855FF36CB1E6991B261A21FA62695172848F8BCF0AC77CC05163AA87BAB",
        "requestBody": {
          "description": "The subscription object to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/subscribe/ba": {
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Create empty subscription to monitor datapoint value change for Building Analyser",
        "operationId": "A4CD3BD5C8EB7441DFDCFEFBCEC5D37523C0BE74986CB5A306525DC0319187E3",
        "requestBody": {
          "description": "The subscription object to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/subscribe/{id}": {
      "put": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Update subscription to monitor datapoint value change",
        "operationId": "4D3A59F6DFAE7CFCEA995E38A1F83CD60F1E2F0C9895BC61FD424A968825F856",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The subscription object to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionExtendedDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Delete subscription to monitor datapoint value change",
        "operationId": "9D23CC8ADA02E95F2B2AE4BFB3E988E9A00CC20F2922B261E864A20F1CBDD127",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/subscribe/{id}/datapoints": {
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Add datapoints to monitor value change on an existing subscription",
        "operationId": "F411A082E97D3121F8B102AFEA614D640DC777846AF9393478A44912E20FB550",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of datapoint to monitor",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionCreateDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionCreateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionCreateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Update monitored datapoints in extended subscription",
        "operationId": "17C588575E064A98F79FED6B6F1617A3A33BBC65153E3B097B57980EB10748B9",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of monitored datapoints to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionUpdateDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointSubscriptionUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Delete monitored datapoints in extended subscription",
        "description": "Route is obsolete. Prefer extended/subscribe/{id}/datapointstoremove",
        "operationId": "E8E0E2BE3217BA606B7914BB863F1D6BDD5AFD38799A6A88258DA04CD855D4C2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DatapointClientId",
            "in": "query",
            "description": "Array of datapointClientId to remove",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/datapointsinformation": {
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Get information on datapoints identifier such as display name, type and unit",
        "description": "This methods will return all needed information to interpret correctly the field value of the datapoint in parameter.",
        "operationId": "8DB2E90C5AB74FBFDF4EE55741C135F9477C74A894B3A2D6A9788E42C5CD5305",
        "requestBody": {
          "description": "List of datapoint identifier where information is required",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointsInformationDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointsInformationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointsInformationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DatapointsInformationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/subscribe/{id}/datapointstoremove": {
      "delete": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Delete monitored datapoints in extended subscription",
        "operationId": "5A78B1134654272A4AF6DD537E70945AB43F04EBCE1AEBD1F3B07AA8BF4E24C2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Array of datapointClientId to remove",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/write": {
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Extended method to write value to datapoints",
        "description": "Compared to the non-extended method, this one allows to select the type of datapoint you want to write.\r\n\r\nThe datapoint can be identified by :\r\n - A DataPoint instance\r\n - A list of descriptive protocol arguments (Protocol arguments are by definition protocol specific)\r\n - A datapoint that has been imported in a Network organization",
        "operationId": "78BE2D95257C1CDC93F5E7BFC0214FBB1FDE0D454E7EC4C83994E414514C4D98",
        "parameters": [
          {
            "name": "badquality",
            "in": "query",
            "description": "Simulate to force bad quality on datapoint (works only with simulated network)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "List of datapoints and value to write",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteExtendedDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteExtendedDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteExtendedDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceWriteExtendedDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceWriteResultDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceWriteResultDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceWriteResultDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/read": {
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Extended method to read value on datapoints",
        "description": "Compared to the non-extended method, this one allows to select the type of datapoint you want to write.\r\n\r\nThe datapoint can be identified by :\r\n - A DataPoint instance\r\n - A list of descriptive protocol arguments (Protocol arguments are by definition protocol specific)\r\n - A datapoint that has been imported in a Network organization",
        "operationId": "07DCBEFAD785826273689C27F2674137471F459F90F2E328B9284A7ED028041A",
        "requestBody": {
          "description": "List of datapoints",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceReadExtendedDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceReadExtendedDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceReadExtendedDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatapointInstanceReadExtendedDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceValueDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceValueDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceValueDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datatype": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Get the list of available data type present in the entire site",
        "description": "<br>Each value has a datatype including unit, min, max, limit, possible value if any...\r\n<br>That resource path returns the catalogue of the entire datatypes available in the site depending on the transport in the edge (the protocols).\r\n<br>Detailled information on a datatype can be found by using the datatype resource path including its unique id (ie: .../datatype/{id} )",
        "operationId": "3510E8ACBDCFD236D014A28E60B5F0913BBA52B1F515C562EBB818B373F337D3",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Contains search pattern to produce the list",
            "schema": {
              "$ref": "#/components/schemas/DataTypeRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the list of data type basics information",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/LongDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DoubleDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/BoolDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/StringDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ComplexDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ArrayDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ByteDataTypeDTO"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/LongDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DoubleDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/BoolDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/StringDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ComplexDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ArrayDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ByteDataTypeDTO"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/LongDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DoubleDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/BoolDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/StringDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ComplexDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ArrayDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ByteDataTypeDTO"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datatype/transport": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Get the list of available data type for a given transport",
        "description": "<br>A transport is a protocol. That resource path returns the list of available datatypes in a network.\r\n<br>You can state the network you want giving the correct protocol as a parameter\r\n<br>(BACnet, KNXIP, Lonworks, ModbusSerial, ModbusIP, MBus, xDriver, Memory)",
        "operationId": "6E1F30AD6A70827EF3A9D18CB05066765086BD92A979C7C76E7A5C625B43EE92",
        "parameters": [
          {
            "name": "transport",
            "in": "query",
            "description": "The filtered transport for datatypes",
            "schema": {
              "$ref": "#/components/schemas/TransportType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the list of data type basics information matching transport criteria",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/LongDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DoubleDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/BoolDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/StringDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ComplexDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ArrayDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ByteDataTypeDTO"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/LongDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DoubleDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/BoolDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/StringDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ComplexDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ArrayDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ByteDataTypeDTO"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/LongDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DoubleDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/BoolDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/StringDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ComplexDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ArrayDataTypeDTO"
                      },
                      {
                        "$ref": "#/components/schemas/ByteDataTypeDTO"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datatype/{id}": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Get the detail of a DataType of the site.",
        "description": "<br>A DataType can be of type Long, Double, Bool, String, Enumeration, Complex, DateTime, Duration, IP address, IP address + port, Byte, Array Of one of preceding dataType.\r\n<br>That resource path needs the ID of the datatype and returns the details\r\n<br>Detail of a dataType may for example gives the autorized min / max value of a Long or Double value or give the list of valid enumeration.",
        "operationId": "57D79DAC2257B52112A26A380BB0EA135543F04BE0616C13652B2C3396036525",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the data type object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desiredunit",
            "in": "query",
            "description": "Id of the desired unit for numeric min/max. If not present will use the unit of the datatype",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailled information of a specific datatype.",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/LongDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/DoubleDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/BoolDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/StringDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ComplexDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ArrayDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ByteDataTypeDTO"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/LongDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/DoubleDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/BoolDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/StringDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ComplexDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ArrayDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ByteDataTypeDTO"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/LongDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/DoubleDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/BoolDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/StringDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/EnumerationDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ComplexDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IPAddressDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ArrayDataTypeDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ByteDataTypeDTO"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/unit": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "List of units available in openBOS",
        "description": "<br>openBOS offers predefined unit for interoperability reasons. That resource path sends back the units managed by openBOS.\r\n<br>For more information on a unit use the unit resource path with the ID of the unit.",
        "operationId": "6E2DE8A1EE1767BD1FDE3CD4936716ED01ABE822FBC0FAAD3A4E4062F94448AE",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/unit/{id}": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Get the detail of a specific unit.",
        "description": "Get the detail of a specific unit defined by its ID: name, esolution, category, prefered min and prefered max",
        "operationId": "0DB911073631E19157AC45DF7BDC264CF5F6152CA764359422D62709746B5C4B",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnitDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/unit/userdisplayunit": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "operationId": "2D6BBF0D361A0B12E6677E7ECC063E09A29AEB9B59CF37D9FE8AEB2994A56A8C",
        "parameters": [
          {
            "name": "unitId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/unit/displayunitsperculture/{cultureInfo}": {
      "get": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Get each unit conversion for a culture info.",
        "operationId": "C2692332BA6463DF08837BF8FA1E7A854146E817DFA6EE37C7907D4C86D1AE1E",
        "parameters": [
          {
            "name": "cultureInfo",
            "in": "path",
            "description": "Culture info to get conversion",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/unit/converter/extended": {
      "post": {
        "tags": [
          "Read values and update status on premises"
        ],
        "summary": "Perform a conversion between 2 units",
        "description": "<br>Units may not be one to one compatible and you may need to perform a conversion to move from unit 1 to unit 2.\r\n<br>That resource path may be used to perform that action.",
        "operationId": "739F614B8D892144FF8627924798B20F5F8516C29B713CAC09E6FE64C731E1D0",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UnitConversionExtendedDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitConversionExtendedDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitConversionExtendedDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnitConversionExtendedDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnitConversionExtendedResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitConversionExtendedResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitConversionExtendedResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/schedule/inzone/{zoneInstanceId}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "1FF0B259F6AEA7E72E0EAB0A007C2E93FDA926FB13270CA3D43D121776801A95",
        "parameters": [
          {
            "name": "zoneInstanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/schedule/{scheduleConfigurationId}/{zoneInstanceId}/link": {
      "put": {
        "tags": [
          "Schedules"
        ],
        "operationId": "4658484C51C6EA72A689D7F3E40C97BF7B119508DA0C48F511DE9B53CDB152FE",
        "parameters": [
          {
            "name": "scheduleConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneInstanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkScheduleDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkScheduleDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkScheduleDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkScheduleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/schedule/{id}/enable": {
      "put": {
        "tags": [
          "Schedules"
        ],
        "operationId": "BA68E07F0AE7F1693345D3ED1B2CD9694480EF69CB3F5D97CFC3DA3B472B5BD0",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleEnableDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleEnableDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleEnableDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleEnableDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/schedule/{scheduleConfigurationId}/{zoneInstanceId}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "B23A617FDA5D28C02DE2087CB99DECDEECE43CB3BA734FBE2B528CC302A9C2D5",
        "parameters": [
          {
            "name": "scheduleConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneInstanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInstanceDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/schedule/{id}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "7E79C5B11BE3D5AF5266D3D14A399BBA26C5296EE3337151B934F79553C2F284",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInstanceDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Schedules"
        ],
        "operationId": "27F026F859E5765734A5592E731CAD0494108933D5150E73E8F2566F43BA35FE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInstanceDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInstanceDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInstanceDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInstanceDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/schedule/{id}/timetable": {
      "put": {
        "tags": [
          "Schedules"
        ],
        "operationId": "B98BD0A52678EF160F3C8D78FD0F86FF8AA5A029233B93FCCDA057168B959D78",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTimeTableDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTimeTableDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTimeTableDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTimeTableDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/schedule/{scheduleid}/can_delete_event/{eventid}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "0EC8A387C4B8EE4FD61CA14A87BC6B0CCB3AE137F335A5A5660C93ADB78C96F0",
        "parameters": [
          {
            "name": "scheduleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/schedule/{id}/timeline/{date}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "AFD859061DC660ACAA22809ED20DB3F582CA1EC2B2FCDFFA673ED926D0304270",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEffectiveTimelineDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEffectiveTimelineDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEffectiveTimelineDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/alarmtemplate": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the list of alarm templates in the site",
        "description": "<br>An alarm template is used to create several alarm instances that will have the same behaviour on a set of DataPointInstance\r\n<br>The alarm template describes the alarm triggers, and the selection of DataPoint on which the alarm template will applied\r\n<br>The selection of datapointinstance can be a manual selection of individual datapointinstance or all datapoint instances matching a datapoint template inside a zone or functional block\r\n<br>This resource path returns the list of alarm templates that are configured within the site",
        "operationId": "45CA551D2257A6C17D0B66449432459BB81A99E34BA02105738ADE745A60C74C",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned alarm template (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of alarm template in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the list of alarm template basics information"
          }
        }
      }
    },
    "/api/v1/ontology/alarmtemplate/{id}": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get an alarm template detail in the site",
        "description": "<br>An alarm template is used to create several alarm instances that will have the same behaviour on a set of DataPointInstance\r\n<br>The alarm template describes the alarm triggers, and the selection of DataPoint on which the alarm template will applied\r\n<br>This resource path returns the detail for an alarm template",
        "operationId": "2A1E11B5A4E80E8DBD687E0866BBD7DCCA43D495B5FDA721B10F5BACE939FCDD",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested alarm template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfuly get the detail of an alarm template"
          }
        }
      }
    },
    "/api/v1/ontology/alarmtemplate/advanced": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the alarm templates matching an advanced criteria",
        "description": "<br>An alarm template is used to create several alarm instances that will have the same behaviour on a set of DataPointInstance\r\n<br>The alarm template describes the alarm triggers, and the selection of DataPoint on which the alarm template will applied\r\n<br>This resource path returns the list of alarm templates that are matching the criteria in argument. (ie: alarm template name, zone template name to which it applies)",
        "operationId": "A20A2D9371B07B3066EEAC810BE3D2AD9E0324D9701F442BA747972916C2A8A9",
        "parameters": [
          {
            "name": "alarmTemplateId",
            "in": "query",
            "description": "Filter for the ID of the alarm template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alarmTemplateName",
            "in": "query",
            "description": "Filter for the name of the alarm template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "description": "Filter for the name of the zone template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "description": "Filter for the name of the functional block template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointTemplateName",
            "in": "query",
            "description": "Filter for the name of the datapoint template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerTypes",
            "in": "query",
            "description": "Filter for the type of the trigger",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "triggerSeverity",
            "in": "query",
            "description": "Filter for the severity of the trigger",
            "schema": {
              "$ref": "#/components/schemas/AlarmSeverity"
            }
          },
          {
            "name": "needAcknowledge",
            "in": "query",
            "description": "Filter for the NeedAcknowledge of the alarm template",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the list of alarm template basics information"
          }
        }
      }
    },
    "/api/v1/ontology/alarmtemplate/count": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the number of alarms configured in the site that matches a specific criteria",
        "description": "<br>An alarm template is used to create several alarm instances that will have the same behaviour on a set of DataPointInstance\r\n<br>The alarm template describes the alarm triggers, and the selection of DataPoint on which the alarm template will applied\r\n<br>This resource path returns the detail for an alarm template",
        "operationId": "8585C0F3DEB049850B797458F061D96C921E83F400FEF5A397B18717D6B87265",
        "parameters": [
          {
            "name": "alarmTemplateId",
            "in": "query",
            "description": "Filter for the ID of the alarm template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alarmTemplateName",
            "in": "query",
            "description": "Filter for the name of the alarm template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "description": "Filter for the name of the zone template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "description": "Filter for the name of the functional block template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointTemplateName",
            "in": "query",
            "description": "Filter for the name of the datapoint template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerTypes",
            "in": "query",
            "description": "Filter for the type of the trigger",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "triggerSeverity",
            "in": "query",
            "description": "Filter for the severity of the trigger",
            "schema": {
              "$ref": "#/components/schemas/AlarmSeverity"
            }
          },
          {
            "name": "needAcknowledge",
            "in": "query",
            "description": "Filter for the NeedAcknowledge of the alarm template",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the number of alarm template that matches the filter criteria"
          }
        }
      }
    },
    "/api/v1/ontology/datapoint/template/{datapointTemplateId}": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get a list of datapoint instances for a given datapoint template Id",
        "description": "Logged user must have access to at least one parent zone of the functional block of the datapoint",
        "operationId": "1FB91EFB5B51A6FD5EEFF404CDDF486C33D4DAC6BC61E07A76CF8E694A7D7BF4",
        "parameters": [
          {
            "name": "datapointTemplateId",
            "in": "path",
            "description": "the id of the Datapoint Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointInstanceDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/devicetemplate": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the device templates defined in the site",
        "description": "<br>Device template is the description of a model of a manufacturer device, including its protocol arguments with list of Functional Blocks, DataPoints.\r\n<br>This resource path returns the list of device template.",
        "operationId": "C5757F444FF38A24C9B10102442B59CE727261EDE5AAFD266950D2776B17C3BD",
        "parameters": [
          {
            "name": "driverDescriptorId",
            "in": "query",
            "description": "Filter criteria to limit the retrieved device template to a specific protocol driver",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Basics information of matching device templates",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceTemplateInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceTemplateInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceTemplateInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/devicetemplate/{id}": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get a detail information of a device template",
        "description": "<br>Device template is the description of a model of a manufacturer device, including its protcol arguments with list of Functional Blocks, DataPoints.\r\n<br>This resource path return the detail information of a device template",
        "operationId": "EBA31CEF1C6E902A50D4655F22B6C81C0984CCD6DC917D319B99C7D1DBB26422",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested device template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieves the device template detail",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTemplateDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTemplateDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTemplateDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/devicetemplate/details": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the details of all device templates defined in the site",
        "description": "<br>Device template is the description of a model of a manufacturer device, including its protocol arguments with list of Functional Blocks, DataPoints.\r\n<br>This resource path returns the list of device template.",
        "operationId": "6B2220A856770A7E60A7BC42283A0C7A6B31DBE350D987F7A725D7513EABF60C",
        "parameters": [
          {
            "name": "driverDescriptorId",
            "in": "query",
            "description": "Filter criteria to limit the retrieved device template to a specific protocol driver",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Basics information of matching device templates",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceTemplateDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceTemplateDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceTemplateDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/functionalblocktemplate": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the list of asset's template in the site",
        "description": "<br>openBOS manages assets in the building (lamp, button, fancoil, ...).\r\n<br>Every asset refer to a template and are all instances of an asset template. (i.e. Each lamp is an instance of a lamp template.)\r\n<br>That resource path returns the complete list of asset template in the building.\r\n<br>From here you retrieve only the basic information of each template.\r\n<br>To collect the detailed information on a specific asset template you will need to use the dedicated endpoint by using the unique identifier of the entity (/api/v1/ontology/{entity}/{id}).",
        "operationId": "D470BCF3F3DE3C4DD3A08D41A3EF12CCA1D9CBE57D47A1F79515467A47F17A71",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Contains search pattern to produce the list",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockTemplateInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockTemplateInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockTemplateInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/functionalblocktemplate/details": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the details of all asset templates in the site",
        "description": "<br>openBOS manages assets in the building (lamp, button, fancoil, ...).\r\n<br>Every asset refer to a template and are all instances of an asset template. (i.e. Each lamp is an instance of a lamp template.)\r\n<br>That resource path returns the complete list of asset template in the building.\r\n<br>From here you retrieve only the basic information of each template.\r\n<br>To collect the detailed information on a specific asset template you will need to use the dedicated endpoint by using the unique identifier of the entity (/api/v1/ontology/{entity}/{id}).",
        "operationId": "8AC2785F830829522C482AF8864E5143761148FB62E64E50BC571407641E4126",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Contains search pattern to produce the list",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockTemplateDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockTemplateDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockTemplateDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/functionalblocktemplate/{id}": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the detail of an asset template of the site",
        "description": "<br>openBOS manages assets in the building (lamp, button, fancoil, ...).\r\n<br>Every asset refer to a template and are all instances of an asset template. (i.e. Each lamp is an instance of a lamp template.)\r\n<br>Here retrieve the detailed information of an asset template by its unique identifier.\r\n<br>The detail will give information like possible configuration values that you will find on the asset instances that are based on the current asset template.",
        "operationId": "C1273F6FD722CD442944459E0ACCAEE9C9257B811A5043EA4025FA21DB73A242",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested FunctionalBlock template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalBlockTemplateDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalBlockTemplateDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalBlockTemplateDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zonetemplate": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the zone templates defined in the site",
        "description": "<br>All zones in the openBOS are based on a zone template. A zone template defines the list of functional block that can be present in the zone, as the list of datapoint that are directly present in the zone.\r\n<br>This resource path returns the list of zone templates available in the site.",
        "operationId": "A2670C1DD80589233F6748EE063AAB7EC5ECCFA6882D62F79B221E78C1B2DC45",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter criteria to limit the retrieved zone template (ie: Name contains \"ABC\" and Tags contains \"meeting\")",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Basics information of matching zone templates",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneTemplateInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneTemplateInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneTemplateInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zonetemplate/details": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the details of all zone templates defined in the site",
        "description": "<br>All zones in the openBOS are based on a zone template. A zone template defines the list of functional block that can be present in the zone, as the list of datapoint that are directly present in the zone.\r\n<br>This resource path returns the list of zone templates available in the site.",
        "operationId": "F89FEE79075E7B545B52AF0B4A14A2C5C44D9A745AF313E9A24103F678BC49A3",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter criteria to limit the retrieved zone template (ie: Name contains \"ABC\" and Tags contains \"meeting\")",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Basics information of matching zone templates",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneTemplateDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneTemplateDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneTemplateDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zonetemplate/{id}": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the detail of a zone template defined in the site",
        "description": "<br>All zones in the openBOS are based on a zone template. A zone template defines the list of functional block that can be present in the zone, as the list of datapoint that are directly present in the zone.\r\n<br>This resource path returns detail of a specific zone template.",
        "operationId": "A535CD33298814C6E5C430C4098351D0BD18DFF4B298D696F31448C8ED70604C",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested zone template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Basics information of matching zone templates",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneTemplateDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneTemplateDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneTemplateDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/scheduleconfiguration": {
      "get": {
        "tags": [
          "The templates"
        ],
        "operationId": "4923605840CE159E95340E79CAC82FA09DBA244BC8906723AC9061706294EFBE",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ScheduleConfigurationInfoDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TemplateScheduleConfigurationInfoDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IndividualScheduleConfigurationInfoDTO"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ScheduleConfigurationInfoDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TemplateScheduleConfigurationInfoDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IndividualScheduleConfigurationInfoDTO"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ScheduleConfigurationInfoDTO"
                      },
                      {
                        "$ref": "#/components/schemas/TemplateScheduleConfigurationInfoDTO"
                      },
                      {
                        "$ref": "#/components/schemas/IndividualScheduleConfigurationInfoDTO"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "The templates"
        ],
        "operationId": "9EDE11309B2DE8A85F0ED438BC359893C9169A529CEB0EE7D8F96B357BBF5AC9",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/scheduleconfiguration/{id}": {
      "get": {
        "tags": [
          "The templates"
        ],
        "operationId": "BADDB0542ED52A752BC1473701174E832174186216520425390E61E2A6863207",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "The templates"
        ],
        "operationId": "5B6B84F5E0BED348B9393C0F2E21C9B18D9A013EE6596E868447C2965BCC2836",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/TemplateScheduleConfigurationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/IndividualScheduleConfigurationDTO"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "The templates"
        ],
        "operationId": "21F6164BCFD8D3D163792C11FD487DE4BCC4C090DADF81A4169C8013460C7562",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trendtemplate": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get the list of trend templates in the site",
        "description": "<br>A trend template is used to create several trend instances that will have the same behaviour on a set of DataPointInstance\r\n<br>The selection of datapointinstance can be a manual selection of individual datapointinstance or all datapoint instances matching a datapoint template inside a zone or functional block\r\n<br>This resource path returns the list of trend templates that are configured within the site",
        "operationId": "E5955B7E4C19462F1D1B433024226A0A1E080D8B8BDC71DD938DA142B4FD29AA",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned trend template (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of trend template in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the list of trend template basics information",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrendTemplateDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrendTemplateDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrendTemplateDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/trendtemplate/advanced": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Find trend templates matching an advanced criteria",
        "description": "<br>A trend template is used to create several trend instances that will have the same behaviour on a set of DataPointInstance\r\n<br>The selection of datapointinstance can be a manual selection of individual datapointinstance or all datapoint instances matching a datapoint template inside a zone or functional block\r\n<br>This resource path returns the list of templates that are matching the criteria in argument. (ie: trend template name, zone template name to which it applies)",
        "operationId": "19FCBB146345A821092B5AC632B6F5461F56DF32C6AFCABFAB5CEB8662E5852B",
        "parameters": [
          {
            "name": "trendTemplateId",
            "in": "query",
            "description": "Filter for the ID of the trend template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trendTemplateName",
            "in": "query",
            "description": "Filter for the name of the trend template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "description": "Filter for the name of the zone template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "description": "Filter for the name of the functional block template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointTemplateName",
            "in": "query",
            "description": "Filter for the name of the datapoint template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display",
            "in": "query",
            "description": "Filter for the display",
            "schema": {
              "$ref": "#/components/schemas/DisplayType"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the list of trend template basics information"
          }
        }
      }
    },
    "/api/v1/ontology/trendtemplate/{id}": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get a trend template detail in the site",
        "description": "<br>A trend template is used to create several trend instances that will have the same behaviour on a set of DataPointInstance\r\n<br>The selection of datapointinstance can be a manual selection of individual datapointinstance or all datapoint instances matching a datapoint template inside a zone or functional block\r\n<br>This resource path returns the detail for an trend template",
        "operationId": "9C9E03D096D3896451C83830E2A882C820476301AC4592A7311BF1F698C8A076",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested trend template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfuly get the detail of a trend template"
          }
        }
      }
    },
    "/api/v1/ontology/trendtemplate/count": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get statistics on the number of trend instances configured in the site",
        "description": "<br>A trend template is used to create several trend instances that will have the same behaviour on a set of DataPoint instance\r\n<br>The selection of datapointinstance can be a manual selection of individual datapoint instance or all datapoint instances matching a datapoint template inside a zone or functional block\r\n<br>This resource path returns the count for an trend template",
        "operationId": "B48CAC79AFA3FE528781947C35892E47279D31B0190BFA8427E6CBE2B1BA763F",
        "parameters": [
          {
            "name": "trendTemplateId",
            "in": "query",
            "description": "Filter for the ID of the trend template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trendTemplateName",
            "in": "query",
            "description": "Filter for the name of the trend template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "description": "Filter for the name of the zone template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "description": "Filter for the name of the functional block template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointTemplateName",
            "in": "query",
            "description": "Filter for the name of the datapoint template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display",
            "in": "query",
            "description": "Filter for the display",
            "schema": {
              "$ref": "#/components/schemas/DisplayType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the number of alarm template that matches the filter criteria"
          }
        }
      }
    },
    "/api/v1/ontology/trendtemplate/advanced/count": {
      "get": {
        "tags": [
          "The templates"
        ],
        "summary": "Get statistics on the number of trend instances configured in the site",
        "description": "<br>A trend template is used to create several trend instances that will have the same behaviour on a set of DataPoint instance\r\n<br>The selection of datapointinstance can be a manual selection of individual datapoint instance or all datapoint instances matching a datapoint template inside a zone or functional block\r\n<br>This resource path returns the count for an trend template",
        "operationId": "3E18DB477A4F5CBF25A60BFEF5A4987521D766A40CACBBA289D6379AE8AA64A4",
        "parameters": [
          {
            "name": "trendTemplateId",
            "in": "query",
            "description": "Filter for the ID of the trend template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trendTemplateName",
            "in": "query",
            "description": "Filter for the name of the trend template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "description": "Filter for the name of the zone template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "description": "Filter for the name of the functional block template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointTemplateName",
            "in": "query",
            "description": "Filter for the name of the datapoint template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display",
            "in": "query",
            "description": "Filter for the display",
            "schema": {
              "$ref": "#/components/schemas/DisplayType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the number of alarm template that matches the filter criteria"
          }
        }
      }
    },
    "/api/v1/ontology/property": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the description of the site",
        "description": "This resource path retrieves the root object in the ontology of the openBos hierarchy",
        "operationId": "89481B38C6FB4BF695C5E440D7972549DA14118220E8C7478D42B0735FD7AE46",
        "responses": {
          "200": {
            "description": "Root object of the site",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/property/device": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the fieldbus devices of the site",
        "description": "The devices are the equipment on the fieldbus network that are controlling actuators and sensors.\r\n\r\nThis resource path retrieves the list of physical fieldbus devices that are defined within the site",
        "operationId": "D64EDE295D1E747397BA4FDC7A542EB4D4D6D0B6263C11F3C24454BE26ECC404",
        "responses": {
          "200": {
            "description": "List of fieldbus devices within the site",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/property/device/{id}": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the detail of a fieldbus device",
        "description": "The devices are the equipment on the fieldbus network that are controlling actuators and sensors.\r\n\r\nThis resource path retrieves the detail of a physical fieldbus device",
        "operationId": "D485277BECAD8FD507D1EED847D4F1298BD8CDB70E9BB98C372D572786BA4FA0",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested physical device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detail information of the fieldbus device",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/building": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the buildings defined in the site",
        "operationId": "C194C1D355F9AE1B5BF5ADC464F083CBC04D42CFD76A0F7091E9DDFDD51F1918",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter criteria for matching specific building",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of buildings",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/building/{id}": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the detailed information of a building",
        "description": "Detail information of building will contain information that will allow to traverse the hierarchy of the building.\r\nie: you can follow to the next structure by using the retrieved parameter \"structureChildren\" within the result object.",
        "operationId": "9D5124A8475D5FC831ED43BF68F74FC4B93BC58D6C3FF30F88489C5883A8D33F",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the building",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Building detail information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/structure": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the list of structures defined in the site",
        "description": "A structure can be a floor, roof, facade, something that is fixed within a building.\r\n\r\nThis resource path retrieves the list of structure elements in the site.",
        "operationId": "FF3B479BA57BAF8A0F8FF315072DBC6850EA4EFC08A9423A25C6F361FB8D70D5",
        "parameters": [
          {
            "name": "typeStructure",
            "in": "query",
            "description": "Filter criteria on the queried type of structure",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Additional filter criteria",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of basic information on structures matching the filters",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/structure/{id}": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the detail information of a specific structure of the site",
        "description": "A structure can be a floor, roof, facade, something that is fixed within a building.\r\n\r\nThis resource path retrieves the detail information of a structure. The detail information contains parameters that can be used to traverse the hierarachy.\r\nie: parameter \"spaceChildren\" will contain the resource path to follow to get the list of spaces that are defined inside a specific struture.",
        "operationId": "6919CE9AA2E5C25BC26D73F0D3B57BF59F52ECF3B6583FE4687074D458E829F0",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the requested structure",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeStructure",
            "in": "query",
            "description": "Filter on the retrieved structures. Can be one of : floor, roof, facade, ground, basement, parking, exterior",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detail information of a structure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StructureDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StructureDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StructureDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/area": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get the logical areas defined in the site",
        "description": "An area can be for example a central HVAC area, with its related asset + the spaces that are supplied by this central HVAC asset\r\nIt has no \"physical\" meaning it is a grouping of several spaces\r\n\r\nThis routes return all the areas defined in the site",
        "operationId": "000292DB6CB3AFCD37BC64EFEA8273680D35A41D9CCCED3B086F7652C2434F89",
        "parameters": [
          {
            "name": "typeArea",
            "in": "query",
            "description": "Type of area that are filtered. Possible type of space can be found in the list of available tags in the documentation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Additional filter criteria",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching logical area",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/area/{id}": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get an area defined in the site",
        "description": "An area can be for example a central HVAC area, with its related asset + the spaces that are supplied by this central HVAC asset\r\nIt has no \"physical\" meaning it is a grouping of several spaces\r\n\r\nThis route returns detail information of one area defined in the site",
        "operationId": "591F9D1C221B34836E31B93703FC87949C21999BA8194946CCA53F5F2EE1311F",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the area",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeZone",
            "in": "query",
            "description": "Filter on the retrieved area. Can be one of : lobby, entrance, commercial_area, dining_area, atrium, coworking, waiting_hall, warehouse, library, reception, worship, lounge",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching logical area",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AreaDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AreaDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AreaDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/space": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Returns the spaces defined in the site",
        "description": "A space can be for example a meeting room, an office, a cafeteria a corridor\r\nIt is a space with a specific function within the building\r\n\r\nThis routes return all the spaces defined in the site. Meaning the generic zone with a tag bos:space.",
        "operationId": "452EFF265BED332029C5D00F16D959FF0DDCE43DA600D4DE4AF706A448BE0D36",
        "parameters": [
          {
            "name": "typeSpace",
            "in": "query",
            "description": "Type of space that are filtered. Possible type of space can be found in the list of possible tags in documentation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Additional filter criteria",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching logical area",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/space/{id}": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Returns a specific space defined in the site",
        "description": "A space can be for example a meeting room, an office, a cafeteria a corridor\r\nIt is a space with a specific function within the building\r\n\r\nThis routes return the detail information of a space defined in the site.",
        "operationId": "F826A4B29358EF573C33DE1CA9ADFB5FCDF50DB628AB321765F6514653DC32DD",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the space",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeSpace",
            "in": "query",
            "description": "Type of space that are filtered. Possible type of space can be found in the list of possible tags in documentation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Space successfully found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/mapview": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Returns the mapview definition of a structure",
        "description": "The mapview is the graphical representation of a structure in 2D including its spaces and areas.\r\n\r\nThis resource path returns the mapview definition (zoom, tiles). To get the coordinates of the spaces and area you must make a subsequent call to .../mapview/{id}/graphics wher {id} is the id in the definition object returned here",
        "operationId": "4FB5D77E32422DE6F33575C58F788E8DD3D7E491ADC931F75AAC6AD475C44D0F",
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "Unique identifier of the structure for which the mapview is requested",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The object definition of the mapview.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapViewDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapViewDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapViewDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/mapview/{id}/graphics": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Returns the coordinates of all the items present in the mapview",
        "description": "The mapview is the graphical representation of a structure in 2D including its spaces and areas.\r\n\r\nThis resource path returns the coordinates of the spaces (MapViewElementZoneDTO), areas (MapViewElementZoneDTO), functionalblock (MapViewElementFBDTO), text (MapViewElementTextDTO), images (MapViewElementImageDTO) that have been put on the mapview.",
        "operationId": "F602182A00A5508AB62F68AF66DBCD878E39527CB6CE0538F607A58D485EE272",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the mapview",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The object definition of mapview items and their coordinates.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MapViewElementFBDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementZoneDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementTextDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementImageDTO"
                      }
                    ],
                    "description": "Mapview object."
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MapViewElementFBDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementZoneDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementTextDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementImageDTO"
                      }
                    ],
                    "description": "Mapview object."
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MapViewElementFBDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementZoneDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementTextDTO"
                      },
                      {
                        "$ref": "#/components/schemas/MapViewElementImageDTO"
                      }
                    ],
                    "description": "Mapview object."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/zone/{id}/buildingsummary": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "",
        "operationId": "F9E584BC072BCFAD70ADE10589A0F73F39CF4CE6CCF7E91B77A4574D620DD4BA",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneOverviewDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneOverviewDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneOverviewDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/datapoint/{id}": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get an existing datapoint instance",
        "operationId": "AA2E6FF60B49390BB34BD80465B408DD480CF9590B68FF470F185A7E87CE60B3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the data point",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointInstanceDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/functionalblock": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get a list of functional block instance available in the system",
        "description": "Logged user must have access to at least one parent zone of the functional block",
        "operationId": "C5D3F391A015A63739574212CE6832B97D91920868F9E651DA4C9AD865E72C1D",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Contains search pattern to produce the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trends",
            "in": "query",
            "description": "If present and true only returns the functional blocks linked to a trend",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockInstanceInfoDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockInstanceInfoDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionalBlockInstanceInfoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/functionalblock/{id}": {
      "get": {
        "tags": [
          "Topology of the property"
        ],
        "summary": "Get an existing functional block instance detail",
        "description": "Logged user must have access to at least one parent zone of the functional block",
        "operationId": "38DFA1BEB4CA5BE16D1E4E40CA4B57787A26EB280C623924E2519D1A4C3F055E",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the functional block instance object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalBlockInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalBlockInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalBlockInstanceDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/retention-policy": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get retention policies",
        "operationId": "76A8F5BEBAFF65D190D25D4B552E4B06B829BCBD2AE65B0982C3F8042D1D1A2D",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetentionPolicyDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetentionPolicyDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetentionPolicyDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/trend": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get all the trend logs in the site.",
        "description": "<br>openBOS manages trend logs. These trend logs are refereing to Trend logs templates or may be manuel trend logs.\r\n<br>Ontology also stores Trend logs retention policies (frequency, theshold, ….) and the datapoint associated to the trend logs\r\n<br>That resource path gives the entire trend logs inside the property.",
        "operationId": "44DD4A66BF9EDED799A5D79DA9D41DB6CDCD3C5001126AAF82CFC6E9BDA70055",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Contains search pattern to produce the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned trend instance (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of trend instance in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrendInstanceDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrendInstanceDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrendInstanceDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Trends"
        ],
        "summary": "Create a new trend instance",
        "operationId": "671897476E92749B997CF1B9159170076E544CF7D85B50DDDDD653B939566BF4",
        "requestBody": {
          "description": "Trend instance to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceCreationDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceCreationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceCreationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceCreationDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created trend instance",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceAdvancedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceAdvancedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceAdvancedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/trend/{id}": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get a trend instance by id",
        "operationId": "A2C3644F048C28E2C0D716FC9D78930C71DE7318E27C103C664F1F4BA606BBF5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of trend instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Trends"
        ],
        "summary": "Update an existing trend instance",
        "operationId": "37AE60D68B25D73E5FE0E0356B3DA9100BB3AC91BA6F6C352C69CCDC9D4215B7",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the trend instance to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New trend instance",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TrendInstanceDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Trends"
        ],
        "summary": "Delete an existing trend instance",
        "operationId": "E70022291A78FDF94471052B38682B3F7BF03A7F1A016E651A84A40D61AB2009",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the trend instance to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trend/advanced/{id}": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get a trend instance by id with advanced information.",
        "description": "Advanced information can contain:\r\n - Name of the parent zone or asset\r\n - Name of the parent zone template or asset template\r\n - Unit of the trend",
        "operationId": "1B0E409AA63F5D4F91244423552DE8B53D288B8EB5ADCD8679E13C2B4E2A9D1F",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of trend instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceAdvancedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceAdvancedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendInstanceAdvancedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/trend/advanced": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get list of trend instances with advanced datas",
        "operationId": "89E39231FC601500949D236D5B437C410FB5AA94BF0DA05E1345F9D0B301F7D3",
        "parameters": [
          {
            "name": "zoneName",
            "in": "query",
            "description": "Filter for the name of the zone instance",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "description": "Filter for the name of the zone template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneParentName",
            "in": "query",
            "description": "Filter for the name of the parent zone instance",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockName",
            "in": "query",
            "description": "Filter for the name of the functional block instance",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "description": "Filter for the name of the functional block template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointName",
            "in": "query",
            "description": "Filter for the name of the datapoint instance",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned trend instance (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of trend instance in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trend/advanced/count": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get number of trend instances",
        "operationId": "81DDF696A72566CAD40159CAC7420D5C6C91FE08F5615D46A1821F2FC0BD9703",
        "parameters": [
          {
            "name": "zoneName",
            "in": "query",
            "description": "Filter for the name of the zone instance",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneTemplateName",
            "in": "query",
            "description": "Filter for the name of the zone template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneParentName",
            "in": "query",
            "description": "Filter for the name of the parent zone instance",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockName",
            "in": "query",
            "description": "Filter for the name of the functional block instance",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "functionalBlockTemplateName",
            "in": "query",
            "description": "Filter for the name of the functional block template",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datapointName",
            "in": "query",
            "description": "Filter for the name of the datapoint instance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trend/advanced/zone/{zoneid}": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get list of trend instances under a zone.",
        "operationId": "DF520B4B789E824454BDDC28445939F34640AF82B1EFF5E1183A7B074ECB53AE",
        "parameters": [
          {
            "name": "zoneid",
            "in": "path",
            "description": "Id of the zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "structureFirstLevelOnly",
            "in": "query",
            "description": "Filter first level of trend",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned trend instance (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of trend instance in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trend/advanced/zone/{zoneid}/count": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Count trend instances under a zone.",
        "operationId": "5D2BCFEF8C2CD0B47941FBCA00012FF2FD4531AC0CD0C7A2B4A492609462F3B2",
        "parameters": [
          {
            "name": "zoneid",
            "in": "path",
            "description": "Id of the zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "structureFirstLevelOnly",
            "in": "query",
            "description": "Filter first level of trend",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trend/advanced/functionalblock/{fbid}": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get list of trend instances under an asset.",
        "operationId": "9EF854068665C87AF95C9A94F3CD7C93EBEA646534B7E0AF2F4D48EA9E6EAED9",
        "parameters": [
          {
            "name": "fbid",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned trend instance (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of trend instance in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trend/advanced/functionalblock/{fbid}/count": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Count of trend instances under an asset.",
        "operationId": "AE84800B0056A3B1BDD11698AC7D25BD793F8B5004F9DCB93EF013E9457B72EB",
        "parameters": [
          {
            "name": "fbid",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/datapointinstance/livedata/extended/subscribe/{id}/datapoints/trends": {
      "post": {
        "tags": [
          "Trends"
        ],
        "summary": "Add datapoints linked to a trend in a datapoint subscription",
        "operationId": "A9483E42BCC2301090E89655FD2C027452F3C2DD9871E4F207ED78B03867E494",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of trend to monitor",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TrendToDatapointSubscriptionCreateDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendToDatapointSubscriptionCreateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendToDatapointSubscriptionCreateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TrendToDatapointSubscriptionCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointSubscriptionCreateResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ontology/trend/{id}/values": {
      "get": {
        "tags": [
          "Trends"
        ],
        "summary": "Get trend values for an existing trend instance",
        "operationId": "07D88C394877D15316C11330D61A17CDAF1ED56BF1893F40C509260ADEB9D747",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the trend instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trendPeriodType",
            "in": "query",
            "description": "Trend period to use for getting values",
            "schema": {
              "$ref": "#/components/schemas/TrendPeriodType"
            }
          },
          {
            "name": "downSamplingId",
            "in": "query",
            "description": "When trendPeriodType is set to DownSampling, the downSamplingId is required",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Inferior date criteria to filter data",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Superior date criteria to filter data",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "maximumCount",
            "in": "query",
            "description": "Maximum count of point in result",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeBorderPoints",
            "in": "query",
            "description": "Include the closest value just after before \"from\" and just after \"to\" criterias",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the first returned trend value (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max count of trend values in the result list (for paging)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wantNumericValues",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "maximumCountMandatory",
            "in": "query",
            "description": "If true and if maximumCount presents, the result will contain no value and cannotMatchMaximumCount set to true.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TrendValuesResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendValuesResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendValuesResultDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Trends"
        ],
        "summary": "Delete values for a trend instance",
        "operationId": "AD1081DA3499CDAB37F20E3EC449B05ABA62D13CA25CDE5423A45527D91BB0F8",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of trend instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "olderThan",
            "in": "query",
            "description": "Values older than this criteria will be deleted",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/trend/values": {
      "delete": {
        "tags": [
          "Trends"
        ],
        "summary": "Delete values of all allowed trend instances",
        "operationId": "A69E34F8468C6E02974DC5F6CA291695863D1D2EECAC1288CE4B103252648E91",
        "parameters": [
          {
            "name": "olderThan",
            "in": "query",
            "description": "Values older than this criteria will be deleted",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ontology/resources/{endpointPath}": {
      "description": "Resources path",
      "get": {
        "tags": [
          "Edge resource files"
        ],
        "description": "Resources path",
        "operationId": "DCEA155AB47D6F9C48E5C914BB87FD3380660FEFB8308E2247A61B46CF8465BD",
        "parameters": [
          {
            "name": "endpointPath",
            "in": "path",
            "description": "relative url path to the resource file to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessRightDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Identification code",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Localized description",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Access Right definition"
      },
      "AcknowledgeAlarmDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of a live alarm to acknowledge",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment of the acknowledge",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information to acknowledge an alarm"
      },
      "ActionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "publicId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "custom": {
            "type": "boolean"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "valuesCanBeEditedInOperation": {
            "type": "boolean"
          },
          "actionElements": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ElementDatapointWriteDTO"
                }
              ]
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActionElementType": {
        "enum": [
          "TemplateDatapointWriteDTO",
          "IndividualDatapointWriteDTO",
          "ElementDatapointWriteDTO"
        ],
        "type": "string"
      },
      "AdvancedDatapointInstanceDTO": {
        "type": "object",
        "properties": {
          "datapointInstanceId": {
            "type": "string",
            "description": "Unique identifier of the datapoint instance",
            "nullable": true
          },
          "datapointTemplateId": {
            "type": "string",
            "description": "Unique identifier of the datapoint template",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true
          },
          "displayUnit": {
            "type": "string",
            "description": "Display unit",
            "nullable": true
          },
          "dataType": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Data type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about a datapoint instance into a functional block or a zone instance control panel"
      },
      "AdvancedDatapointTemplateDTO": {
        "type": "object",
        "properties": {
          "datapointTemplateId": {
            "type": "string",
            "description": "Unique identifier of the datapoint template",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true
          },
          "displayUnit": {
            "type": "string",
            "description": "Display unit",
            "nullable": true
          },
          "dataType": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Data type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about a datapoint template configured into an asset or a zone template control panel"
      },
      "AdvancedPropertyInstanceDTO": {
        "type": "object",
        "properties": {
          "propertyInstanceId": {
            "type": "string",
            "description": "Unique identifier of the property instance",
            "nullable": true
          },
          "propertyTemplateId": {
            "type": "string",
            "description": "Unique identifier of the property template",
            "nullable": true
          },
          "propertyInstanceValue": {
            "description": "Property instance value",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true
          },
          "displayUnit": {
            "type": "string",
            "description": "Display unit",
            "nullable": true
          },
          "dataType": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Data type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about a property datapoint instance into a functional block or a zone instance control panel"
      },
      "AdvancedPropertyTemplateDTO": {
        "type": "object",
        "properties": {
          "propertyDatapointTemplateId": {
            "type": "string",
            "description": "Unique identifier of the property datapoint template",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true
          },
          "displayUnit": {
            "type": "string",
            "description": "Display unit",
            "nullable": true
          },
          "dataType": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Data type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about a property datapoint template configured into an asset or a zone template control panel"
      },
      "AlarmConfigurationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the alarm template",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "description": "Period of the alarm updates in milliseconds.\r\nIf not present it is will be 10 seconds, if zero disable the trend",
            "format": "int64",
            "default": 5000,
            "nullable": true
          },
          "needAcknowledged": {
            "type": "boolean",
            "description": "Need acknowledged",
            "default": false
          },
          "deadband": {
            "type": "number",
            "description": "Deadband\r\nIf not present it is will be 0",
            "format": "double",
            "default": 0,
            "nullable": true
          },
          "triggers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AlarmTriggerDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalOFFDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalONDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerInBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNetworkDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNotValueDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerOutOfBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerValueDTO"
                }
              ]
            },
            "description": "Triggers.\r\nIf no trigger the default trigger depend on the datapoint",
            "nullable": true
          },
          "hysteresis": {
            "type": "number",
            "description": "Hysteresis.\r\nIf not present it will be 0",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Alarm configuration"
      },
      "AlarmHistoricDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the alarm historic",
            "nullable": true
          },
          "middlewareId": {
            "type": "string",
            "description": "Id of the alarm historic in the middleware",
            "nullable": true
          },
          "alarmInstanceId": {
            "type": "string",
            "description": "Id of the alarm instance",
            "nullable": true
          },
          "dataPointInstanceId": {
            "type": "string",
            "description": "Id of the datapoint instance",
            "nullable": true
          },
          "alarmTriggerId": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "dataPointName": {
            "type": "string",
            "description": "Name of the datapoint instance",
            "nullable": true
          },
          "alarmInstanceName": {
            "type": "string",
            "description": "Name of the alarm instance",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "description": "Id of the alarm historic session in the middleware",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm historic",
            "nullable": true
          },
          "trigger": {
            "$ref": "#/components/schemas/BOSAlarmTrigger"
          },
          "active": {
            "type": "boolean",
            "description": "Active flag for alarm historic"
          },
          "acked": {
            "type": "boolean",
            "description": "Acked flag for alarm historic"
          },
          "closed": {
            "type": "boolean",
            "description": "Closed flag for alarm historic"
          },
          "desynchro": {
            "type": "boolean",
            "description": "Desynchro flag for alarm historic"
          },
          "timeStamp": {
            "type": "string",
            "description": "Date of the alarm historic",
            "format": "date-time"
          },
          "quality": {
            "$ref": "#/components/schemas/MiddlewareQuality"
          },
          "value": {
            "type": "number",
            "description": "Value of the alarm historic",
            "format": "double"
          },
          "displayValue": {
            "description": "Display value of the alarm historic",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Id of the user that acks the alarm",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment of the ack of the alarm",
            "nullable": true
          },
          "needAcknowledge": {
            "type": "boolean",
            "description": "Need acknowledge or not"
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          },
          "functionalBlockName": {
            "type": "string",
            "description": "Functional block name if datapoint belongs to a functional block",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Functional block id if datapoint belongs to a functional block",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "description": "Zone name if datapoint belongs to a zone",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Zone id if datapoint belongs to a zone",
            "nullable": true
          },
          "structureName": {
            "type": "string",
            "description": "Structure name of the zone or of the functional block",
            "nullable": true
          },
          "dataPointTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the datapoint",
            "nullable": true
          },
          "displayUnitShortString": {
            "type": "string",
            "description": "Display unit short string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This DTO is used when you return alarm historic"
      },
      "AlarmInstanceAdvancedDTO": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "description": "ID of the zone of the datapoint instance or empty",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "description": "Name of the zone of the datapoint instance or empty",
            "nullable": true
          },
          "zoneTemplateName": {
            "type": "string",
            "description": "Name of the zone template of the datapoint instance or empty",
            "nullable": true
          },
          "zoneParentName": {
            "type": "string",
            "description": "Name of the zone parent of the zone of the datapoint instance or empty",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Id of the functionalBlock of the datapoint instance or empty",
            "nullable": true
          },
          "functionalBlockName": {
            "type": "string",
            "description": "Name of the functionalBlock of the datapoint instance or empty",
            "nullable": true
          },
          "functionalBlockTemplateName": {
            "type": "string",
            "description": "Name of the functionalBlock template of the datapoint instance or empty",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm instance",
            "nullable": true
          },
          "datapoint": {
            "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
          },
          "active": {
            "type": "boolean",
            "description": "Active flag for the alarm instance"
          },
          "hysteresis": {
            "type": "number",
            "description": "Hysteresis of the alarm instance",
            "format": "double"
          },
          "needAcknowledge": {
            "type": "boolean",
            "description": " NeedAcknowledge flag for the alarm instance        \r\nIf true the alarm disappears only when no more present on network AND acknowledged.\r\nIf false the alarm disappears when no more present on network even if not acknowledged."
          },
          "triggers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AlarmTriggerDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalOFFDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalONDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerInBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNetworkDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNotValueDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerOutOfBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerValueDTO"
                }
              ]
            },
            "description": "List of alarm trigger for the alarm instance",
            "nullable": true
          },
          "override": {
            "type": "boolean",
            "description": "Override flag of the alarm instance. This flag is only used when alarm instance is created from alarm template\r\n   If true, some data of the alarm instance has replaced that coming from alarm template"
          },
          "alarmTemplateId": {
            "type": "string",
            "description": "Id of the alarm template",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the alarm instance",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Period of the alarm updates in milliseconds.",
            "format": "int64",
            "nullable": true
          },
          "applicationSource": {
            "type": "string",
            "description": "Name of the application responsible for alarm instance creation/update. May be null",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlarmInstanceCreationDTO": {
        "type": "object",
        "properties": {
          "datapoint": {
            "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
          },
          "active": {
            "type": "boolean",
            "description": "Active flag for the alarm instance"
          },
          "hysteresis": {
            "type": "number",
            "description": "Hysteresis of the alarm instance",
            "format": "double"
          },
          "needAcknowledge": {
            "type": "boolean",
            "description": " NeedAcknowledge flag for the alarm instance  \r\nIf true the alarm disappears only when no more present on network AND acknowledged.\r\nIf false the alarm disappears when no more present on network even if not acknowledged."
          },
          "triggers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AlarmTriggerDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalOFFDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalONDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerInBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNetworkDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNotValueDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerOutOfBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerValueDTO"
                }
              ]
            },
            "description": "List of alarm trigger for the alarm instance",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the alarm instance",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Period in milliseconds",
            "format": "int64",
            "nullable": true
          },
          "applicationSource": {
            "type": "string",
            "description": "Name of the application responsible for alarm instance creation/update. May be null",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Id of asset. For individual alarms only.",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Id of zone. For individual alarms only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This DTO is used when we create a new AlarmInstance"
      },
      "AlarmInstanceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the alarm instance",
            "nullable": true
          },
          "datapoint": {
            "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
          },
          "active": {
            "type": "boolean",
            "description": "Active flag for the alarm instance"
          },
          "hysteresis": {
            "type": "number",
            "description": "Hysteresis of the alarm instance",
            "format": "double"
          },
          "needAcknowledge": {
            "type": "boolean",
            "description": " NeedAcknowledge flag for the alarm instance        \r\nIf true the alarm disappears only when no more present on network AND acknowledged.\r\nIf false the alarm disappears when no more present on network even if not acknowledged."
          },
          "triggers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AlarmTriggerDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalOFFDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalONDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerInBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNetworkDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNotValueDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerOutOfBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerValueDTO"
                }
              ]
            },
            "description": "List of alarm trigger for the alarm instance",
            "nullable": true
          },
          "override": {
            "type": "boolean",
            "description": "Override flag of the alarm instance. This flag is only used when alarm instance is created from alarm template\r\n   If true, some data of the alarm instance has replaced that coming from alarm template"
          },
          "alarmTemplateId": {
            "type": "string",
            "description": "Id of the alarm template",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the alarm instance",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Period of the alarm updates in milliseconds.",
            "format": "int64",
            "nullable": true
          },
          "applicationSource": {
            "type": "string",
            "description": "Name of the application responsible for alarm instance creation/update. May be null",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlarmInstanceInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the alarm instance",
            "nullable": true
          },
          "datapoint": {
            "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
          },
          "alarmTemplateId": {
            "type": "string",
            "description": "Id of the alarm template",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlarmInstancesCountDTO": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          },
          "needAcknowledge": {
            "type": "boolean"
          },
          "activeCount": {
            "type": "integer",
            "format": "int64"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AlarmInstanceStatisticDTO": {
        "type": "object",
        "properties": {
          "severity": {
            "type": "string",
            "nullable": true
          },
          "countTotal": {
            "type": "integer",
            "format": "int32"
          },
          "countActive": {
            "type": "integer",
            "format": "int32"
          },
          "needNeedAcknowledge": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AlarmSeverity": {
        "enum": [
          "Log",
          "Low",
          "High",
          "Urgent",
          "Critical"
        ],
        "type": "string"
      },
      "AlarmSynchroErrorDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlarmTemplateDescriptionPreviewDTO": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "description": "The placeholder to test",
            "nullable": true
          },
          "trigger": {
            "type": "string",
            "description": "The value of the trigger",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlarmTemplateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the alarm template",
            "nullable": true
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the alarm template (read only)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of th alarm template",
            "nullable": true
          },
          "hysteresis": {
            "type": "number",
            "description": "Hysteresis of the alarm template",
            "format": "double"
          },
          "needAcknowledge": {
            "type": "boolean",
            "description": " NeedAcknowledge flag for the alarm template\r\nIf true the alarm disappears only when no more present on network AND acknowledged.\r\nIf false the alarm disappears when no more present on network even if not acknowledged."
          },
          "datapointSelector": {
            "$ref": "#/components/schemas/DatapointSelectorDTO"
          },
          "triggers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AlarmTriggerDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalOFFDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerDigitalONDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerHiHiDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerInBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerLoLoDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNetworkDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerNotValueDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerOutOfBandDTO"
                },
                {
                  "$ref": "#/components/schemas/AlarmTriggerValueDTO"
                }
              ]
            },
            "description": "Array of alarm trigger",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the alarm template",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Period in milliseconds",
            "format": "int64",
            "nullable": true
          },
          "needRefreshInstances": {
            "type": "boolean",
            "description": "NeedRefreshInstances flag of the alarm template\r\n If true, indicates that alarm template must recalculate all alarm instance"
          },
          "complexDataTypeFieldName": {
            "type": "string",
            "description": "Name of the field of the complex data type of the datapoint to use\r\nIgnored if the datapoint data type is not a complex data type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerDigitalOFFDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AlarmTriggerDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerDigitalONDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AlarmTriggerDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alarm trigger",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm trigger",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "alarmtriggerdigitaloffdto": "#/components/schemas/AlarmTriggerDigitalOFFDTO",
            "alarmtriggerdigitalondto": "#/components/schemas/AlarmTriggerDigitalONDTO",
            "alarmtriggerinbanddto": "#/components/schemas/AlarmTriggerInBandDTO",
            "alarmtriggernetworkdto": "#/components/schemas/AlarmTriggerNetworkDTO",
            "alarmtriggeroutofbanddto": "#/components/schemas/AlarmTriggerOutOfBandDTO"
          }
        }
      },
      "AlarmTriggerHiDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold of the alarm trigger",
            "format": "double"
          },
          "thresholdDisplayValue": {
            "description": "Display value of the threshold.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alarm trigger",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm trigger",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerHiHiDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold of the alarm trigger",
            "format": "double"
          },
          "thresholdDisplayValue": {
            "description": "Display value of the threshold.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alarm trigger",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm trigger",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerInBandDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AlarmTriggerDTO"
          }
        ],
        "properties": {
          "index": {
            "type": "integer",
            "description": "Index of alarm trigger",
            "format": "int32"
          },
          "thresholdLower": {
            "type": "number",
            "description": "Threshold lower of the alarm trigger",
            "format": "double"
          },
          "thresholdUpper": {
            "type": "number",
            "description": "Threshold upper of the alarm trigger",
            "format": "double"
          },
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerLoDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold of the alarm trigger",
            "format": "double"
          },
          "thresholdDisplayValue": {
            "description": "Display value of the threshold.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alarm trigger",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm trigger",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerLoLoDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold of the alarm trigger",
            "format": "double"
          },
          "thresholdDisplayValue": {
            "description": "Display value of the threshold.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alarm trigger",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm trigger",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerNetworkDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AlarmTriggerDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerNotValueDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold of the alarm trigger",
            "format": "double"
          },
          "thresholdDisplayValue": {
            "description": "Display value of the threshold.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alarm trigger",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm trigger",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerOutOfBandDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AlarmTriggerDTO"
          }
        ],
        "properties": {
          "index": {
            "type": "integer",
            "description": "Index of the alarm trigger",
            "format": "int32"
          },
          "thresholdLower": {
            "type": "number",
            "description": "Threshold lower of the alarm trigger",
            "format": "double"
          },
          "thresholdUpper": {
            "type": "number",
            "description": "Threshold upper of the alarm trigger",
            "format": "double"
          },
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          }
        },
        "additionalProperties": false
      },
      "AlarmTriggerType": {
        "enum": [
          "Unknown",
          "AlarmTriggerDigitalOFFDTO",
          "AlarmTriggerDigitalONDTO",
          "AlarmTriggerHiDTO",
          "AlarmTriggerHiHiDTO",
          "AlarmTriggerLoDTO",
          "AlarmTriggerLoLoDTO",
          "AlarmTriggerInBandDTO",
          "AlarmTriggerNetworkDTO",
          "AlarmTriggerNotValueDTO",
          "AlarmTriggerOutOfBandDTO",
          "AlarmTriggerValueDTO"
        ],
        "type": "string",
        "description": "Discriminator of AlarmTrigger"
      },
      "AlarmTriggerValueDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AlarmTriggerType"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold of the alarm trigger",
            "format": "double"
          },
          "thresholdDisplayValue": {
            "description": "Display value of the threshold.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the alarm trigger",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alarm trigger",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the alarm trigger",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlarmSeverity"
          }
        },
        "additionalProperties": false
      },
      "AlgoConfigurationDTO": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "Values of the parameters of the algo for this configuration",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "needRecomputeInstances": {
            "type": "boolean",
            "description": "NeedRecomputeInstances flag of the algorithm configuration\r\n If true, indicates that algorithm instances based on the algorithm configuration must be recomputed"
          },
          "algoTemplateId": {
            "type": "string",
            "description": "Algorithm template targeted by the configuration",
            "nullable": true
          },
          "zoneTemplateId": {
            "type": "string",
            "description": "Zone targeted by the configuration",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO of an algorithm configuration\r\nAlgorithmConfiguration links a zone template to an algorithm template.\r\nIt defines the values of parameters that are specifics to an algorithm."
      },
      "AlgoConfigurationInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "needRecomputeInstances": {
            "type": "boolean",
            "description": "NeedRecomputeInstances flag of the algorithm configuration\r\n If true, indicates that algorithm instances based on the algorithm configuration must be recomputed"
          },
          "algoTemplateId": {
            "type": "string",
            "description": "Algorithm template targeted by the configuration",
            "nullable": true
          },
          "zoneTemplateId": {
            "type": "string",
            "description": "Zone targeted by the configuration",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an algorithm configuration"
      },
      "AlgoConfigurationUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceValueDTO"
            },
            "description": "Values of the parameters of the algo for this configuration",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO of an algorithm configuration for update operation\r\nAlgorithmConfiguration links a zone template to an algorithm template.\r\nIt defines the values of parameters that are specifics to an algorithm."
      },
      "AlgoError": {
        "enum": [
          "None",
          "MissingInputTag",
          "MissingOutputTag",
          "MissingInputValue",
          "GeneralException"
        ],
        "type": "string"
      },
      "AlgoExecutionBusDatapointDTO": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "nullable": true
          },
          "isCommand": {
            "type": "boolean"
          },
          "value": {
            "nullable": true
          },
          "aggregatedValue": {
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "unitShortString": {
            "type": "string",
            "nullable": true
          },
          "busInformation": {
            "type": "string",
            "nullable": true
          },
          "lastWriteError": {
            "type": "string",
            "nullable": true
          },
          "datapointPath": {
            "type": "string",
            "nullable": true
          },
          "datapointId": {
            "type": "string",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "protocolArguments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlgoExecutionMemoryDatapointDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlgoInstanceConfigurationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceValueDTO"
            },
            "description": "Parameters of the algorithm",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Algorithm instance for update operation"
      },
      "AlgoInstanceDTO": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "Parameters of the algorithm",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the algorithm instance is active or not"
          },
          "algoConfigurationId": {
            "type": "string",
            "description": "Associated algorithm configuration",
            "nullable": true
          },
          "algoTemplateId": {
            "type": "string",
            "description": "Associated algorithm template",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "description": "Associated zone instance",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Alrorithm instance"
      },
      "AlgoInstanceExecutionDetailDTO": {
        "type": "object",
        "properties": {
          "busDatapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlgoExecutionBusDatapointDTO"
            },
            "nullable": true
          },
          "requiredDatapointTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "memoryDatapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlgoExecutionMemoryDatapointDTO"
            },
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "nullable": true
          },
          "zoneInstanceName": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/AlgoState"
          },
          "error": {
            "$ref": "#/components/schemas/AlgoError"
          }
        },
        "additionalProperties": false
      },
      "AlgoInstanceExecutionInfoDTO": {
        "type": "object",
        "properties": {
          "zoneInstanceId": {
            "type": "string",
            "nullable": true
          },
          "zoneInstanceName": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/AlgoState"
          },
          "error": {
            "$ref": "#/components/schemas/AlgoError"
          }
        },
        "additionalProperties": false
      },
      "AlgoInstanceInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the algorithm instance is active or not"
          },
          "algoConfigurationId": {
            "type": "string",
            "description": "Associated algorithm configuration",
            "nullable": true
          },
          "algoTemplateId": {
            "type": "string",
            "description": "Associated algorithm template",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "description": "Associated zone instance",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an algrorithm instance"
      },
      "AlgoModuleDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the module",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the module",
            "nullable": true
          },
          "mandatoryDatapointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of referenced mandatory datapoints of the module",
            "nullable": true
          },
          "optionalDatapointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of referenced optional datapoints of the module",
            "nullable": true
          },
          "parameterIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated parameters",
            "nullable": true
          },
          "moduleActivityParameterId": {
            "type": "string",
            "description": "Id of the parameter that activates the module",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO of a module of an algorithm template"
      },
      "AlgoRunningActivationSubscriptionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlgoSetState": {
        "enum": [
          "Pause",
          "Restart",
          "HardRestart"
        ],
        "type": "string"
      },
      "AlgoState": {
        "enum": [
          "Started",
          "Stopped",
          "Paused"
        ],
        "type": "string"
      },
      "AlgoTemplateDTO": {
        "type": "object",
        "properties": {
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlgoModuleDTO"
            },
            "description": "List of modules associated to the algorithm template",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointTemplateDTO"
            },
            "description": "List of datapoint templates attached to the algorithm template",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointTemplateDTO"
            },
            "description": "List of properties templates attached to the algorithm template",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated tags.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO of an algorithm template"
      },
      "AlgoTemplateInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated tags.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an algorithm template"
      },
      "AnimationsInfoDTO": {
        "type": "object",
        "properties": {
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockAnimationDTO"
            },
            "description": "All functional block animation configurations.",
            "nullable": true
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneAnimationDTO"
            },
            "description": "All Zone template animation configurations.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "All view animation configurations."
      },
      "AnimationType": {
        "enum": [
          "Float",
          "Enum",
          "Bool"
        ],
        "type": "string",
        "description": "Types of animation."
      },
      "AreaDTO": {
        "type": "object",
        "properties": {
          "zoneType": {
            "type": "string",
            "description": "Type of area",
            "nullable": true
          },
          "structureChildren": {
            "type": "string",
            "description": "Resource path to query the children structures of the area",
            "nullable": true
          },
          "structureParents": {
            "type": "string",
            "description": "Resource path to query the parent structures of the area",
            "nullable": true
          },
          "zoneChildren": {
            "type": "string",
            "description": "Resource path to query the children areas of the area",
            "nullable": true
          },
          "zoneParents": {
            "type": "string",
            "description": "Resource path to query the parent areas of the area",
            "nullable": true
          },
          "spaceChildren": {
            "type": "string",
            "description": "Resource path to query the children spaces of the area",
            "nullable": true
          },
          "spaceParents": {
            "type": "string",
            "description": "Resource path to query the parent spaces of the area",
            "nullable": true
          },
          "tenants": {
            "type": "string",
            "description": "Resource path to query the tenants of the area",
            "nullable": true
          },
          "owners": {
            "type": "string",
            "description": "Resource path to query the owners of the area",
            "nullable": true
          },
          "propertyManagers": {
            "type": "string",
            "description": "Resource path to query the property managers of the area",
            "nullable": true
          },
          "facilityManagers": {
            "type": "string",
            "description": "Resource path to query the facility managers of the area",
            "nullable": true
          },
          "visitors": {
            "type": "string",
            "description": "Resource path to query the visitors of the area",
            "nullable": true
          },
          "administrators": {
            "type": "string",
            "description": "Resource path to query the administrators of the area",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceDTO"
            },
            "description": "List of dataPoint instances inherited from datapoint template",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "List of properties inherited from property template",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceOfZoneDTO"
            },
            "description": "List of functional block instances attached to the zone",
            "nullable": true
          },
          "authorized": {
            "type": "boolean",
            "description": "If true access is granted to this zone."
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent zones attached to the zone",
            "nullable": true
          },
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of children zone instance definition attached to the created zone\r\n(information only)",
            "nullable": true
          },
          "hasMapView": {
            "type": "boolean",
            "description": "True if zone has a mapview attached to it"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Represents a area"
      },
      "ArrayDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          },
          "elementType": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssignDatapointToBusDatapointDTO": {
        "type": "object",
        "properties": {
          "datapointInstanceId": {
            "type": "string",
            "description": "Id of datapoint instance to assign",
            "nullable": true
          },
          "converterId": {
            "type": "string",
            "description": "Id of converter to use. Null for no converter",
            "nullable": true
          },
          "busUnit": {
            "type": "string",
            "description": "Bus unit to use for bus datapoint.\r\nNull to ignore unit",
            "nullable": true
          },
          "busDatapointId": {
            "type": "string",
            "description": "Id of bus datapoint to assign.\r\nIf null or empty then datapoint will be UNASSIGNED",
            "nullable": true
          },
          "additionalArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Additional protocol argument.\r\nArguments that will be added to the bus datapoint protocol arguments before assignation.\r\nThese arguments will override bus datapoint protocol arguments if they already exist in the bus datapoint.\r\nIf null or empty then no additional protocol arguments will be added",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data to assign a datapoint to a bus datapoint"
      },
      "AsyncMethodLaunchDTO": {
        "type": "object",
        "properties": {
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionDTO"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyValueDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationDTO": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BackgroundStatusDTO": {
        "type": "object",
        "properties": {
          "isAvailable": {
            "type": "boolean",
            "description": "Indicates if a background exists."
          },
          "generationProgress": {
            "type": "number",
            "description": "Completion ratio for the generation of a new background.\r\nSystem.Double.NaN if no new background is being generated.",
            "format": "double"
          },
          "errorCode": {
            "type": "string",
            "description": "Error code produced by the last background generation (if any).",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "Error produced by the last background generation (if any).",
            "nullable": true
          },
          "errorData": {
            "type": "string",
            "description": "Technical data about the error produced by the last background generation (if any).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BackupKind": {
        "enum": [
          "Full",
          "ConfigurationOnly"
        ],
        "type": "string"
      },
      "BackupRequestDTO": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Subscription's connectionId used for backup notification",
            "nullable": true
          },
          "description": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Description of the backup",
            "nullable": true
          },
          "password": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "An optional password to use for backup encryption",
            "nullable": true
          },
          "kind": {
            "$ref": "#/components/schemas/BackupKind"
          }
        },
        "additionalProperties": false,
        "description": "Backup request"
      },
      "BaseActionElementDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ActionElementType"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "elementdatapointwritedto": "#/components/schemas/ElementDatapointWriteDTO"
          }
        }
      },
      "BatchDTO": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchRequestDTO"
            },
            "description": "The list of requests",
            "nullable": true
          },
          "useTransaction": {
            "type": "boolean",
            "description": "Indicates if the requests should be executed in the same transaction"
          },
          "stopAtFirstError": {
            "type": "boolean",
            "description": "Indicates the requests should stop to be executed when the first error occurs (only available when UseTransaction is false)"
          },
          "oldVersion": {
            "type": "boolean",
            "description": "If OldVersion = true, then we use the serializer without EnumToStringConverter\r\nIf OldVersion = false, then we use the serializer with EnumToStringConverter",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the requests to execute as a batch"
      },
      "BatchRequestDTO": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "the uri of the request",
            "nullable": true
          },
          "method": {
            "type": "string",
            "description": "the method to use for the request. Should be either GET, POST, PUT or DELETE",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The content of the request (the serialized DTO)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The description of a single request to execute within a batch"
      },
      "BatchResultDTO": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "content": {
            "type": "string",
            "description": "The result of the request.\r\nIf the request is a success : the expected result. If the request was a POST, the result is the id of the new entity created\r\nIf the request is a success, but a following request failed and they were in transactions : \"Canceled by transaction\"\r\nIf the request has not been executed : \"Skipped\"",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the result of a single batch request"
      },
      "BoolDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          }
        },
        "additionalProperties": false
      },
      "BooleanStringAnimationDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StringAnimationDTO"
          }
        ],
        "properties": {
          "falseValue": {
            "type": "string",
            "description": "String value for false value.",
            "nullable": true
          },
          "trueValue": {
            "type": "string",
            "description": "String value for true value.",
            "nullable": true
          },
          "animationType": {
            "$ref": "#/components/schemas/AnimationType"
          }
        },
        "additionalProperties": false,
        "description": "Animation of a boolean datapoint."
      },
      "BOSAlarmTrigger": {
        "enum": [
          "none",
          "analognotvalue",
          "analogvalue",
          "digitaloff",
          "digitalon",
          "analogoutband2",
          "analogoutband1",
          "analoginband2",
          "analoginband1",
          "analoglo",
          "analoglolo",
          "analoghi",
          "analoghihi",
          "networkerror",
          "addresserror",
          "all"
        ],
        "type": "string"
      },
      "BranchDTO": {
        "type": "object",
        "properties": {
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique identifiers of children branches",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusDatapointDTO"
            },
            "description": "List of datapoints of the branch",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BranchInfoDTO"
            },
            "description": "Minimal information about children branches",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the branch",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the branch",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/BranchType"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional data for the branch",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Unique identifier of the network the branch belongs to",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "List of protocol argument values of the branch",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information of a branch"
      },
      "BranchInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the branch",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the branch",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/BranchType"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional data for the branch",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Unique identifier of the network the branch belongs to",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "List of protocol argument values of the branch",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Minimal Information of a branch"
      },
      "BranchType": {
        "enum": [
          "Device",
          "Folder",
          "Function",
          "GroupMain",
          "GroupMiddle",
          "GroupRange"
        ],
        "type": "string"
      },
      "BranchUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the branch",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the branch",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "List of protocol argument values of the branch",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a network organization branch for update"
      },
      "BuildingDTO": {
        "type": "object",
        "properties": {
          "surfaceGross": {
            "type": "string",
            "description": "Gross surface",
            "nullable": true
          },
          "surfaceNet": {
            "type": "string",
            "description": "Net surface",
            "nullable": true
          },
          "people": {
            "type": "string",
            "description": "Number of people",
            "nullable": true
          },
          "image": {
            "type": "string",
            "description": "Image of the build",
            "nullable": true
          },
          "gpsLat": {
            "type": "string",
            "description": "GPS Latitude",
            "nullable": true
          },
          "gpsLon": {
            "type": "string",
            "description": "GPS Longitude",
            "nullable": true
          },
          "property": {
            "type": "string",
            "description": "Resource path to query the properties of the building",
            "nullable": true
          },
          "structures": {
            "type": "string",
            "description": "Resource path to query the structures of the building",
            "nullable": true
          },
          "zoneChildren": {
            "type": "string",
            "description": "Resource path to query the children zone of the building",
            "nullable": true
          },
          "zoneParents": {
            "type": "string",
            "description": "Resource path to query the parent zones of the building",
            "nullable": true
          },
          "tenants": {
            "type": "string",
            "description": "Resource path to query the tenants of the building",
            "nullable": true
          },
          "owners": {
            "type": "string",
            "description": "Resource path to query the owners of the building",
            "nullable": true
          },
          "propertyManagers": {
            "type": "string",
            "description": "Resource path to query the property managers of the building",
            "nullable": true
          },
          "facilityManagers": {
            "type": "string",
            "description": "Resource path to query the facility managers of the building",
            "nullable": true
          },
          "visitors": {
            "type": "string",
            "description": "Resource path to query the visitors of the building",
            "nullable": true
          },
          "administrators": {
            "type": "string",
            "description": "Resource path to query the administrators of the building",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceDTO"
            },
            "description": "List of dataPoint instances inherited from datapoint template",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "List of properties inherited from property template",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceOfZoneDTO"
            },
            "description": "List of functional block instances attached to the zone",
            "nullable": true
          },
          "authorized": {
            "type": "boolean",
            "description": "If true access is granted to this zone."
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent zones attached to the zone",
            "nullable": true
          },
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of children zone instance definition attached to the created zone\r\n(information only)",
            "nullable": true
          },
          "hasMapView": {
            "type": "boolean",
            "description": "True if zone has a mapview attached to it"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Represents a building"
      },
      "BuildingWizardDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "applied": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BusDatapointDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the datapoint",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the datapoint",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the datapoint",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "typeId": {
            "type": "string",
            "description": "Unique identifier of the datapoint data type",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "List of protocol argument values of the datapoint",
            "nullable": true
          },
          "completeProtocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "List of the complete protocol argument values of the datapoint",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Unique identifier of the network the datapoint belongs to",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information of a field bus datapoint"
      },
      "BusDatapointIdentifierDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DatapointIdentifierDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DatapointIdentifierType"
          },
          "busDatapointId": {
            "type": "string",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BusDatapointUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the datapoint",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the datapoint",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "List of protocol argument values of the datapoint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a field bus datapoint for update"
      },
      "ByteDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          }
        },
        "additionalProperties": false
      },
      "Calendar365RoomDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the room.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Address of the room.",
            "nullable": true
          },
          "capacity": {
            "type": "integer",
            "description": "Room capacity (if available).",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Conference room from the Microsoft Graph API."
      },
      "CalendarEntryDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the event.",
            "nullable": true
          },
          "organizerName": {
            "type": "string",
            "description": "The name of the meeting organizer",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "Date and time of when the event starts.",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "Date and time of when the event ends.",
            "format": "date-time"
          },
          "attendeesCount": {
            "type": "integer",
            "description": "Number of attendees at the event.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Event of a calendar."
      },
      "CircuitDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "meter": {
            "$ref": "#/components/schemas/MeterInfoDTO"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "format": "int64"
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "circuitinputdto": "#/components/schemas/CircuitInputDTO",
            "circuitoutputdto": "#/components/schemas/CircuitOutputDTO"
          }
        }
      },
      "CircuitInputDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CircuitDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CircuitType"
          }
        },
        "additionalProperties": false
      },
      "CircuitOutputDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CircuitDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CircuitType"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistributionLineDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CircuitType": {
        "enum": [
          "CircuitInputDTO",
          "CircuitOutputDTO"
        ],
        "type": "string"
      },
      "CloudBackupDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of this backup",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "The time when the backup was created",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "description": "The device user that created the backup",
            "nullable": true
          },
          "isEncrypted": {
            "type": "boolean",
            "description": "Flag that tells whether the backup archive is encrypted"
          },
          "kind": {
            "$ref": "#/components/schemas/BackupKind"
          }
        },
        "additionalProperties": false,
        "description": "Represents a backup that exists in cloud for this device"
      },
      "CloudRegistrationStatus": {
        "enum": [
          "None",
          "Failed",
          "Done",
          "Ignored"
        ],
        "type": "string"
      },
      "CloudRestoreRequestDTO": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Subscription's connectionId used for backup notification",
            "nullable": true
          },
          "backupId": {
            "type": "string",
            "description": "The identifier of the backup to be restored on the device",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "An optional password to use for backup encryption",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to perform a cloud restore"
      },
      "CompanyEnrolmentDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the enrolment",
            "nullable": true
          },
          "companyRoleId": {
            "type": "string",
            "description": "The local company identifier",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "description": "The cloud company identifier",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The cloud company name",
            "nullable": true
          },
          "enrolmentStatus": {
            "$ref": "#/components/schemas/EnrolmentStatus"
          },
          "createdAt": {
            "type": "string",
            "description": "When the enrolment was initiated",
            "format": "date-time"
          },
          "authorizationCode": {
            "type": "string",
            "description": "The authorization code required for the cloud company administrator to perform the enrolment",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyEnrolmentRequestDTO": {
        "required": [
          "company"
        ],
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "description": "The identifier of the local company to associate"
          },
          "connectionId": {
            "maxLength": 50,
            "type": "string",
            "description": "A SignalR connection where the enrolment completion notification should be sent",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComplexDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompliantConverterRequestDeviceTemplateDTO": {
        "type": "object",
        "properties": {
          "wantExistingConverters": {
            "type": "boolean",
            "description": "If true the resource path will return the list of existing compliant converters"
          },
          "wantNewConverter": {
            "type": "boolean",
            "description": "If true the resource path will return a new converter"
          },
          "deviceTemplateId": {
            "type": "string",
            "description": "Id of the DeviceTemplateDatapoint",
            "nullable": true
          },
          "datapointTemplateId": {
            "type": "string",
            "description": "Id of the datapoint template of the functional block",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments of the bus datapoint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to get compliant converter for a device datapoint template"
      },
      "CompliantConverterRequestFromBusDatapointDTO": {
        "type": "object",
        "properties": {
          "wantExistingConverters": {
            "type": "boolean",
            "description": "If true the resource path will return the list of existing compliant converters"
          },
          "wantNewConverter": {
            "type": "boolean",
            "description": "If true the resource path will return a new converter"
          },
          "busDatapointId": {
            "type": "string",
            "description": "Id of the bus datapoint from the network organization",
            "nullable": true
          },
          "datapointInstanceId": {
            "type": "string",
            "description": "Id of the datapoint instance we want to assign",
            "nullable": true
          },
          "additionalArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Additional protocol argument.\r\nArguments that will be added to the bus datapoint protocol arguments before analysing the compliant converter.\r\nThese arguments will override bus datapoint protocol arguments if they already exist in the bus datapoint.\r\nIf null or empty then no additional protocol arguments will be added",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to get compliant converter for a datapoint instance assigned to a busdatapoint"
      },
      "CompliantConverterRequestManualDTO": {
        "type": "object",
        "properties": {
          "wantExistingConverters": {
            "type": "boolean",
            "description": "If true the resource path will return the list of existing compliant converters"
          },
          "wantNewConverter": {
            "type": "boolean",
            "description": "If true the resource path will return a new converter"
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments of the bus datapoint",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Id of network the bus datapoint belongs to",
            "nullable": true
          },
          "datapointInstanceId": {
            "type": "string",
            "description": "Id of the datapoint instance we want to assign",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to get compliant converter for a datapoint instance manually assigned to a bus datapoint"
      },
      "CompliantConvertersDTO": {
        "type": "object",
        "properties": {
          "needConverter": {
            "$ref": "#/components/schemas/ConverterComplianceType"
          },
          "existingConverters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceBoolDestDoubleConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceBoolDestEnumConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceDoubleDestBoolConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceDoubleDestEnumConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceEnumDestBoolConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceEnumDestDoubleConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceEnumDestEnumConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceEnumDestLongConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceLongDestBoolConverterDTO"
                },
                {
                  "$ref": "#/components/schemas/SourceLongDestEnumConverterDTO"
                }
              ]
            },
            "description": "A list of existing converter compliant with the request(if any)\r\nAlways empty if WantExistingConverters is false\r\nAlways empty if NeedConverter is true",
            "nullable": true
          },
          "newConverter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceBoolDestDoubleConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceBoolDestEnumConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceDoubleDestBoolConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceDoubleDestEnumConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceEnumDestBoolConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceEnumDestDoubleConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceEnumDestEnumConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceEnumDestLongConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceLongDestBoolConverterDTO"
              },
              {
                "$ref": "#/components/schemas/SourceLongDestEnumConverterDTO"
              }
            ],
            "description": "A newly converter initialized with default\r\nAlways empty if NeedConverter is true\r\nAlways empty if WantNewConverter is true",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigStateDto": {
        "required": [
          "completed",
          "step"
        ],
        "type": "object",
        "properties": {
          "step": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConverterComplianceType": {
        "enum": [
          "None",
          "Required",
          "Notpossible"
        ],
        "type": "string"
      },
      "ConverterDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "typeSource": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "typeDest": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sourcebooldestenumconverter": "#/components/schemas/SourceBoolDestEnumConverterDTO",
            "sourcebooldestlongconverter": "#/components/schemas/SourceDoubleDestBoolConverterDTO",
            "sourcedoubledestboolconverter": "#/components/schemas/SourceDoubleDestEnumConverterDTO",
            "sourceenumdestenumconverter": "#/components/schemas/SourceEnumDestEnumConverterDTO",
            "sourcelongdestboolconverter": "#/components/schemas/SourceLongDestBoolConverterDTO",
            "sourcelongdestenumconverter": "#/components/schemas/SourceLongDestEnumConverterDTO"
          }
        }
      },
      "ConverterInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "typeSource": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "typeDest": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConverterType": {
        "enum": [
          "Unknown",
          "SourceBoolDestDoubleConverter",
          "SourceBoolDestEnumConverter",
          "SourceBoolDestLongConverter",
          "SourceDoubleDestBoolConverter",
          "SourceDoubleDestEnumConverter",
          "SourceEnumDestBoolConverter",
          "SourceEnumDestDoubleConverter",
          "SourceEnumDestEnumConverter",
          "SourceEnumDestLongConverter",
          "SourceLongDestBoolConverter",
          "SourceLongDestEnumConverter"
        ],
        "type": "string"
      },
      "CountAndAlarmsStatisticsDTO": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Tag of the entities",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Number of instances",
            "format": "int64"
          },
          "activeAlarms": {
            "type": "integer",
            "description": "Number of active alarms",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Statistics of instances and alarms count"
      },
      "DatapointDirection": {
        "enum": [
          "Feedback",
          "Command",
          "CommandAndFeedback",
          "Configuration"
        ],
        "type": "string"
      },
      "DatapointIdentifierDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DatapointIdentifierType"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "busdatapoint": "#/components/schemas/BusDatapointIdentifierDTO",
            "datapointinstance": "#/components/schemas/DatapointInstanceIdentifierDTO",
            "protocolargumentsonly": "#/components/schemas/ProtocolArgumentsOnlyIdentifierDTO"
          }
        }
      },
      "DatapointIdentifierType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "DatapointIdentifierWithNameDTO": {
        "type": "object",
        "properties": {
          "identifier": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusDatapointIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/DatapointInstanceIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/ProtocolArgumentsOnlyIdentifierDTO"
              }
            ],
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointInstanceDTO": {
        "type": "object",
        "properties": {
          "stationId": {
            "type": "string",
            "description": "Unique identifier of the station managing the datapoint instance",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Unique identifier of the network managing the datapoint instance",
            "nullable": true
          },
          "busUnitId": {
            "type": "string",
            "description": "Bus unit id",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments",
            "nullable": true
          },
          "converterId": {
            "type": "string",
            "description": "Id of the converter",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of datapoint\r\nThis field is readonly and ignored during a put/post for a datapoint instance attached to a datapoint template",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "typeId": {
            "type": "string",
            "description": "Unique identifier DataType\r\nThis field is readonly and ignored during a put/post for a datapoint instance attached to a datapoint template",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the datapoint\r\nThis field is readonly and ignored during a put/post for a datapoint instance attached to a datapoint template",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the datapoint template (if any)",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Id of the functionalblock instance the datapoint belongs to.\r\nEmpty if datapoint does not belong to a functionalblock instance.\r\nReadonly (for information only).",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Id of the zone instance the datapoint belongs to.\r\nEmpty if datapoint does not belong to a zone instance.\r\nReadonly (for information only).",
            "nullable": true
          },
          "displayUnitId": {
            "type": "string",
            "description": "Identifier of the display unit",
            "nullable": true
          },
          "unitId": {
            "type": "string",
            "description": "Identifier of the unit of the template of the datapoint\r\nReadonly (for information only).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Datapoint instance definition"
      },
      "DatapointInstanceIdentifierDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DatapointIdentifierDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DatapointIdentifierType"
          },
          "datapointInstanceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointInstanceReadExtendedDTO": {
        "type": "object",
        "properties": {
          "datapointClientId": {
            "type": "string",
            "nullable": true
          },
          "identifier": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusDatapointIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/DatapointInstanceIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/ProtocolArgumentsOnlyIdentifierDTO"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointInstanceTreeDisplayDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of datapoint",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the datapoint",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the datapoint template (if any)",
            "nullable": true
          },
          "displayUnitId": {
            "type": "string",
            "description": "Identifier of the display unit",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Identifier of the network managing the datapoint instance",
            "nullable": true
          },
          "driverDescriptorId": {
            "type": "string",
            "description": "Identifier of the driver descriptor",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Datapoint instance definition for tree display"
      },
      "DatapointInstanceValueDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "quality": {
            "$ref": "#/components/schemas/DataQuality"
          },
          "innerError": {
            "type": "string",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DatapointInstanceWriteDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the datapoint",
            "nullable": true
          },
          "value": {
            "description": "Value of the datapoint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information for a write operation on a datapoint"
      },
      "DatapointInstanceWriteExtendedDTO": {
        "type": "object",
        "properties": {
          "datapointClientId": {
            "type": "string",
            "nullable": true
          },
          "identifier": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusDatapointIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/DatapointInstanceIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/ProtocolArgumentsOnlyIdentifierDTO"
              }
            ],
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointInstanceWriteResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "innerError": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSelectorDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointsInformationDTO": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BusDatapointIdentifierDTO"
                },
                {
                  "$ref": "#/components/schemas/DatapointInstanceIdentifierDTO"
                },
                {
                  "$ref": "#/components/schemas/ProtocolArgumentsOnlyIdentifierDTO"
                }
              ]
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSubscriptionCreateDTO": {
        "type": "object",
        "properties": {
          "ignoreErrors": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointSubscriptionCreateItemDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSubscriptionCreateItemDTO": {
        "type": "object",
        "properties": {
          "scanRate": {
            "type": "integer",
            "format": "int32"
          },
          "deadBand": {
            "type": "number",
            "format": "double"
          },
          "datapointClientId": {
            "type": "string",
            "nullable": true
          },
          "datapoint": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BusDatapointIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/DatapointInstanceIdentifierDTO"
              },
              {
                "$ref": "#/components/schemas/ProtocolArgumentsOnlyIdentifierDTO"
              }
            ],
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSubscriptionCreateItemResultDTO": {
        "type": "object",
        "properties": {
          "datapointClientId": {
            "type": "string",
            "description": "Id of datapoint subscription item",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Built display name for subscription item",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Built display address for subscription item",
            "nullable": true
          },
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Type of related subscription item datapoint",
            "nullable": true
          },
          "unit": {
            "$ref": "#/components/schemas/UnitDTO"
          },
          "parentName": {
            "type": "string",
            "description": "Parent name of related subscription item datapoint",
            "nullable": true
          },
          "parentIcon": {
            "type": "string",
            "description": "Parent icon of related subscription item datapoint",
            "nullable": true
          },
          "parentIconFillColor": {
            "type": "string",
            "description": "Parent icon fill color of related subscription item datapoint",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "ProtocolArguments of related subscription item datapoint",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Unique identifier of the network the datapoint belongs to",
            "nullable": true
          },
          "polledDatapoint": {
            "type": "boolean",
            "description": "Indicates if the datapoint is polled or not (read only)"
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          }
        },
        "additionalProperties": false,
        "description": "Data of created subscription item"
      },
      "DatapointSubscriptionCreateResultDTO": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointSubscriptionCreateItemResultDTO"
            },
            "description": "Collection of created subscription items",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result dto with all created subscription items"
      },
      "DatapointSubscriptionDTO": {
        "type": "object",
        "properties": {
          "keepAllChanges": {
            "type": "boolean"
          },
          "minSendTime": {
            "type": "integer",
            "format": "int32"
          },
          "maxSendTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointSubscriptionItemDTO"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSubscriptionExtendedDTO": {
        "type": "object",
        "properties": {
          "keepAllChanges": {
            "type": "boolean"
          },
          "minSendTime": {
            "type": "integer",
            "format": "int32"
          },
          "maxSendTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSubscriptionItemDTO": {
        "type": "object",
        "properties": {
          "datapointInstanceId": {
            "type": "string",
            "nullable": true
          },
          "scanRate": {
            "type": "integer",
            "format": "int32"
          },
          "deadBand": {
            "type": "number",
            "format": "double"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSubscriptionUpdateDTO": {
        "type": "object",
        "properties": {
          "ignoreErrors": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointSubscriptionUpdateItemDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointSubscriptionUpdateItemDTO": {
        "type": "object",
        "properties": {
          "datapointClientId": {
            "type": "string",
            "nullable": true
          },
          "scanRate": {
            "type": "integer",
            "format": "int32"
          },
          "deadBand": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DatapointTemplateDesc": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DatapointTemplateDTO": {
        "type": "object",
        "properties": {
          "busUnitId": {
            "type": "string",
            "description": "Bus unit id",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the datapoint template",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Localized description",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the datapoint template",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "typeId": {
            "type": "string",
            "description": "Data type value unique identifier",
            "nullable": true
          },
          "displayUnitId": {
            "type": "string",
            "description": "Identifier of the display unit",
            "nullable": true
          },
          "publicId": {
            "type": "string",
            "description": "Public Unique identifier for datapoint template (User for Import / Export)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of datapoint template"
      },
      "DataQuality": {
        "enum": [
          "none",
          "uncertain",
          "good",
          "bad",
          "mask",
          "notcommissioned",
          "badrequiredformat",
          "badpreparingrawstring",
          "badcatalog",
          "badninotopened",
          "badinternalerror",
          "badopcitemsubscription",
          "badopcgroupsubscription",
          "badopcdisconnected",
          "badcannotberead",
          "badninotfound",
          "badninone",
          "badnierroropen",
          "baddeviceabsent",
          "badConfigurationError",
          "badDeviceFailure",
          "badLastKnownValue",
          "badNotConnected",
          "badOutOfService",
          "badSensorFailure",
          "badWaitingForInitialData",
          "uncertainEUExceeded",
          "uncertainLastUsableValue",
          "uncertainSensorNotAccurate",
          "uncertainSubNormal",
          "badCommFailure",
          "badServerStopped",
          "badInactiveTrend",
          "badDbTransactionTimeout",
          "badDbWrite",
          "badAverage",
          "badunknownproperty",
          "badunknownobject",
          "badsubscriptionfailed",
          "badlicense",
          "badResetTrend",
          "badbitmask",
          "badstationnoaddress",
          "badnoaddress",
          "badmiddlewarecommunication",
          "BadBecauseConversion"
        ],
        "type": "string"
      },
      "DataTypeDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "transport": {
            "$ref": "#/components/schemas/TransportType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "long": "#/components/schemas/LongDataTypeDTO",
            "double": "#/components/schemas/DoubleDataTypeDTO",
            "bool": "#/components/schemas/BoolDataTypeDTO",
            "string": "#/components/schemas/StringDataTypeDTO",
            "enumeration": "#/components/schemas/EnumerationDataTypeDTO",
            "complex": "#/components/schemas/ComplexDataTypeDTO",
            "datetimeoffset": "#/components/schemas/DateTimeOffsetDataTypeDTO",
            "timespan": "#/components/schemas/TimeSpanDataTypeDTO",
            "ipaddress": "#/components/schemas/IPAddressDataTypeDTO",
            "ipendpoint": "#/components/schemas/IPEndPointDataTypeDTO",
            "array": "#/components/schemas/ArrayDataTypeDTO",
            "byte": "#/components/schemas/ByteDataTypeDTO"
          }
        }
      },
      "DataTypeRequestDTO": {
        "type": "object",
        "additionalProperties": false,
        "description": "Search pattern of all available datatype"
      },
      "DataTypeType": {
        "enum": [
          "Unknown",
          "Bool",
          "Numeric",
          "Long",
          "Double",
          "Enum",
          "Complex",
          "String",
          "DateTimeOffset",
          "TimeSpan",
          "IPAddress",
          "IPEndPoint",
          "Array",
          "Byte"
        ],
        "type": "string"
      },
      "DataVersionDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataVersionSubscriptionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataVersionSubscriptionResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateTimeOffsetDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          }
        },
        "additionalProperties": false
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "DebugActionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DebugWriteDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DebugImportMigrationDTO": {
        "type": "object",
        "properties": {
          "maxNumberOfTrendInstanceFBT": {
            "type": "integer",
            "format": "int32",
            "default": 500
          },
          "maxNumberOfTrendInstanceZT": {
            "type": "integer",
            "format": "int32",
            "default": 500
          },
          "maxNumberOfAlarmInstanceFBT": {
            "type": "integer",
            "format": "int32",
            "default": 500
          },
          "maxNumberOfAlarmInstanceZT": {
            "type": "integer",
            "format": "int32",
            "default": 500
          },
          "numberOfDPTperFBT": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "numberOfFBT": {
            "type": "integer",
            "format": "int32",
            "default": 5
          },
          "numberOfDPTperZT": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "numberOfZT": {
            "type": "integer",
            "format": "int32",
            "default": 5
          },
          "numberOfZIPerZT": {
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          "numberOfFBIperZI": {
            "type": "integer",
            "format": "int32",
            "default": 3
          },
          "generateTrends": {
            "type": "boolean",
            "default": true
          },
          "generateAlarms": {
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "DebugScheduleDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "nextActionDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextEntryToExecute": {
            "$ref": "#/components/schemas/DebugTimeEntryDTO"
          },
          "timeZoneInfo": {
            "type": "string",
            "nullable": true
          },
          "stopped": {
            "type": "boolean"
          },
          "changedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DebugActionDTO"
            },
            "nullable": true
          },
          "writes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DebugTimeEntryDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DebugTimeEntryDTO": {
        "type": "object",
        "properties": {
          "dateEntryId": {
            "type": "string",
            "nullable": true
          },
          "dateEntryInfo": {
            "type": "string",
            "nullable": true
          },
          "timeEntryId": {
            "type": "string",
            "nullable": true
          },
          "actionId": {
            "type": "string",
            "nullable": true
          },
          "actionName": {
            "type": "string",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "DebugWriteDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "protocolArguments": {
            "type": "string",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DensityHeatmapEntryDTO": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "description": "Day represented by this entry.",
            "format": "date-time"
          },
          "averageNumberOfPeoplePerHour": {
            "type": "number",
            "description": "Average number of people per hour occupying the room.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents the occupation density of a room for a specific day."
      },
      "DeviceDTO": {
        "type": "object",
        "properties": {
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceDTO"
            },
            "description": "Functional blocks of the device",
            "nullable": true
          },
          "physicalPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalPointDTO"
            },
            "description": "Physical points of the device",
            "nullable": true
          },
          "deviceTemplateId": {
            "type": "string",
            "description": "Id of the device template",
            "nullable": true
          },
          "protocolArguments": {
            "type": "string",
            "description": "Protocol arguments",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the device",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the device template",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a Device"
      },
      "DeviceIdType": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "Device id as hex number",
            "nullable": true,
            "example": "12AF3B"
          },
          "checkDigit": {
            "type": "string",
            "description": "Check digit to check integrity of device id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Struct for device id + check digit"
      },
      "DeviceInfoDTO": {
        "type": "object",
        "properties": {
          "deviceTemplateId": {
            "type": "string",
            "description": "Id of the device template",
            "nullable": true
          },
          "protocolArguments": {
            "type": "string",
            "description": "Protocol arguments",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the device",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the device template",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a simplified device DTO"
      },
      "DeviceInstanceDTO": {
        "type": "object",
        "properties": {
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "Properties",
            "nullable": true
          },
          "functionalBlockInstances": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the functional block instances that belong to this device instance",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Identifier of the device instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated tags.",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Id of the network of the device instance",
            "nullable": true
          },
          "deviceTemplateId": {
            "type": "string",
            "description": "Device template id",
            "nullable": true
          },
          "physicalDeviceId": {
            "type": "string",
            "description": "Physical device attached to this device instance.\r\nReadonly information",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Device instance"
      },
      "DeviceInstanceInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the device instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated tags.",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Id of the network of the device instance",
            "nullable": true
          },
          "deviceTemplateId": {
            "type": "string",
            "description": "Device template id",
            "nullable": true
          },
          "physicalDeviceId": {
            "type": "string",
            "description": "Physical device attached to this device instance.\r\nReadonly information",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a device instance"
      },
      "DeviceTemplateDatapointDTO": {
        "type": "object",
        "properties": {
          "datapointTemplateId": {
            "type": "string",
            "description": "Associated datapoint.",
            "nullable": true
          },
          "busUnit": {
            "type": "string",
            "description": "Identifier of the bus unit.",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol argument for the datapoint level.",
            "nullable": true
          },
          "converterId": {
            "type": "string",
            "description": "Converter to use for the datapoint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Parameters for a datapoint associated with a device template."
      },
      "DeviceTemplateDTO": {
        "type": "object",
        "properties": {
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments for the device level.",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceTemplateFunctionalBlockDTO"
            },
            "description": "Functional blocks in device.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointTemplateDTO"
            },
            "description": "List of properties templates attached to the device.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Identifier of the device template.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated tags.",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer.",
            "nullable": true
          },
          "productReference": {
            "type": "string",
            "description": "Product reference.",
            "nullable": true
          },
          "driverDescriptorId": {
            "type": "string",
            "description": "Identifier of the driver.",
            "nullable": true
          },
          "instancesCount": {
            "type": "integer",
            "description": "Number of device instances using this template.\r\nInformation only. Readonly.",
            "format": "int64"
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware version",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a device template."
      },
      "DeviceTemplateFunctionalBlockDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Id of the associated functional block template.",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceTemplateDatapointDTO"
            },
            "description": "Parameters for the datapoints included in the functional block.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeviceTemplateImportResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "added": {
            "type": "boolean"
          },
          "uptodate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DeviceTemplateInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the device template.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated tags.",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer.",
            "nullable": true
          },
          "productReference": {
            "type": "string",
            "description": "Product reference.",
            "nullable": true
          },
          "driverDescriptorId": {
            "type": "string",
            "description": "Identifier of the driver.",
            "nullable": true
          },
          "instancesCount": {
            "type": "integer",
            "description": "Number of device instances using this template.\r\nInformation only. Readonly.",
            "format": "int64"
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware version",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a device template."
      },
      "DiagnosticsDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Services status field",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "System diagnostics"
      },
      "DisplayType": {
        "enum": [
          "Curve",
          "DigitalStep",
          "Point",
          "Line",
          "Bar"
        ],
        "type": "string"
      },
      "DistributionDTO": {
        "type": "object",
        "properties": {
          "inputCircuits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CircuitInputDTO"
            },
            "nullable": true
          },
          "outputCircuits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CircuitOutputDTO"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "energyId": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "nullable": true
          },
          "zoneIcon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DistributionLineDTO": {
        "type": "object",
        "properties": {
          "inputDistribution": {
            "$ref": "#/components/schemas/DistributionDTO"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "inputCircuitId": {
            "type": "string",
            "nullable": true
          },
          "outputCircuitId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DistributionLineInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "inputCircuitId": {
            "type": "string",
            "nullable": true
          },
          "outputCircuitId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DistributionLineSetDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "inputCircuitId": {
            "type": "string",
            "nullable": true
          },
          "inputDistributionId": {
            "type": "string",
            "nullable": true
          },
          "inputCircuitIndex": {
            "type": "integer",
            "format": "int64"
          },
          "outputCircuitId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DistributionSetDTO": {
        "type": "object",
        "properties": {
          "inputCircuits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CircuitInputDTO"
            },
            "nullable": true
          },
          "outputCircuits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CircuitOutputDTO"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "energyId": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "nullable": true
          },
          "zoneIcon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DoubleDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          },
          "unitId": {
            "type": "string",
            "nullable": true
          },
          "min": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "max": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DoubleToBoolDTO": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "max": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minIncluded": {
            "type": "boolean"
          },
          "maxIncluded": {
            "type": "boolean"
          },
          "value": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DoubleToEnumDTO": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "max": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minIncluded": {
            "type": "boolean"
          },
          "maxIncluded": {
            "type": "boolean"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "DownSamplingFunction": {
        "enum": [
          "TimeWeightedAverage",
          "Mean",
          "Median",
          "Minimum",
          "Maximum",
          "Spread",
          "StandardDeviation",
          "Sum",
          "Top",
          "Bottom",
          "Occupancy",
          "Density"
        ],
        "type": "string"
      },
      "DownSamplingOptionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the downsampling option",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the downsampling option",
            "nullable": true
          },
          "alignTime": {
            "type": "string",
            "description": "Time period where trend values set used for downsampling operation is starting",
            "format": "date-span"
          },
          "groupedBy": {
            "type": "string",
            "description": "Time period of trend values used for each operation",
            "format": "date-span"
          },
          "functions": {
            "$ref": "#/components/schemas/DownSamplingFunction"
          },
          "duration": {
            "type": "string",
            "description": "Length of time trends are stored",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "DriverDescriptorCreationDTO": {
        "type": "object",
        "properties": {
          "jsonContent": {
            "type": "string",
            "description": "Content in JSON format",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a driver for creation"
      },
      "DriverDescriptorDTO": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyDefinitionDTO"
            },
            "description": "Properties of the driver",
            "nullable": true
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverMethodDefinitionDTO"
            },
            "description": "Methods of the driver",
            "nullable": true
          },
          "protocolArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolArgumentDTO"
            },
            "description": "List of protocol arguments of the driver",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique database identifier of the driver",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier of the driver",
            "nullable": true
          },
          "groupByPort": {
            "type": "string",
            "description": "If not null, all the networks based on driver descriptors with the same GroupByPort value\r\nmust be created on the same port.",
            "nullable": true
          },
          "company": {
            "type": "string",
            "description": "Name of the company responsible for the driver development",
            "nullable": true
          },
          "multiInstance": {
            "type": "boolean",
            "description": "Indicates if the driver can be instantiate several times on a station"
          },
          "multiInstanceOnIP": {
            "type": "boolean",
            "description": "Indicates if the driver can be instantiate several times on the same IP port on a station"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version",
            "nullable": true
          },
          "portType": {
            "$ref": "#/components/schemas/PortType"
          },
          "transport": {
            "$ref": "#/components/schemas/TransportType"
          },
          "driverType": {
            "$ref": "#/components/schemas/DriverType"
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about a driver available on a station"
      },
      "DriverDescriptorInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the driver",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier of the driver",
            "nullable": true
          },
          "groupByPort": {
            "type": "string",
            "description": "If not null, all the networks based on driver descriptors with the same GroupByPort value\r\nmust be created on the same port.",
            "nullable": true
          },
          "company": {
            "type": "string",
            "description": "Name of the company responsible for the driver development",
            "nullable": true
          },
          "multiInstance": {
            "type": "boolean",
            "description": "Indicates if the driver can be instantiate several times on a station"
          },
          "multiInstanceOnIP": {
            "type": "boolean",
            "description": "Indicates if the driver can be instantiate several times on the same IP port on a station"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version",
            "nullable": true
          },
          "portType": {
            "$ref": "#/components/schemas/PortType"
          },
          "transport": {
            "$ref": "#/components/schemas/TransportType"
          },
          "driverType": {
            "$ref": "#/components/schemas/DriverType"
          }
        },
        "additionalProperties": false,
        "description": "Information about a driver available on a station"
      },
      "DriverDescriptorUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the driver descriptor",
            "nullable": true
          },
          "jsonContent": {
            "type": "string",
            "description": "Content in JSON format",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a driver for update"
      },
      "DriverMethodDefinitionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the method",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier of the method",
            "nullable": true
          },
          "asynchronous": {
            "type": "boolean",
            "description": "Indicated if method call is a asynchronous or synchronous"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyDefinitionDTO"
            },
            "description": "Parameters for method call",
            "nullable": true
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyDefinitionDTO"
            },
            "description": "Result of method call",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a method of a driver of a station"
      },
      "DriverPropertyDefinitionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the property",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier of the property",
            "nullable": true
          },
          "isPublic": {
            "type": "boolean",
            "description": "Indicates if the property is public or private.\r\nIf it is public, the read value for the property will always be null."
          },
          "isReadOnly": {
            "type": "boolean",
            "description": "Indicates if the property is read only."
          },
          "isStatic": {
            "type": "boolean",
            "description": "Indicates if the property is static.\r\nIf it is static, all the driver property values linked to it will always have the same value."
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "defaultValue": {
            "description": "Default value",
            "nullable": true
          },
          "typeId": {
            "type": "string",
            "description": "Unique identifier of the data type of the property",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a property of a driver of a station"
      },
      "DriverPropertyValueDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DriverType": {
        "enum": [
          "Dll"
        ],
        "type": "string"
      },
      "DummyDatabaseGeneratorAlarmDTO": {
        "type": "object",
        "properties": {
          "alarmsOnRooms": {
            "type": "boolean",
            "description": "Create alarms on rooms",
            "default": false
          },
          "alarmsOnFbs": {
            "type": "boolean",
            "description": "Create alarms on fbs",
            "default": false
          },
          "maxAlarmsCount": {
            "type": "integer",
            "description": "Maximum number of datapoins in alarms. If not present all datapoints will have an alarms",
            "format": "int64",
            "default": 0,
            "nullable": true
          },
          "highAlarmThreshold": {
            "type": "number",
            "description": "High alarm threshold. If not present threshold will be 50.",
            "format": "double",
            "default": 50,
            "nullable": true
          },
          "highAlarmMustBeAcked": {
            "type": "boolean",
            "description": "Alarm must be acked or not",
            "default": false
          },
          "highAlarmDeadband": {
            "type": "number",
            "description": "High alarm deadband.",
            "format": "double",
            "default": 0
          },
          "highAlarmHyst": {
            "type": "number",
            "description": "High alarm hysteresis.",
            "format": "double",
            "default": 0
          },
          "highAlarmFrequency": {
            "type": "integer",
            "description": "High alarm frequency.\r\nIf not present default value is 1000 ms",
            "format": "int64",
            "default": 1000,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DummyDatabaseGeneratorDTO": {
        "type": "object",
        "properties": {
          "numberOfFunctionalBlockTemplates": {
            "type": "integer",
            "description": "Number of functional block templates to create<br /> \r\nName of each functional block template will be FBT#x with x from 1 to n<br /> \r\nEach functional block template has a tag bos:function:fb#x with x from 1 to n",
            "format": "int64"
          },
          "numberOfPropertiesPerFBT": {
            "type": "integer",
            "description": "Number of properties in each functional block template<br /> \r\nName of each property will be Property#x with x from 1 to n<br /> \r\nEach property has a tag bos:function:property#x with x from 1 to n",
            "format": "int64"
          },
          "numberOfDatapointsPerFB": {
            "type": "integer",
            "description": "Number of datapoints in each functional block template<br /> \r\nName of each datapoint will be Datapoint#x with x from 1 to n<br /> \r\nEach datapoint has a tag bos:function:datapoint#x with x from 1 to n",
            "format": "int64"
          },
          "numberOfFunctionalBlockInstancesPerTemplate": {
            "type": "integer",
            "description": "Number of functional block instance for each functional block template<br /> \r\nName of each functional block instance will be FBT#x_FBI#y with FBT#x being name of template and y from 1 to n<br /> \r\nEach functional block instance has a tag bos:function:fb#x with x from 1 to n",
            "format": "int64"
          },
          "numberOfTypesOfRoom": {
            "type": "integer",
            "description": "Number of type of room (zone template)<br /> \r\nEach room zone template will be named TRoom#x with x from 1 to n<br /> \r\nEach room template will have the tag bos:space:room:office\r\nEach room template will have the tag myroom#x with x based on the number of its template",
            "format": "int64"
          },
          "numberOfPropertiesPerRoom": {
            "type": "integer",
            "description": "Number of properties in each room zone template (note that building and floor has NO properties)<br /> \r\nName of each property will be Property#x with x from 1 to n<br /> \r\nEach property has a tag bos:function:property#x with x from 1 to n",
            "format": "int64"
          },
          "numberOfDatapointsPerRoom": {
            "type": "integer",
            "description": "Number of datapoints in each room zone template (note that building and floor has NO datapoints)<br /> \r\nName of each datapoint will be Datapoint#x with x from 1 to n<br /> \r\nEach datapoint has a tag bos:function:datapoint#x with x from 1 to n",
            "format": "int64"
          },
          "numberOfRoomsPerTypeAndPerFloor": {
            "type": "integer",
            "description": "Number of room (zone instance) per floor and per room type<br /> \r\nEach room zone instance will be named TRoom#x_Room#y with TRoom#x name of template and x from 1 to n<br /> \r\nEach room zone instance will have the tag bos:space:room:office",
            "format": "int64"
          },
          "numberOfFunctionalBlockInstancePerRoom": {
            "type": "integer",
            "description": "Number of functional block instance that are put inside each room\r\nIf there is not enough functional block instance (compare to number of rooms) then some functional block instance will belong to several room",
            "format": "int64"
          },
          "useMemoryDPOnRooms": {
            "type": "boolean",
            "description": "If true datapoints of room will have a random memory datapoint address with a scene that cause the datapoint to change continously",
            "default": true
          },
          "useMemoryDPOnFbs": {
            "type": "boolean",
            "description": "If true datapoints of functional blocks will have a random memory datapoint address",
            "default": true
          },
          "memoryDPFormat": {
            "type": "string",
            "description": "Format of the memory datapoint scene. <br /> If empty the scene will be : /scene=ana:x:y:z to  build a DP with continuous changing value<br /> \r\nFormat is : /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "/scene=ana:20000:0:100",
            "nullable": true
          },
          "alarms": {
            "$ref": "#/components/schemas/DummyDatabaseGeneratorAlarmDTO"
          },
          "synchronousGeneration": {
            "type": "boolean",
            "description": "If true generation of database will be synchronous (rest call will be blocked during execution)",
            "default": false
          },
          "numberOfBuildings": {
            "type": "integer",
            "description": "Number of buildings (zone instance)<br /> \r\nZone template of all buildings will be named TBuilding<br /> \r\nZone template of the building has a tag bos:building<br /> \r\nEach building zone instance will be named Building#x with x from 1 to n<br /> \r\nZone intance of the building has a tag bos:building",
            "format": "int64"
          },
          "numberOfFloorsPerBuilding": {
            "type": "integer",
            "description": "Number of floors per building<br /> \r\nZone template of all floors will be named TFloor<br /> \r\nZone template of the floor has a tag bos:structure:floor<br /> \r\nEach floor zone instance will be named Floor#x with x from 1 to n<br /> \r\nZone intance of the floor has a tag bos:structure:floor",
            "format": "int64"
          },
          "generateMapviewForEachFloor": {
            "type": "boolean",
            "description": "Indicates if we generate a mapview for each floor",
            "default": false
          },
          "mapviewFunctionalBlockWidthAndHeight": {
            "type": "number",
            "description": "Width and height of each functional block on mapview (between 0 and 1)",
            "format": "double"
          },
          "mapviewFunctionalBlockSpace": {
            "type": "number",
            "description": "X and Y space between functional blocks on mapview (between 0 and 1)",
            "format": "double"
          },
          "mapviewZoneWidthAndHeight": {
            "type": "number",
            "description": "Width and height of each zone polygon on mapview between 0 and 1",
            "format": "double"
          },
          "mapviewZoneSpace": {
            "type": "number",
            "description": "X and Y space between zones on mapview (between 0 and 1)",
            "format": "double"
          },
          "createUserAccessingAll": {
            "type": "boolean",
            "description": "Create the user that can access all.<br /> \r\nName of user is : UserALL<br /> \r\nPaswword of user is : UserALL(1)",
            "default": false
          },
          "createUserAccessingFloor": {
            "type": "boolean",
            "description": "Create the user that can access a floor and all its rooms<br /> \r\nName of user is : User_NameOfFloor with NameOfFloor name of the floor<br /> \r\nPaswword of user is : Pass_NameOfFloor(1) with NameOfFloor name of the floor",
            "default": false
          },
          "createUserAccessingRoom": {
            "type": "boolean",
            "description": "Create the user that can access only one room<br /> \r\nName of user is : User_NameOfRoom with NameOfRoom name of the room<br /> \r\nPaswword of user is : Pass_NameOfRoom(1) with NameOfRoom name of the room",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Settings to generate the dummy project"
      },
      "ElementDatapointWriteDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseActionElementDTO"
          }
        ],
        "properties": {
          "priority": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ActionElementType"
          }
        },
        "additionalProperties": false
      },
      "ElementType": {
        "enum": [
          "None",
          "FunctionalBlock",
          "Zone",
          "Image",
          "Text"
        ],
        "type": "string"
      },
      "EmbeddedErrorDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnergyDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "iconSvg": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "useDistribution": {
            "type": "boolean"
          },
          "allowSubMeters": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EnergyStructureTypeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "canBeRoot": {
            "type": "boolean"
          },
          "defaultInputCircuitName": {
            "type": "string",
            "nullable": true
          },
          "defaultInputCircuitSection": {
            "type": "string",
            "nullable": true
          },
          "defaultOutputCircuitName": {
            "type": "string",
            "nullable": true
          },
          "defaultOutputCircuitSection": {
            "type": "string",
            "nullable": true
          },
          "hasSection": {
            "type": "boolean"
          },
          "iconSvg": {
            "type": "string",
            "nullable": true
          },
          "iconColor": {
            "type": "string",
            "nullable": true
          },
          "iconBackColor": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "uniqueNameInProject": {
            "type": "string",
            "nullable": true
          },
          "supportedChildrenTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnrolmentStatus": {
        "enum": [
          "Active",
          "Pending",
          "Expired"
        ],
        "type": "string"
      },
      "EnumerationDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnumStringAnimationDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StringAnimationDTO"
          }
        ],
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumStringAnimationElementDTO"
            },
            "description": "Definition of string result for each value of the enumeration.",
            "nullable": true
          },
          "animationType": {
            "$ref": "#/components/schemas/AnimationType"
          }
        },
        "additionalProperties": false,
        "description": "Datapoint animation of an enumeration typed datapoint."
      },
      "EnumStringAnimationElementDTO": {
        "type": "object",
        "properties": {
          "selectors": {
            "type": "array",
            "items": { },
            "description": "Set of enumeration values.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Associated string value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a string value for a set of enumeration values."
      },
      "ErrorBaseDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorDTO": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorBaseDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExceptionType": {
        "enum": [
          "SingleDate",
          "RangeDate",
          "WeekOfMonth"
        ],
        "type": "string"
      },
      "ExportDTO": {
        "type": "object",
        "properties": {
          "functionalBlockTemplateIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "zoneTemplateIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "deviceTemplateIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FBTypeOfSelection": {
        "enum": [
          "All",
          "Master",
          "AnySlave",
          "Slaves",
          "Any",
          "OnlyIfInZone",
          "OnlyOutOfZone"
        ],
        "type": "string"
      },
      "FieldDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FirmwareDTO": {
        "type": "object",
        "properties": {
          "wantedVersion": {
            "type": "string",
            "description": "The version that should be installed\r\nThis needs to be a version that was first received with a GET",
            "nullable": true
          },
          "when": {
            "type": "string",
            "description": "Date and time when the installation should happen\r\nIf the date is in the past or null the installation will happen\r\nimmediatly after the download of the bundle",
            "format": "date-time",
            "nullable": true
          },
          "automaticReboot": {
            "type": "boolean",
            "description": "If true the system reboots immediatly after a successful installation\r\nThe default is false"
          }
        },
        "additionalProperties": false,
        "description": "Used to schedule the installation of a new update"
      },
      "FirmwareUpdateStatus": {
        "enum": [
          "NoUpdateScheduled",
          "DownloadFailed_WaitingForRetry",
          "DownloadIsRunning",
          "WaitingForInstallationTime",
          "UpdateIsRunning",
          "InstallationFailed",
          "InstallationDone",
          "SystemReboots"
        ],
        "type": "string"
      },
      "FloatStringAnimationDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StringAnimationDTO"
          }
        ],
        "properties": {
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringAnimationRangeDTO"
            },
            "description": "Ranges with associated string values.",
            "nullable": true
          },
          "animationType": {
            "$ref": "#/components/schemas/AnimationType"
          }
        },
        "additionalProperties": false,
        "description": "Definition of a datapoint animation for a numeric datapoint."
      },
      "FloorMinimalWizardDTO": {
        "type": "object",
        "properties": {
          "jsonType": {
            "type": "string",
            "description": "Json type",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of floor",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of floor",
            "nullable": true
          },
          "buildingId": {
            "type": "string",
            "description": "Identifier of of floor's building, can be null empty",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Identifier of of floor's network, can be null empty",
            "nullable": true
          },
          "levelToGround": {
            "type": "integer",
            "description": "Value of floor's level ( max and min depend of type of floor in tags)",
            "format": "int64"
          },
          "doNotImport": {
            "type": "boolean",
            "description": "True to ignore to import this floor"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Contains type of floor",
            "nullable": true
          },
          "applied": {
            "type": "boolean",
            "description": "True when floor has been deployed to bos database"
          },
          "appliedMapViewZones": {
            "type": "boolean",
            "description": "True when floor's zones have been deployed to bos database"
          },
          "appliedMapViewFB": {
            "type": "boolean",
            "description": "True when floor's assets have been deployed to bos database"
          },
          "alreadyImported": {
            "type": "boolean",
            "description": "Already imported in BOS database"
          }
        },
        "additionalProperties": false,
        "description": "Discribes a floor for import project wizard"
      },
      "FloorStep": {
        "enum": [
          "buildingAndStructure",
          "levelToGround",
          "network"
        ],
        "type": "string"
      },
      "FloorWizardStepDTO": {
        "type": "object",
        "properties": {
          "step": {
            "$ref": "#/components/schemas/FloorStep"
          },
          "floors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FloorMinimalWizardDTO"
            },
            "description": "List of floor to post",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains the floor to coonfigure and the step of configuration"
      },
      "FontStyle": {
        "enum": [
          "Regular",
          "Bold",
          "Italic",
          "Underline",
          "Strikeout"
        ],
        "type": "string"
      },
      "FunctionalBlockAnimationDTO": {
        "type": "object",
        "properties": {
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Functional block template id of the animated functional block instance.",
            "nullable": true
          },
          "textAnimation": {
            "$ref": "#/components/schemas/TextAnimationDTO"
          },
          "iconAnimation": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FloatStringAnimationDTO"
              },
              {
                "$ref": "#/components/schemas/EnumStringAnimationDTO"
              },
              {
                "$ref": "#/components/schemas/BooleanStringAnimationDTO"
              }
            ],
            "description": "Icon animation (if exists).",
            "nullable": true
          },
          "selectionMode": {
            "$ref": "#/components/schemas/FBTypeOfSelection"
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the map animation (read only)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the animation.",
            "nullable": true
          },
          "showAlarms": {
            "type": "boolean",
            "description": "Are alarms displayed ?."
          },
          "active": {
            "type": "boolean",
            "description": "Is the animation active."
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Animation of a functional block on a mapview."
      },
      "FunctionalBlockAnimationRuntimeDTO": {
        "type": "object",
        "properties": {
          "animationId": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockInstanceId": {
            "type": "string",
            "nullable": true
          },
          "iconDatapointId": {
            "type": "string",
            "nullable": true
          },
          "textDatapointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunctionalBlockInstanceControlPanelDTO": {
        "type": "object",
        "properties": {
          "functionalBlockInstanceId": {
            "type": "string",
            "description": "Unique identifier of the functional block instance",
            "nullable": true
          },
          "functionalBlockInstanceName": {
            "type": "string",
            "description": "Name of the functional block instance",
            "nullable": true
          },
          "functionalBlockInstanceIcon": {
            "type": "string",
            "description": "URI link to the functional block instance icon",
            "nullable": true
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Unique identifier of the functional block template",
            "nullable": true
          },
          "functionalBlockTemplateName": {
            "type": "string",
            "description": "Name of the functional block template",
            "nullable": true
          },
          "masterMode": {
            "$ref": "#/components/schemas/MasterMode"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags of the functional block instance",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedDatapointInstanceDTO"
            },
            "description": "List of datapoint instances to display in the control panel",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedPropertyInstanceDTO"
            },
            "description": "List of property instances to display in the control panel",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about the control panel of a functional block instance"
      },
      "FunctionalBlockInstanceDTO": {
        "type": "object",
        "properties": {
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceDTO"
            },
            "description": "List of DatapointInstances that are inherited from a template",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "List of properties that are inherited from a template",
            "nullable": true
          },
          "masterMode": {
            "$ref": "#/components/schemas/MasterMode"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the functional block",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the functional block\r\nThis field is readonly and ignored during a put/post for a functionalblock instance attached to a functionalblock template",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image of the functional block\r\nThis field is readonly and ignored during a put/post for a functionalblock instance attached to a functionalblock template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the functional block template",
            "nullable": true
          },
          "specializationType": {
            "type": "string",
            "description": "Specialization type (metering)",
            "nullable": true
          },
          "specializationId": {
            "type": "string",
            "description": "Unique identifier of the specialization",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the object",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "description": "Id of device instance the functional block instance belongs to.\r\nNull if none",
            "nullable": true
          },
          "deviceFunctionalBlockTemplateId": {
            "type": "string",
            "description": "Functional block of the device template this instance is attached to.\r\nNull if none",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean",
            "description": "Assignation of datapoints fully done or not.\r\nAlways true for a functional block instance attached to a device instance.\r\nIf null on update then the value will not be updated on fb",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneOfFunctionalBlockDTO"
            },
            "description": "List of zones to which belongs the functional block directly (InZone) or indirectly\r\nThis list is readonly. For information only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information of a functional block instance"
      },
      "FunctionalBlockInstanceInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the functional block",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the functional block\r\nThis field is readonly and ignored during a put/post for a functionalblock instance attached to a functionalblock template",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image of the functional block\r\nThis field is readonly and ignored during a put/post for a functionalblock instance attached to a functionalblock template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the functional block template",
            "nullable": true
          },
          "specializationType": {
            "type": "string",
            "description": "Specialization type (metering)",
            "nullable": true
          },
          "specializationId": {
            "type": "string",
            "description": "Unique identifier of the specialization",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the object",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "description": "Id of device instance the functional block instance belongs to.\r\nNull if none",
            "nullable": true
          },
          "deviceFunctionalBlockTemplateId": {
            "type": "string",
            "description": "Functional block of the device template this instance is attached to.\r\nNull if none",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean",
            "description": "Assignation of datapoints fully done or not.\r\nAlways true for a functional block instance attached to a device instance.\r\nIf null on update then the value will not be updated on fb",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneOfFunctionalBlockDTO"
            },
            "description": "List of zones to which belongs the functional block directly (InZone) or indirectly\r\nThis list is readonly. For information only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Basic information of the functional block instance"
      },
      "FunctionalBlockInstanceOfZoneDTO": {
        "type": "object",
        "properties": {
          "functionalBlockId": {
            "type": "string",
            "description": "Unique identifier of the functional block",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "Group the functionalblock belongs to in the zone",
            "nullable": true
          },
          "masterMode": {
            "$ref": "#/components/schemas/MasterMode"
          },
          "inZone": {
            "type": "boolean",
            "description": "Weither the functionalblock belongs to this zone or a child zone"
          }
        },
        "additionalProperties": false,
        "description": "Definition of a functional block attached to a zone"
      },
      "FunctionalBlockInstanceTreeDisplayDTO": {
        "type": "object",
        "properties": {
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceTreeDisplayDTO"
            },
            "description": "List of dataPoint instances attached to the functional block instance",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the functional block",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the functional block\r\nThis field is readonly and ignored during a put/post for a functionalblock instance attached to a functionalblock template",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image of the functional block\r\nThis field is readonly and ignored during a put/post for a functionalblock instance attached to a functionalblock template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the functional block template",
            "nullable": true
          },
          "specializationType": {
            "type": "string",
            "description": "Specialization type (metering)",
            "nullable": true
          },
          "specializationId": {
            "type": "string",
            "description": "Unique identifier of the specialization",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the object",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "description": "Id of device instance the functional block instance belongs to.\r\nNull if none",
            "nullable": true
          },
          "deviceFunctionalBlockTemplateId": {
            "type": "string",
            "description": "Functional block of the device template this instance is attached to.\r\nNull if none",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean",
            "description": "Assignation of datapoints fully done or not.\r\nAlways true for a functional block instance attached to a device instance.\r\nIf null on update then the value will not be updated on fb",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneOfFunctionalBlockDTO"
            },
            "description": "List of zones to which belongs the functional block directly (InZone) or indirectly\r\nThis list is readonly. For information only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Functional block instance definition for tree display"
      },
      "FunctionalBlockLiveAlarmSubscriptionDTO": {
        "type": "object",
        "properties": {
          "functionalBlockId": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunctionalBlockTemplateControlPanelDTO": {
        "type": "object",
        "properties": {
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the control panel (read only)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the configuration of the control panel, may be null or empty",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the configuration of the control panel is active or not"
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Unique identifier of the functional block template",
            "nullable": true
          },
          "selectionMode": {
            "$ref": "#/components/schemas/FBTypeOfSelection"
          },
          "supportMasterSlave": {
            "type": "boolean",
            "description": "Indicates if the functional block template supports the master/slave mode"
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedDatapointTemplateDTO"
            },
            "description": "List of datapoint templates to display in the control panel",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedPropertyTemplateDTO"
            },
            "description": "List of property templates to display in the control panel",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of the configuration of the control panel of a functional block template"
      },
      "FunctionalBlockTemplateDTO": {
        "type": "object",
        "properties": {
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointTemplateDTO"
            },
            "description": "List of datapoint templates attached to the functional block",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointTemplateDTO"
            },
            "description": "List of properties templates attached to the functional block",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "FunctionalBlockTemplate usages (information only)",
            "nullable": true
          },
          "supportMasterSlave": {
            "type": "boolean",
            "description": "This function supports or not master/slave mode"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the functional block",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "URI link to the functional block template icon",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the functional block template",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the object",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "FunctionalBlockTemplate parent of this FunctionalBlockTemplate.\r\nNull if root. Not null for a FunctionalBlockTemplate usage.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Functional block template version.\r\nInformation only. Readonly.",
            "nullable": true
          },
          "instancesCount": {
            "type": "integer",
            "description": "Number of functional block instances using this template.\r\nInformation only. Readonly.",
            "format": "int64"
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the functional block",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Detailed information of a functional block template"
      },
      "FunctionalBlockTemplateDuplicateDTO": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "description": "Base64 string of the new icon",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "New name of duplicate item",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunctionalBlockTemplateImportResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "added": {
            "type": "boolean"
          },
          "uptodate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FunctionalBlockTemplateInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the functional block",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "URI link to the functional block template icon",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the functional block template",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the object",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "FunctionalBlockTemplate parent of this FunctionalBlockTemplate.\r\nNull if root. Not null for a FunctionalBlockTemplate usage.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Functional block template version.\r\nInformation only. Readonly.",
            "nullable": true
          },
          "instancesCount": {
            "type": "integer",
            "description": "Number of functional block instances using this template.\r\nInformation only. Readonly.",
            "format": "int64"
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the functional block",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Basic information of a functionalblock template"
      },
      "FunctionalBlockTemplateWizardDTO": {
        "type": "object",
        "properties": {
          "used": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "doNotImport": {
            "type": "boolean"
          },
          "applied": {
            "type": "boolean"
          },
          "iconChanged": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockBaseId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockBaseName": {
            "type": "string",
            "nullable": true
          },
          "supportMasterSlave": {
            "type": "boolean"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "iconExtension": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointTemplateDesc"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAddressDTO": {
        "type": "object",
        "properties": {
          "networkID": {
            "type": "string",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GraphApiAccessData": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "secretExpirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HardwareLayoutDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the hardware layout.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the hardware layout.",
            "nullable": true
          },
          "layoutImage": {
            "type": "string",
            "description": "Layout image of the hardware layout.",
            "nullable": true
          },
          "thumbImage": {
            "type": "string",
            "description": "Thumb image of the hardware layout.",
            "nullable": true
          },
          "supportedTransports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportType"
            },
            "description": "List of the transports supported by the hardware layout.",
            "nullable": true
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HardwareLayoutPortDTO"
            },
            "description": "List of available ports.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about a hardware layout of a station"
      },
      "HardwareLayoutInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the hardware layout.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the hardware layout.",
            "nullable": true
          },
          "supportedTransports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportType"
            },
            "description": "List of the transports supported by the hardware layout.",
            "nullable": true
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HardwareLayoutPortInfoDTO"
            },
            "description": "List of available ports.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a hardware layout of a station"
      },
      "HardwareLayoutPortDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the port.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the port.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the port.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the port.",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/RectangleDTO"
          },
          "supportMultiNetworks": {
            "type": "boolean",
            "description": "Indicates if the port supports several networks."
          },
          "wiringImage": {
            "type": "string",
            "description": "Image of wiring of the port.",
            "nullable": true
          },
          "supportedTransports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportType"
            },
            "description": "List of the transports supported by the port.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PortType"
          },
          "isDefaultIpPort": {
            "type": "boolean",
            "description": "Indicates if the port is the default IP port."
          },
          "defaultIpAddress": {
            "type": "string",
            "description": "Default static IP address, is empty if not applicable or DHCP is used by default.",
            "nullable": true
          },
          "defaultSubnetMask": {
            "type": "string",
            "description": "Default subnet mask, is empty if not applicable or DHCP is used by default.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about a port of a station"
      },
      "HardwareLayoutPortInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the port.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the port.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a port of a station"
      },
      "HierarchyDTO": {
        "type": "object",
        "properties": {
          "dataVersion": {
            "type": "string",
            "nullable": true
          },
          "items": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/HierarchyItemDTO"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringValueTuple"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HierarchyItemDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "iconUrl": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpStatusCode": {
        "enum": [
          "Continue",
          "SwitchingProtocols",
          "Processing",
          "EarlyHints",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultiStatus",
          "AlreadyReported",
          "IMUsed",
          "Ambiguous",
          "Moved",
          "Redirect",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "PermanentRedirect",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "MisdirectedRequest",
          "UnprocessableEntity",
          "Locked",
          "FailedDependency",
          "UpgradeRequired",
          "PreconditionRequired",
          "TooManyRequests",
          "RequestHeaderFieldsTooLarge",
          "UnavailableForLegalReasons",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported",
          "VariantAlsoNegotiates",
          "InsufficientStorage",
          "LoopDetected",
          "NotExtended",
          "NetworkAuthenticationRequired"
        ],
        "type": "string"
      },
      "ImportEngineStatus": {
        "enum": [
          "None",
          "AnalyzingData",
          "ApplyingData",
          "Wizard"
        ],
        "type": "string"
      },
      "ImportProjectEvent": {
        "type": "object",
        "properties": {
          "cancelPossible": {
            "type": "boolean"
          },
          "done": {
            "type": "boolean"
          },
          "level": {
            "$ref": "#/components/schemas/LevelInfo"
          },
          "lifeSignal": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImportResultDTO": {
        "type": "object",
        "properties": {
          "functionalBlockTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockTemplateImportResultDTO"
            },
            "description": "List of FunctionalBlock template imported with the associated changed flag (added/updated)",
            "nullable": true
          },
          "zoneTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneTemplateImportResultDTO"
            },
            "description": "List of Zone template imported with the associated changed flag (added/updated)",
            "nullable": true
          },
          "deviceTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceTemplateImportResultDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object containing the result of an import operation"
      },
      "ImportUserLevel": {
        "enum": [
          "Integrator",
          "Installer",
          "FacilityManager"
        ],
        "type": "string"
      },
      "IndividualScheduleConfigurationDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleConfigurationDTO"
          }
        ],
        "properties": {
          "zoneInstanceId": {
            "type": "string",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
            },
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ScheduleConfigurationType"
          }
        },
        "additionalProperties": false
      },
      "IndividualScheduleConfigurationInfoDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleConfigurationInfoDTO"
          }
        ],
        "properties": {
          "zoneInstanceName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ScheduleConfigurationType"
          }
        },
        "additionalProperties": false
      },
      "InitializationStatus": {
        "enum": [
          "NotDone",
          "PasswordSet",
          "CoreInitializationDone",
          "StructureInitializationDone"
        ],
        "type": "string"
      },
      "InitializationStatusDTO": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/InitializationStatus"
          }
        },
        "additionalProperties": false,
        "description": "Initialization status"
      },
      "InitUserDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "initials": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "preferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "hasAccessFromCloud": {
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPAddressDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          }
        },
        "additionalProperties": false
      },
      "IPEndPointDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          }
        },
        "additionalProperties": false
      },
      "IPEndPointDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LevelInfo": {
        "enum": [
          "Info",
          "Error"
        ],
        "type": "string"
      },
      "LicenseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "deviceId": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseMetricDTO"
            },
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expired": {
            "type": "boolean"
          },
          "expiredBecauseToken": {
            "type": "boolean"
          },
          "tokenExpirationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LicenseMetricDTO": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "unlimited": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LicenseSubscriptionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LicensingAction": {
        "enum": [
          "Added",
          "Updated",
          "Removed",
          "Expired",
          "GlobalStateValid",
          "GlobalStateInvalid"
        ],
        "type": "string"
      },
      "LicensingEventDTO": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/LicensingAction"
          },
          "license": {
            "$ref": "#/components/schemas/LicenseDTO"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkScheduleDTO": {
        "type": "object",
        "properties": {
          "link": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LiveAlarmSubscriptionDTO": {
        "type": "object",
        "properties": {
          "alarmInstanceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalUserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "LocalUser id",
            "nullable": true
          },
          "login": {
            "type": "string",
            "description": "Local user login",
            "nullable": true
          },
          "hashedPassword": {
            "type": "string",
            "description": "Local user hashed password",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Local user email",
            "nullable": true
          },
          "accessRights": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of access right identifiers",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "LocalUser related UserId",
            "nullable": true
          },
          "hasAccessFromCloud": {
            "type": "boolean",
            "description": "LocalUser Cloud access"
          },
          "active": {
            "type": "boolean",
            "description": "LocalUser is active"
          },
          "culture": {
            "type": "string",
            "description": "Culture of the local user",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone of the local user",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginResponseDTO": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogLevel": {
        "enum": [
          "Trace",
          "Debug",
          "Information",
          "Warning",
          "Error",
          "Critical",
          "None"
        ],
        "type": "string"
      },
      "LogSettingsDTO": {
        "type": "object",
        "properties": {
          "logLevelNginx": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "logLevelBosPublication": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "logLevelBosDatabase": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "logLevelBosBusiness": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "logLevelBosMiddlewareSynchronization": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "logLevelMiddleware": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "logMiddlewareSynchronization": {
            "type": "boolean"
          },
          "logMiddlewareNetwork": {
            "type": "boolean"
          },
          "logMiddlewareAlarms": {
            "type": "boolean"
          },
          "logMiddlewareTrends": {
            "type": "boolean"
          },
          "logMiddlewareGeneral": {
            "type": "boolean"
          },
          "logNamespaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogSettingsNamespaceDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogSettingsNamespaceDTO": {
        "type": "object",
        "properties": {
          "logLevel": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LongDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          },
          "unitId": {
            "type": "string",
            "nullable": true
          },
          "min": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "max": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LongToBoolDTO": {
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "max": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "minIncluded": {
            "type": "boolean"
          },
          "maxIncluded": {
            "type": "boolean"
          },
          "value": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LongToEnumDTO": {
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "max": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "minIncluded": {
            "type": "boolean"
          },
          "maxIncluded": {
            "type": "boolean"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "MapViewAnimationRuntimeDTO": {
        "type": "object",
        "properties": {
          "functionalBlockAnimationRuntimes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockAnimationRuntimeDTO"
            },
            "description": "Runtime informations for the functional block animations.",
            "nullable": true
          },
          "functionalBlockAnimationsConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockAnimationDTO"
            },
            "description": "Configurations of the functional block animations.",
            "nullable": true
          },
          "zoneAnimationRuntimes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneAnimationRuntimeDTO"
            },
            "description": "Runtime information for the zone animations.",
            "nullable": true
          },
          "zoneAnimationConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneAnimationDTO"
            },
            "description": "Configurations of the zone animations.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Runtime information for the animation of a mapview."
      },
      "MapViewDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the mapview.",
            "nullable": true
          },
          "maxZoomLevel": {
            "type": "integer",
            "description": "Maximum zoom level of the map.",
            "format": "int32",
            "nullable": true
          },
          "ratioXonY": {
            "type": "number",
            "description": "Aspect ratio of the map. (Width / Height)",
            "format": "double",
            "nullable": true
          },
          "tilesDirectory": {
            "type": "string",
            "description": "Directory containing the tiles.\r\nFor information only.",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "description": "Original name of the image file used to create the map.\r\nFor information only.",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Unique identifier of the zone instance the mapview is attached to.",
            "nullable": true
          },
          "geoloc": {
            "$ref": "#/components/schemas/PointDPointDKeyValuePair"
          },
          "scaleMeterForLogicOne": {
            "type": "number",
            "description": "Length in meters for 1 unit on the map (either horizontally or vertically).",
            "format": "double",
            "nullable": true
          },
          "lastFunctionalBlockSizes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SizeD"
            },
            "description": "Last size used for functional blocks.",
            "nullable": true
          },
          "delimitArea": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PointD"
              }
            },
            "description": "Area covered by the mapview. The area is defined by a collection of polygons.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a mapview."
      },
      "MapViewElementBaseDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ElementType"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the mapview object.",
            "nullable": true
          },
          "zOrder": {
            "type": "integer",
            "description": "Z-order of the element on the mapview.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Mapview object.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "FunctionalBlock": "#/components/schemas/MapViewElementFBDTO",
            "Zone": "#/components/schemas/MapViewElementZoneDTO",
            "Text": "#/components/schemas/MapViewElementTextDTO",
            "Image": "#/components/schemas/MapViewElementImageDTO"
          }
        }
      },
      "MapViewElementFBDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MapViewElementBaseDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ElementType"
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Unique identifier of the functional block instance.",
            "nullable": true
          },
          "orientation": {
            "type": "number",
            "description": "Orientation of the logo.",
            "format": "double"
          },
          "position": {
            "$ref": "#/components/schemas/PointD"
          },
          "size": {
            "$ref": "#/components/schemas/SizeD"
          },
          "name": {
            "type": "string",
            "description": "Functional block name.",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon.",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Filler color for icon.",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean",
            "description": "True if assignation is done.",
            "nullable": true
          },
          "masterMode": {
            "$ref": "#/components/schemas/MasterMode"
          },
          "isExternal": {
            "type": "boolean",
            "description": "From external source."
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Id of the functional block template.",
            "nullable": true
          },
          "supportMasterSlave": {
            "type": "boolean",
            "description": "Support master/slave."
          },
          "functionalBlockTemplateName": {
            "type": "string",
            "description": "Name of functional block template.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Informations for the mapview representation of a functional block."
      },
      "MapViewElementImageDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MapViewElementBaseDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ElementType"
          },
          "orientation": {
            "type": "number",
            "description": "Orientation of the image.",
            "format": "double"
          },
          "position": {
            "$ref": "#/components/schemas/PointD"
          },
          "size": {
            "$ref": "#/components/schemas/SizeD"
          },
          "uri": {
            "type": "string",
            "description": "URL to the image.",
            "nullable": true
          },
          "backgroundColor": {
            "type": "string",
            "description": "Background color.",
            "nullable": true
          },
          "borderColor": {
            "type": "string",
            "description": "Border color.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Informations for the mapview representation of an image."
      },
      "MapViewElementTextDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MapViewElementBaseDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ElementType"
          },
          "orientation": {
            "type": "number",
            "description": "Orientation of the text.",
            "format": "double"
          },
          "position": {
            "$ref": "#/components/schemas/PointD"
          },
          "size": {
            "$ref": "#/components/schemas/SizeD"
          },
          "text": {
            "type": "string",
            "description": "Text shown on the mapview.",
            "nullable": true
          },
          "fontStyle": {
            "$ref": "#/components/schemas/FontStyle"
          },
          "fontColor": {
            "type": "string",
            "description": "Text color.",
            "nullable": true
          },
          "backgroundColor": {
            "type": "string",
            "description": "Background color.",
            "nullable": true
          },
          "borderColor": {
            "type": "string",
            "description": "Border color.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Informations for the mapview representation of a text."
      },
      "MapViewElementZoneDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MapViewElementBaseDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ElementType"
          },
          "zoneId": {
            "type": "string",
            "description": "Unique identifier of the zone.",
            "nullable": true
          },
          "borderColor": {
            "type": "string",
            "description": "Border color.",
            "nullable": true
          },
          "fillColor": {
            "type": "string",
            "description": "Fill color.",
            "nullable": true
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PointD"
            },
            "description": "Points.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "From external source."
          },
          "zoneTemplateId": {
            "type": "string",
            "description": "Zone template ID.",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon.",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color.",
            "nullable": true
          },
          "zoneTemplateName": {
            "type": "string",
            "description": "Name of zone template.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Informations for the mapview representation of a zone."
      },
      "MapViewProjectImportDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "maxZoomLevel": {
            "type": "integer",
            "format": "int64"
          },
          "ratioXonY": {
            "type": "number",
            "format": "double"
          },
          "tilesDirectory": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapViewSetDTO": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "description": "Unique identifier of the zone instance the mapview is attached to.",
            "nullable": true
          },
          "geoloc": {
            "$ref": "#/components/schemas/PointDPointDKeyValuePair"
          },
          "scaleMeterForLogicOne": {
            "type": "number",
            "description": "Length in meters for 1 unit on the map (either horizontally or vertically).",
            "format": "double",
            "nullable": true
          },
          "lastFunctionalBlockSizes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SizeD"
            },
            "description": "Last size used for functional blocks.",
            "nullable": true
          },
          "delimitArea": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PointD"
              }
            },
            "description": "Area covered by the mapview. The area is defined by a collection of polygons.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a mapview."
      },
      "MapViewSubscriptionDTO": {
        "type": "object",
        "properties": {
          "mapviewIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterMode": {
        "enum": [
          "None",
          "Master",
          "Slave",
          "Single"
        ],
        "type": "string"
      },
      "MetaPackageDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "constructorIcon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeterDTO": {
        "type": "object",
        "properties": {
          "functionalBlockInstance": {
            "$ref": "#/components/schemas/FunctionalBlockInstanceDTO"
          },
          "meterIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "energyId": {
            "type": "string",
            "nullable": true
          },
          "meterParentId": {
            "type": "string",
            "nullable": true
          },
          "circuitId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceName": {
            "type": "string",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "nullable": true
          },
          "zoneIcon": {
            "type": "string",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean"
          },
          "functionalBlockInstanceId": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockName": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeterHierarchyInfoDTO": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterHierarchyInfoDTO"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "energyId": {
            "type": "string",
            "nullable": true
          },
          "meterParentId": {
            "type": "string",
            "nullable": true
          },
          "circuitId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceName": {
            "type": "string",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "nullable": true
          },
          "zoneIcon": {
            "type": "string",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean"
          },
          "functionalBlockInstanceId": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockName": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeterInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "energyId": {
            "type": "string",
            "nullable": true
          },
          "meterParentId": {
            "type": "string",
            "nullable": true
          },
          "circuitId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceName": {
            "type": "string",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "nullable": true
          },
          "zoneIcon": {
            "type": "string",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean"
          },
          "functionalBlockInstanceId": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockName": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeterSetDTO": {
        "type": "object",
        "properties": {
          "functionalBlockTemplateId": {
            "type": "string",
            "nullable": true
          },
          "inputDistributionId": {
            "type": "string",
            "nullable": true
          },
          "inputCircuitIndex": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "energyId": {
            "type": "string",
            "nullable": true
          },
          "meterParentId": {
            "type": "string",
            "nullable": true
          },
          "circuitId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "nullable": true
          },
          "deviceInstanceName": {
            "type": "string",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "nullable": true
          },
          "zoneIcon": {
            "type": "string",
            "nullable": true
          },
          "assignationDone": {
            "type": "boolean"
          },
          "functionalBlockInstanceId": {
            "type": "string",
            "nullable": true
          },
          "functionalBlockName": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MethodResultDTO": {
        "type": "object",
        "properties": {
          "returns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyValueDTO"
            },
            "nullable": true
          },
          "knownResult": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetricUsageDTO": {
        "type": "object",
        "properties": {
          "usage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "unlimited": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MiddlewareQuality": {
        "enum": [
          "none",
          "uncertain",
          "good",
          "bad",
          "mask",
          "notcommissioned",
          "badrequiredformat",
          "badpreparingrawstring",
          "badcatalog",
          "badninotopened",
          "badinternalerror",
          "badopcitemsubscription",
          "badopcgroupsubscription",
          "badopcdisconnected",
          "badcannotberead",
          "badninotfound",
          "badninone",
          "badnierroropen",
          "baddeviceabsent",
          "badConfigurationError",
          "badDeviceFailure",
          "badLastKnownValue",
          "badNotConnected",
          "badOutOfService",
          "badSensorFailure",
          "badWaitingForInitialData",
          "uncertainEUExceeded",
          "uncertainLastUsableValue",
          "uncertainSensorNotAccurate",
          "uncertainSubNormal",
          "badCommFailure",
          "badServerStopped",
          "badInactiveTrend",
          "badDbTransactionTimeout",
          "badDbWrite",
          "badAverage",
          "badunknownproperty",
          "badunknownobject",
          "badsubscriptionfailed",
          "badlicense",
          "badResetTrend",
          "badbitmask"
        ],
        "type": "string"
      },
      "MiddlewareSynchroOptionsDTO": {
        "type": "object",
        "properties": {
          "stationId": {
            "type": "string",
            "description": "Unique station identifier",
            "nullable": true
          },
          "full": {
            "type": "boolean",
            "description": "true for full synchronization, false for partial"
          },
          "clearMiddleware": {
            "type": "boolean",
            "description": "true to clear middleware database before sychronization"
          },
          "tag": {
            "type": "string",
            "description": "Tag to control if the synchronization is finished.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "BOS to middleware synchronization parameters for a station"
      },
      "MiddlewareTableDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the MiddlewareTable item.",
            "nullable": true
          },
          "mapping": {
            "type": "string",
            "description": "Mapping of internal objects of the BOS entity.\r\nInternal use only.",
            "nullable": true
          },
          "middlewareId": {
            "type": "string",
            "description": "Unique identifier of the middleware entity.",
            "nullable": true
          },
          "stationId": {
            "type": "string",
            "description": "Unique identifier of the station the entity belongs to.",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "used": {
            "type": "boolean",
            "description": "Indicates if entity must be synchronized or not."
          },
          "bosId": {
            "type": "string",
            "description": "Unique database identifier of the BOS entity linked to the MiddlewareTable item.",
            "nullable": true
          },
          "lastActionTime": {
            "type": "string",
            "description": "Time of last action on this item (creation, update, ...)",
            "format": "date-time"
          },
          "lastSynchroError": {
            "type": "string",
            "description": "Error of last BOS to middleware synchronization, null if none.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of the entity (alarm, network, sched, trend, ...)",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/SynchroState"
          }
        },
        "additionalProperties": false,
        "description": "Information about an item of the BOS MiddlewareTable."
      },
      "MiddlewareTableInfoDTO": {
        "type": "object",
        "properties": {
          "bosId": {
            "type": "string",
            "description": "Unique database identifier of the BOS entity linked to the MiddlewareTable item.",
            "nullable": true
          },
          "lastActionTime": {
            "type": "string",
            "description": "Time of last action on this item (creation, update, ...)",
            "format": "date-time"
          },
          "lastSynchroError": {
            "type": "string",
            "description": "Error of last BOS to middleware synchronization, null if none.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of the entity (alarm, network, sched, trend, ...)",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/SynchroState"
          }
        },
        "additionalProperties": false,
        "description": "Minimal information about an item of the BOS MiddlewareTable."
      },
      "NetworkCreationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Localized name of the network",
            "nullable": true
          },
          "simulated": {
            "type": "boolean",
            "description": "Indicates if network is simulated or not. If simulated no fieldbus operation will be performed."
          },
          "portId": {
            "type": "string",
            "description": "Unique identifier of the hardware port layout the network is linked to (ie: LAN1/LAN2)",
            "nullable": true
          },
          "stationId": {
            "type": "string",
            "description": "Unique identifier of the station where the network will be created",
            "nullable": true
          },
          "driverDescriptorId": {
            "type": "string",
            "description": "Unique identifier of the driver descriptor the network is linked to",
            "nullable": true
          },
          "propertyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyValueDTO"
            },
            "description": "List of property values of the network.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a network for creation"
      },
      "NetworkDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the network",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the network",
            "nullable": true
          },
          "simulated": {
            "type": "boolean",
            "description": "Indicates if network is simulated or not"
          },
          "portId": {
            "type": "string",
            "description": "Unique identifier of the hardware port layout the network is linked to",
            "nullable": true
          },
          "stationId": {
            "type": "string",
            "description": "Unique identifier of the station the network belongs to",
            "nullable": true
          },
          "driverDescriptorId": {
            "type": "string",
            "description": "Unique identifier of the driver descriptor the network is linked to",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/NetworkStatus"
          },
          "propertyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyValueDTO"
            },
            "description": "List of property values of the network",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Unique identifier of the network organization of the network",
            "nullable": true
          },
          "temporaryOrganizationId": {
            "type": "string",
            "description": "Unique identifier of the temporary network organization of the network",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a network for read"
      },
      "NetworkOrganizationApplyDTO": {
        "type": "object",
        "properties": {
          "toIgnoreBranchIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionDTO"
          }
        },
        "additionalProperties": false
      },
      "NetworkOrganizationInfoDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Version of the network organization",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a network organization"
      },
      "NetworkOrganizationMergeDTO": {
        "type": "object",
        "properties": {
          "toIgnoreBranchIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionDTO"
          }
        },
        "additionalProperties": false
      },
      "NetworkOrganizationUpdateDTO": {
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BranchUpdateDTO"
            },
            "description": "Definition of branches",
            "nullable": true
          },
          "busDatapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusDatapointUpdateDTO"
            },
            "description": "Definition of field bus datapoints",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a network organization for update"
      },
      "NetworkStatus": {
        "enum": [
          "Ok",
          "XDriverVersionNotCompliant",
          "XDriverMissing",
          "InternalError"
        ],
        "type": "string"
      },
      "NetworkSynchroErrorDTO": {
        "type": "object",
        "properties": {
          "stationId": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NetworkUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the network",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the network",
            "nullable": true
          },
          "simulated": {
            "type": "boolean",
            "description": "Indicates if network is simulated or not"
          },
          "propertyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyValueDTO"
            },
            "description": "List of property values of the network",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a network for update"
      },
      "NetworkWizardDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "applied": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "portId": {
            "type": "string",
            "nullable": true
          },
          "routing": {
            "type": "boolean"
          },
          "address": {
            "$ref": "#/components/schemas/IPEndPointDTO"
          },
          "isSecured": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OccupancyHeatmapEntryDTO": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "description": "Day represented by this entry.",
            "format": "date-time"
          },
          "numberOfMinutesOccupied": {
            "type": "integer",
            "description": "Number of minutes the room was occupied.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents the occupency of a room for a specific day."
      },
      "Owner": {
        "enum": [
          "BOS",
          "Middleware"
        ],
        "type": "string"
      },
      "ParentScheduleDTO": {
        "type": "object",
        "properties": {
          "zoneInstanceId": {
            "type": "string",
            "nullable": true
          },
          "zoneInstanceName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PendingSynchronization": {
        "enum": [
          "Done",
          "Incremental",
          "Full",
          "None"
        ],
        "type": "string"
      },
      "PhysicalDeviceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "deviceInstanceId": {
            "type": "string",
            "description": "Id of the device instance it is attached too.\r\nNull if none.",
            "nullable": true
          },
          "deviceTemplateId": {
            "type": "string",
            "description": "Id of the device template of the device instance it is attached too.\r\nNull if none.",
            "nullable": true
          },
          "manual": {
            "type": "boolean",
            "description": "True if this physical device was created by a rest client or internally."
          },
          "networkOrganizationBranchId": {
            "type": "string",
            "description": "Unique identifier of the branch linked to this device in the device organization.\r\nnull if this device is not present in the network organization of its network.",
            "nullable": true
          },
          "assignationCounter": {
            "type": "integer",
            "description": "Number of time this device has been assigned manually to a datapoint instance",
            "format": "int64"
          },
          "networkId": {
            "type": "string",
            "description": "Id of the network of the device",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Physical device"
      },
      "PhysicalDeviceEditDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "Id of the network of the device",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocol arguments",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Physical device for update or insert"
      },
      "PhysicalPointDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the physical point",
            "nullable": true
          },
          "protocolArguments": {
            "type": "object",
            "additionalProperties": { },
            "description": "Protocal arguments",
            "nullable": true
          },
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Type of the phyical point",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a physical point"
      },
      "PointD": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PointDPointDKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/PointD"
          },
          "value": {
            "$ref": "#/components/schemas/PointD"
          }
        },
        "additionalProperties": false
      },
      "PortType": {
        "enum": [
          "None",
          "IP",
          "Serial"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProjectApplicationHistoricalAcknowledgeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the historical",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains historical of project application"
      },
      "ProjectApplicationHistoricalDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the historical",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date of last application status",
            "format": "date-time"
          },
          "userName": {
            "type": "string",
            "description": "Name of user who launches the application",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Identifier of user who launches the application",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProjectApplicationStatus"
          },
          "sendNotification": {
            "type": "boolean",
            "description": "True if have to send notification when a user has created a subscription on application progress"
          },
          "logFile": {
            "type": "string",
            "description": "Path of log file",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "End user's note",
            "nullable": true
          },
          "applicationName": {
            "type": "string",
            "description": "Name of application that started the migration",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains historical of project application"
      },
      "ProjectApplicationStatus": {
        "enum": [
          "Inprogress",
          "Complete",
          "Error",
          "Canceled"
        ],
        "type": "string"
      },
      "ProjectApplicationSubscriptionDTO": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectDesc": {
        "type": "object",
        "properties": {
          "projectName": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "nullable": true
          },
          "importId": {
            "type": "string",
            "nullable": true
          },
          "globalVersion": {
            "type": "integer",
            "format": "int64"
          },
          "userLevel": {
            "$ref": "#/components/schemas/ImportUserLevel"
          },
          "mngPackageName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectLocalizationDataDTO": {
        "type": "object",
        "properties": {
          "culture": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "currentTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ProjectSettingsDTO": {
        "type": "object",
        "properties": {
          "firstTimeConnection": {
            "type": "boolean"
          },
          "projectName": {
            "type": "string",
            "nullable": true
          },
          "deviceDetails": {
            "type": "string",
            "nullable": true
          },
          "intervalSynchroCloudUserOnChangeInSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "intervalSynchroCloudUserOnErrorInSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "isDeviceSynchronized": {
            "type": "boolean"
          },
          "isFactoryResetSynchronized": {
            "type": "boolean"
          },
          "lastRestore": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastBackup": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "culture": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDatapointInstanceDTO": {
        "type": "object",
        "properties": {
          "value": {
            "description": "Property value",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "User id the properties is attached too (null for none)\r\nReadonly (for information only).",
            "nullable": true
          },
          "roleId": {
            "type": "string",
            "description": "Role id the properties is attached too (null for none)\r\nReadonly (for information only).",
            "nullable": true
          },
          "isOverride": {
            "type": "boolean",
            "description": "Indicates if the value overrides the template default value"
          },
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of datapoint\r\nThis field is readonly and ignored during a put/post for a datapoint instance attached to a datapoint template",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "typeId": {
            "type": "string",
            "description": "Unique identifier DataType\r\nThis field is readonly and ignored during a put/post for a datapoint instance attached to a datapoint template",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the datapoint\r\nThis field is readonly and ignored during a put/post for a datapoint instance attached to a datapoint template",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the datapoint template (if any)",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Id of the functionalblock instance the datapoint belongs to.\r\nEmpty if datapoint does not belong to a functionalblock instance.\r\nReadonly (for information only).",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Id of the zone instance the datapoint belongs to.\r\nEmpty if datapoint does not belong to a zone instance.\r\nReadonly (for information only).",
            "nullable": true
          },
          "displayUnitId": {
            "type": "string",
            "description": "Identifier of the display unit",
            "nullable": true
          },
          "unitId": {
            "type": "string",
            "description": "Identifier of the unit of the template of the datapoint\r\nReadonly (for information only).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Property datapoint instance definition"
      },
      "PropertyDatapointInstanceValueDTO": {
        "type": "object",
        "properties": {
          "value": {
            "description": "Property value",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "When you send the DTO for a write:\r\nFor resource path property/value, must be unique id of the property.\r\nFor resource path property/value/fbsystem, must be [tag of system functional block]--[tag of property]\r\neg: bos:function:system:deviceinfo--bos:info::system:devicename\r\n\r\nWhen receiving the DTo for a read, Id is always the unique id of the property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO for property datapoint instance value"
      },
      "PropertyDatapointTemplateDTO": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the datapoint template",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Localized description",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the datapoint template",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/DatapointDirection"
          },
          "typeId": {
            "type": "string",
            "description": "Data type value unique identifier",
            "nullable": true
          },
          "displayUnitId": {
            "type": "string",
            "description": "Identifier of the display unit",
            "nullable": true
          },
          "publicId": {
            "type": "string",
            "description": "Public Unique identifier for datapoint template (User for Import / Export)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of property datapoint template"
      },
      "PropertyDTO": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "description": "Address of the property",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "Additional address of the property",
            "nullable": true
          },
          "town": {
            "type": "string",
            "description": "Town of the property",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country of the property",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State of the property",
            "nullable": true
          },
          "surfaceGross": {
            "type": "string",
            "description": "Gross surface",
            "nullable": true
          },
          "surfaceNet": {
            "type": "string",
            "description": "Net surface",
            "nullable": true
          },
          "people": {
            "type": "string",
            "description": "Number of people",
            "nullable": true
          },
          "image": {
            "type": "string",
            "description": "Image",
            "nullable": true
          },
          "gpsLat": {
            "type": "string",
            "description": "GPS latitude",
            "nullable": true
          },
          "gpsLon": {
            "type": "string",
            "description": "GPS longitude",
            "nullable": true
          },
          "buildings": {
            "type": "string",
            "description": "Resource path to query the buildings of the propery",
            "nullable": true
          },
          "tenants": {
            "type": "string",
            "description": "Resource path to query the tenants of the propery",
            "nullable": true
          },
          "owners": {
            "type": "string",
            "description": "Resource path to query the owners of the propery",
            "nullable": true
          },
          "propertyManagers": {
            "type": "string",
            "description": "Resource path to query the property managers of the propery",
            "nullable": true
          },
          "facilityManagers": {
            "type": "string",
            "description": "Resource path to query the facility managers of the propery",
            "nullable": true
          },
          "visitors": {
            "type": "string",
            "description": "Resource path to query the visitors of the propery",
            "nullable": true
          },
          "administrators": {
            "type": "string",
            "description": "Resource path to query the administrators of the propery",
            "nullable": true
          },
          "devices": {
            "type": "string",
            "description": "Resource path to query the devices of the propery",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceDTO"
            },
            "description": "List of dataPoint instances inherited from datapoint template",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "List of properties inherited from property template",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceOfZoneDTO"
            },
            "description": "List of functional block instances attached to the zone",
            "nullable": true
          },
          "authorized": {
            "type": "boolean",
            "description": "If true access is granted to this zone."
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent zones attached to the zone",
            "nullable": true
          },
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of children zone instance definition attached to the created zone\r\n(information only)",
            "nullable": true
          },
          "hasMapView": {
            "type": "boolean",
            "description": "True if zone has a mapview attached to it"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Represents a property"
      },
      "PropertyZoneType": {
        "enum": [
          "Property",
          "Building",
          "Structure",
          "Area",
          "Space",
          "Undefined"
        ],
        "type": "string"
      },
      "ProtocolArgumentDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique identifier of the protocol argument",
            "nullable": true
          },
          "levels": {
            "$ref": "#/components/schemas/ProtocolArgumentLevel"
          },
          "mandatories": {
            "$ref": "#/components/schemas/ProtocolArgumentLevel"
          },
          "identity": {
            "$ref": "#/components/schemas/ProtocolArgumentLevel"
          },
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Data type",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "defaultValue": {
            "description": "Default value",
            "nullable": true
          },
          "displayOrder": {
            "type": "integer",
            "description": "Order to display the protocol argument. 1 -> first, 2 -> second, ...\r\n0 for not ordered protocol argument.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Information about a protocol argument of a driver"
      },
      "ProtocolArgumentLevel": {
        "enum": [
          "None",
          "DeviceTemplate",
          "DeviceInstance",
          "FunctionalBlock",
          "Datapoint",
          "All"
        ],
        "type": "string"
      },
      "ProtocolArgumentsOnlyIdentifierDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DatapointIdentifierDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DatapointIdentifierType"
          },
          "networkId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProxySettingsDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of used http proxy",
            "nullable": true
          },
          "login": {
            "type": "string",
            "description": "Login for http proxy",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Password for http proxy",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Settings for configuring box proxy"
      },
      "PublicInformationDTO": {
        "type": "object",
        "properties": {
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "deviceIdentifier": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Quality": {
        "enum": [
          "Uncertain",
          "Good",
          "Bad"
        ],
        "type": "string"
      },
      "RebootDTO": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reboot reason",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Informations to pass to BOS when rebooting"
      },
      "RectangleDTO": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RefreshAlarmInstanceDTO": {
        "type": "object",
        "properties": {
          "alarmTemplateId": {
            "type": "string",
            "description": "If empty refresh alarm instances for any alarm template that have been changed since the last RefreshAlarm controller call",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenDTO": {
        "type": "object",
        "properties": {
          "connectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefreshTrendInstanceDTO": {
        "type": "object",
        "properties": {
          "trendTemplateId": {
            "type": "string",
            "description": "If empty refresh trend instances for any trend template that have been changed since the last RefreshTrend controller call",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegionInfoDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "englishName": {
            "type": "string",
            "nullable": true
          },
          "isMetric": {
            "type": "boolean"
          },
          "currencySymbol": {
            "type": "string",
            "nullable": true
          },
          "isoCurrencySymbol": {
            "type": "string",
            "nullable": true
          },
          "dateFormat": {
            "type": "string",
            "nullable": true
          },
          "timeFormat": {
            "type": "string",
            "nullable": true
          },
          "firstDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          }
        },
        "additionalProperties": false
      },
      "RemoteOrLocal": {
        "enum": [
          "Remote",
          "Local"
        ],
        "type": "string",
        "description": "Defines local or remote connection"
      },
      "RescueModeDetailDTO": {
        "type": "object",
        "properties": {
          "noUser": {
            "type": "boolean",
            "description": "true if no user are already present in the database else false"
          }
        },
        "additionalProperties": false,
        "description": "Rescue mode detail"
      },
      "RescueModeDTO": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Is BOS currently running in rescue mode"
          },
          "reason": {
            "type": "string",
            "description": "Rescue mode reason when enabled",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rescue mode"
      },
      "RetentionPolicyDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the retention policy",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the retention policy",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "description": "Retention duration of linked trends",
            "format": "date-span"
          },
          "downSamplingOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownSamplingOptionDTO"
            },
            "description": "Options values of downsampling operations running from this retention policy",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the retention policy",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the role",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "Unique identifier of the parent role",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the role",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "BOS icon URI",
            "nullable": true
          },
          "accessRights": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of access right identifiers enabled for the role",
            "nullable": true
          },
          "zoneInstanceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of zones attached to a role",
            "nullable": true
          },
          "overrideRights": {
            "$ref": "#/components/schemas/TypeOverride"
          },
          "overrideZones": {
            "$ref": "#/components/schemas/TypeOverride"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to a role",
            "nullable": true
          },
          "isReadonly": {
            "type": "boolean",
            "description": "Readonly role.\r\nReadonly role cannot be deleted and only its name can be changed"
          },
          "notVisibleInCloudMicroSite": {
            "type": "boolean",
            "description": "If true this role will not be visible in the cloud micro site.\r\nOnly root roles are visible in cloud micro site."
          }
        },
        "additionalProperties": false,
        "description": "User role definition"
      },
      "ScheduleActionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isCustom": {
            "type": "boolean"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "valuesCanBeEditedInOperation": {
            "type": "boolean"
          },
          "actionElements": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ScheduleElementDatapointWriteDTO"
                }
              ]
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleActionElementDescriptionDTO": {
        "type": "object",
        "properties": {
          "scheduleActionElementDescriptionId": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleConfigurationDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "generalSettings": {
            "$ref": "#/components/schemas/ScheduleConfigurationGeneralSettingsDTO"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "templatescheduleconfiguration": "#/components/schemas/TemplateScheduleConfigurationDTO",
            "individualscheduleconfiguration": "#/components/schemas/IndividualScheduleConfigurationDTO"
          }
        }
      },
      "ScheduleConfigurationGeneralSettingsDTO": {
        "type": "object",
        "properties": {
          "exceptionsVisible": {
            "type": "boolean"
          },
          "resetOnUpdate": {
            "type": "boolean"
          },
          "resetOnReboot": {
            "type": "boolean"
          },
          "busRepetitionActive": {
            "type": "boolean"
          },
          "busRepetitionOnErrorOnly": {
            "type": "boolean"
          },
          "busRepetitionTimes": {
            "type": "integer",
            "format": "int64"
          },
          "busRepetitionInterval": {
            "type": "integer",
            "format": "int64"
          },
          "todayTomorrowVisible": {
            "type": "boolean"
          },
          "allowCustomAction": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ScheduleConfigurationInfoDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "templatescheduleconfigurationinfo": "#/components/schemas/TemplateScheduleConfigurationInfoDTO",
            "individualscheduleconfigurationinfo": "#/components/schemas/IndividualScheduleConfigurationInfoDTO"
          }
        }
      },
      "ScheduleConfigurationType": {
        "enum": [
          "TemplateScheduleConfiguration",
          "IndividualScheduleConfiguration"
        ],
        "type": "string"
      },
      "ScheduleDateDTO": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "month": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "weekOfMonth": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleDateEntryDayOfWeekDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleDateEntryDTO"
          }
        ],
        "properties": {
          "dayOfWeek": {
            "type": "integer",
            "format": "int32"
          },
          "dtoType": {
            "$ref": "#/components/schemas/ScheduleDateEntryType"
          }
        },
        "additionalProperties": false
      },
      "ScheduleDateEntryDTO": {
        "required": [
          "dtoType"
        ],
        "type": "object",
        "properties": {
          "dtoType": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "times": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleTimeEntryDTO"
            },
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "dtoType",
          "mapping": {
            "scheduledateentrydayofweek": "#/components/schemas/ScheduleDateEntryDayOfWeekDTO",
            "scheduledateentryexception": "#/components/schemas/ScheduleDateEntryExceptionDTO"
          }
        }
      },
      "ScheduleDateEntryExceptionDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleDateEntryDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ExceptionType"
          },
          "dayOfWeek": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "weekOfMonth": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/ScheduleDateDTO"
          },
          "end": {
            "$ref": "#/components/schemas/ScheduleDateDTO"
          },
          "dtoType": {
            "$ref": "#/components/schemas/ScheduleDateEntryType"
          }
        },
        "additionalProperties": false
      },
      "ScheduleDateEntryType": {
        "enum": [
          "DayOfWeek",
          "Exception"
        ],
        "type": "string"
      },
      "ScheduledUpdateInformationDTO": {
        "type": "object",
        "properties": {
          "scheduledUpdateTime": {
            "type": "string",
            "description": "Contains the time for which an update is scheduled\r\nOr null, if no update is scheduled",
            "format": "date-time",
            "nullable": true
          },
          "updateStatus": {
            "$ref": "#/components/schemas/FirmwareUpdateStatus"
          },
          "newVersion": {
            "type": "string",
            "description": "The version for which an update installation is scheduled",
            "nullable": true
          },
          "updateError": {
            "$ref": "#/components/schemas/EmbeddedErrorDTO"
          },
          "downloadProgress": {
            "type": "integer",
            "format": "int32"
          },
          "downloadRetryDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "automaticReboot": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ScheduleEffectiveTimelineDTO": {
        "type": "object",
        "properties": {
          "times": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleTimeEntryDTO"
            },
            "nullable": true
          },
          "configurationActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleActionDTO"
            },
            "nullable": true
          },
          "actionElementDescriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleActionElementDescriptionDTO"
            },
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ScheduleElementDatapointWriteDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleElementDTO"
          }
        ],
        "properties": {
          "value": {
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/ScheduleElementType"
          }
        },
        "additionalProperties": false
      },
      "ScheduleElementDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "scheduleActionElementDescriptionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "scheduleelementdatapointwrite": "#/components/schemas/ScheduleElementDatapointWriteDTO"
          }
        }
      },
      "ScheduleElementType": {
        "enum": [
          "ScheduleElementDatapointWrite"
        ],
        "type": "string"
      },
      "ScheduleEnableDTO": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ScheduleInstanceDTO": {
        "type": "object",
        "properties": {
          "timeTable": {
            "$ref": "#/components/schemas/ScheduleTimeTableDTO"
          },
          "configurationActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleActionDTO"
            },
            "nullable": true
          },
          "actionElementDescriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleActionElementDescriptionDTO"
            },
            "nullable": true
          },
          "generalSettings": {
            "$ref": "#/components/schemas/ScheduleConfigurationGeneralSettingsDTO"
          },
          "timelineDisplaySettings": {
            "$ref": "#/components/schemas/ScheduleTimelineDisplaySettingsDTO"
          },
          "hasChildren": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "scheduleId": {
            "type": "string",
            "nullable": true
          },
          "scheduleConfigurationId": {
            "type": "string",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "nullable": true
          },
          "zoneInstanceName": {
            "type": "string",
            "nullable": true
          },
          "isIndividualSchedule": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "canBeUnlinkedFromParentSchedule": {
            "type": "boolean"
          },
          "canBeLinkedToParentSchedule": {
            "type": "boolean"
          },
          "canBeUpdated": {
            "type": "boolean"
          },
          "linkedToParentSchedule": {
            "type": "boolean"
          },
          "parentSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentScheduleDTO"
            },
            "nullable": true
          },
          "settingsOverriden": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ScheduleInstanceInfoDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "scheduleId": {
            "type": "string",
            "nullable": true
          },
          "scheduleConfigurationId": {
            "type": "string",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "nullable": true
          },
          "zoneInstanceName": {
            "type": "string",
            "nullable": true
          },
          "isIndividualSchedule": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "canBeUnlinkedFromParentSchedule": {
            "type": "boolean"
          },
          "canBeLinkedToParentSchedule": {
            "type": "boolean"
          },
          "canBeUpdated": {
            "type": "boolean"
          },
          "linkedToParentSchedule": {
            "type": "boolean"
          },
          "parentSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentScheduleDTO"
            },
            "nullable": true
          },
          "settingsOverriden": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ScheduleTimeEntryDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "configurationActionId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ScheduleTimelineDisplaySettingsDTO": {
        "type": "object",
        "properties": {
          "startTimelineDisplay": {
            "type": "integer",
            "format": "int32"
          },
          "endTimelineDisplay": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ScheduleTimeTableDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "weeklyTimeTable": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleDateEntryDayOfWeekDTO"
            },
            "nullable": true
          },
          "exceptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleDateEntryExceptionDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SecurityValidityDTO": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "secretExpirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SelectorDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SelectorType": {
        "enum": [
          "ManualDatapointSelectorDTO",
          "TemplatedDatapointSelectorDTO",
          "FunctionalBlockInstancesSelectorDTO",
          "FunctionalBlockSelectorDTO",
          "ZoneInstanceSelectorDTO",
          "ZoneTemplateSelectorDTO"
        ],
        "type": "string",
        "description": "Discriminator of SelectorType"
      },
      "SignalRMockNotificationDTO": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "nullable": true
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SiteDTO": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "town": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "gpslat": {
            "type": "string",
            "nullable": true
          },
          "gpslon": {
            "type": "string",
            "nullable": true
          },
          "surfacegross": {
            "type": "string",
            "nullable": true
          },
          "people": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SizeD": {
        "type": "object",
        "properties": {
          "width": {
            "type": "number",
            "format": "double"
          },
          "height": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SmartspaceAlgoGetDTO": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "Algorithm parameters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Algorithm parameters defined on a zone template"
      },
      "SmartspaceAlgoRunningActivationDTO": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Indicates algo running activation state"
          }
        },
        "additionalProperties": false
      },
      "SmartspaceAlgoSetDTO": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceValueDTO"
            },
            "description": "Values of the algorithm parameters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Algorithm parameters to apply on a zone template"
      },
      "SmartspaceBuildingGeneralRequestDTO": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Id of the connection for subscription events",
            "nullable": true
          },
          "propertiesTag": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags of properties requested",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for general data of a building"
      },
      "SmartspaceBuildingGeneralResponseDTO": {
        "type": "object",
        "properties": {
          "buildingName": {
            "type": "string",
            "description": "Name of the building",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags of the building",
            "nullable": true
          },
          "subscriptionId": {
            "type": "string",
            "description": "Id of the subscription to be used to close the subscription when window is closed with normal subscription route",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceZoneDetailPropDTO"
            },
            "description": "List of requested properties of the building",
            "nullable": true
          },
          "numberOfFloors": {
            "type": "integer",
            "description": "Number of floors",
            "format": "int64"
          },
          "numberOfBasement": {
            "type": "integer",
            "description": "Number of basement",
            "format": "int64"
          },
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceBuildingRoomDTO"
            },
            "description": "List of rooms",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "General data of a building"
      },
      "SmartspaceBuildingRoomDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the room",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "description": "Id of the zone",
            "nullable": true
          },
          "occupancyState": {
            "$ref": "#/components/schemas/SmartspaceOccupancyStateDTO"
          },
          "capacity": {
            "type": "integer",
            "description": "Room capacity (if available)",
            "format": "int64",
            "nullable": true
          },
          "presenceCountingDatapointInstanceId": {
            "type": "string",
            "description": "Id of the datapoint counting people presents in the room",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Room of a building"
      },
      "SmartSpaceDatabaseGeneratorDTO": {
        "type": "object",
        "properties": {
          "numberOfMeetingRoomPerFloor": {
            "type": "integer",
            "description": "Number of meeting room<br /> \r\nEach room name will be MeetingRoom#x <br />",
            "format": "int64"
          },
          "numberOfCO2PerMeetingRoom": {
            "type": "integer",
            "description": "Number of CO2 functional blocks per meeting room. If zero then 1.",
            "format": "int64",
            "default": 1
          },
          "numberOfAirUnitPerMeetingRoom": {
            "type": "integer",
            "description": "Number of air unit functional blocks per meeting room. If zero then 1.",
            "format": "int64",
            "default": 1
          },
          "numberOfOccupancyPerRoom": {
            "type": "integer",
            "description": "Number of occupancy functional blocks per meeting room. If zero then 1.",
            "format": "int64",
            "default": 1
          },
          "minimumDPPerFunctionalBlock": {
            "type": "integer",
            "description": "Minimum number of datapoints per functional block.\r\nWill generate dummy datapoint for missing dp.",
            "format": "int64"
          },
          "minimumDPPerZone": {
            "type": "integer",
            "description": "Minimum number of datapoints per zone.\r\nWill generate dummy datapoint for missing dp.",
            "format": "int64"
          },
          "memorySceneOccupancy": {
            "type": "string",
            "description": "Format of the scene of the Occupancy.occupancy datapoint. If empty the scene will be : /scene=ana:1000:0:100<br /> \r\nFormat is : period:min:max like /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "",
            "nullable": true
          },
          "memorySceneCountedpeople": {
            "type": "string",
            "description": "Format of the scene of the Occupancy.countedpeople datapoint. If empty the scene will be: /scene=ana:1000:0:100<br /> \r\nFormat is : period:min:max like /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "",
            "nullable": true
          },
          "memorySceneTemperature": {
            "type": "string",
            "description": "Format of the scene of the AirCondUnit.Temperature datapoint. If empty the scene will be: /scene=ana:1000:0:100<br /> \r\nFormat is : period:min:max like /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "",
            "nullable": true
          },
          "memorySceneHumidity": {
            "type": "string",
            "description": "Format of the scene of the AirCondUnit.Humidity datapoint. If empty the scene will be: /scene=ana:1000:0:100<br /> \r\nFormat is : period:min:max like /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "",
            "nullable": true
          },
          "memorySceneCO2": {
            "type": "string",
            "description": "Format of the scene of the CO2.CO2 datapoint. If empty the scene will be: /scene=ana:1000:0:100<br /> \r\nFormat is : period:min:max like /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "",
            "nullable": true
          },
          "memorySceneVOC": {
            "type": "string",
            "description": "Format of the scene of the CO2.VOC datapoint. If empty the scene will be: /scene=ana:1000:0:100<br /> \r\nFormat is : period:min:max like /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "",
            "nullable": true
          },
          "memorySceneCalendardchanged": {
            "type": "string",
            "description": "Format of the scene of the MeetingRoom.calendardchanged datapoint. If empty the scene will be: /scene=ana:1000:0:100<br /> \r\nFormat is : period:min:max like /scene=ana:{periodMs}:{minValue}:{maxValue}",
            "default": "",
            "nullable": true
          },
          "trendOccupancy": {
            "$ref": "#/components/schemas/TrendConfigurationDTO"
          },
          "trendCountedPeople": {
            "$ref": "#/components/schemas/TrendConfigurationDTO"
          },
          "trendTemperature": {
            "$ref": "#/components/schemas/TrendConfigurationDTO"
          },
          "trendHumidity": {
            "$ref": "#/components/schemas/TrendConfigurationDTO"
          },
          "trendCO2": {
            "$ref": "#/components/schemas/TrendConfigurationDTO"
          },
          "trendVOC": {
            "$ref": "#/components/schemas/TrendConfigurationDTO"
          },
          "alarmTemperature": {
            "$ref": "#/components/schemas/AlarmConfigurationDTO"
          },
          "alarmHumidity": {
            "$ref": "#/components/schemas/AlarmConfigurationDTO"
          },
          "alarmCO2": {
            "$ref": "#/components/schemas/AlarmConfigurationDTO"
          },
          "alarmVOC": {
            "$ref": "#/components/schemas/AlarmConfigurationDTO"
          },
          "noAlarm": {
            "type": "boolean",
            "description": "If true no alarm generated"
          },
          "noTrend": {
            "type": "boolean",
            "description": "If true no trend generated"
          },
          "synchronousGeneration": {
            "type": "boolean",
            "description": "If true generation of database will be synchronous (rest call will be blocked during execution)",
            "default": false
          },
          "numberOfBuildings": {
            "type": "integer",
            "description": "Number of buildings (zone instance)<br /> \r\nZone template of all buildings will be named TBuilding<br /> \r\nZone template of the building has a tag bos:building<br /> \r\nEach building zone instance will be named Building#x with x from 1 to n<br /> \r\nZone intance of the building has a tag bos:building",
            "format": "int64"
          },
          "numberOfFloorsPerBuilding": {
            "type": "integer",
            "description": "Number of floors per building<br /> \r\nZone template of all floors will be named TFloor<br /> \r\nZone template of the floor has a tag bos:structure:floor<br /> \r\nEach floor zone instance will be named Floor#x with x from 1 to n<br /> \r\nZone intance of the floor has a tag bos:structure:floor",
            "format": "int64"
          },
          "generateMapviewForEachFloor": {
            "type": "boolean",
            "description": "Indicates if we generate a mapview for each floor",
            "default": false
          },
          "mapviewFunctionalBlockWidthAndHeight": {
            "type": "number",
            "description": "Width and height of each functional block on mapview (between 0 and 1)",
            "format": "double"
          },
          "mapviewFunctionalBlockSpace": {
            "type": "number",
            "description": "X and Y space between functional blocks on mapview (between 0 and 1)",
            "format": "double"
          },
          "mapviewZoneWidthAndHeight": {
            "type": "number",
            "description": "Width and height of each zone polygon on mapview between 0 and 1",
            "format": "double"
          },
          "mapviewZoneSpace": {
            "type": "number",
            "description": "X and Y space between zones on mapview (between 0 and 1)",
            "format": "double"
          },
          "createUserAccessingAll": {
            "type": "boolean",
            "description": "Create the user that can access all.<br /> \r\nName of user is : UserALL<br /> \r\nPaswword of user is : UserALL(1)",
            "default": false
          },
          "createUserAccessingFloor": {
            "type": "boolean",
            "description": "Create the user that can access a floor and all its rooms<br /> \r\nName of user is : User_NameOfFloor with NameOfFloor name of the floor<br /> \r\nPaswword of user is : Pass_NameOfFloor(1) with NameOfFloor name of the floor",
            "default": false
          },
          "createUserAccessingRoom": {
            "type": "boolean",
            "description": "Create the user that can access only one room<br /> \r\nName of user is : User_NameOfRoom with NameOfRoom name of the room<br /> \r\nPaswword of user is : Pass_NameOfRoom(1) with NameOfRoom name of the room",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Settings to generate the smart space evaluation project"
      },
      "SmartspaceDatapointRequestDTO": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Tag of the datapoint",
            "nullable": true
          },
          "wantSubscription": {
            "type": "boolean",
            "description": "Indicates if a subscription is required"
          },
          "wantTrendInstance": {
            "type": "boolean",
            "description": "Indicates if a trend is required"
          },
          "frequencyMs": {
            "type": "integer",
            "description": "Scan rate (in ms) for the datapoint.",
            "format": "int32"
          },
          "deadBand": {
            "type": "number",
            "description": "Deadband for the datapoint.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Details of the datapoint needed to have for the view of the zone"
      },
      "SmartspaceFloorGeneralRequestDTO": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Id of the connection for subscription events, can be null if there is no datapoint to monitor",
            "nullable": true
          },
          "propertyTag": {
            "type": "string",
            "description": "Tag of the property to show for each room, can be null",
            "nullable": true
          },
          "datapointTag": {
            "type": "string",
            "description": "Tag of the datapoint to monitor for each room, can be null",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for general data of a floor"
      },
      "SmartspaceFloorGeneralResponseDTO": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "Id of the subscription to be used to close the subscription when window is closed with normal subscription route",
            "nullable": true
          },
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceFloorRoomDTO"
            },
            "description": "List of rooms",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "General data of a floor"
      },
      "SmartspaceFloorRoomDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the room",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "description": "Id of the zone",
            "nullable": true
          },
          "property": {
            "$ref": "#/components/schemas/SmartspaceZoneDetailPropDTO"
          },
          "datapoint": {
            "$ref": "#/components/schemas/SmartspaceZoneDetailDatapointDTO"
          }
        },
        "additionalProperties": false,
        "description": "Room of a floor"
      },
      "SmartspaceForceOccupancy": {
        "enum": [
          "Standby",
          "Unoccupied",
          "Occupied"
        ],
        "type": "string"
      },
      "SmartspaceFunctionOutputDTO": {
        "type": "object",
        "properties": {
          "datapointTemplateId": {
            "type": "string",
            "description": "Id of the programmed datapoint template",
            "nullable": true
          },
          "zoneTemplateId": {
            "type": "string",
            "description": "Id of the zone template that has the datapoint template",
            "nullable": true
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Id of the functional block template that has the datapoint template",
            "nullable": true
          },
          "selectionMode": {
            "$ref": "#/components/schemas/FBTypeOfSelection"
          },
          "valueOccupied": {
            "description": "Instruction on the datapoint to be executed when the room is occupied",
            "nullable": true
          },
          "valueUnoccupied": {
            "description": "Instruction on the datapoint to be executed when the room is unoccupied",
            "nullable": true
          },
          "valueStandby": {
            "description": "Instruction on the datapoint to be executed when the room is unoccupied during building opening hours",
            "nullable": true
          },
          "canBeChangedInOperationalTool": {
            "type": "boolean",
            "description": "Indicates if the configuration can be overriden in operational tool"
          }
        },
        "additionalProperties": false,
        "description": "DTO of a programmed datapoint template  for a scene for a zone template"
      },
      "SmartspaceFunctionOutputOverrideDTO": {
        "type": "object",
        "properties": {
          "datapointTemplateId": {
            "type": "string",
            "description": "Datapoint affected by the override.",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "string",
            "description": "Zone of the override.",
            "nullable": true
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Id of the functional block template that has the datapoint template",
            "nullable": true
          },
          "valueOccupied": {
            "description": "Value of the datapoint when the zone enters the \"Occupied\" state (or null if no value is used).",
            "nullable": true
          },
          "valueUnoccupied": {
            "description": "Value of the datapoint when the zone enters the \"Free\" state (or null if no value is used).",
            "nullable": true
          },
          "valueStandby": {
            "description": "Value of the datapoint when the zone enters the \"Stand By\" state (or null if no value is used).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Override of a datapoint in a smartspace."
      },
      "SmartspaceHeatmapDTO": {
        "type": "object",
        "properties": {
          "totalHours": {
            "type": "integer",
            "description": "Number of hours represented by the heatmap.",
            "format": "int64"
          },
          "averageNumberOfPeoplePerHour": {
            "type": "number",
            "description": "Average number of people occupying the room.",
            "format": "double"
          },
          "capacity": {
            "type": "integer",
            "description": "Room capacity (if available).",
            "format": "int32",
            "nullable": true
          },
          "percentDensity": {
            "type": "number",
            "description": "Average percentage of the room used capacity (if the room capacity is available).",
            "format": "double",
            "nullable": true
          },
          "occupancy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OccupancyHeatmapEntryDTO"
            },
            "description": "Occupancy of the room per day.",
            "nullable": true
          },
          "density": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DensityHeatmapEntryDTO"
            },
            "description": "Occupation density of the room per day.",
            "nullable": true
          },
          "buildingOccupancyHoursPerDay": {
            "type": "integer",
            "description": "Number of hours per day the building is occupied.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents the heatmap of a room."
      },
      "SmartspaceHvacAssetMappingDTO": {
        "type": "object",
        "properties": {
          "functionalBlockInstanceId": {
            "type": "string",
            "description": "Id of the HVAC asset.",
            "nullable": true
          },
          "zoneInstanceId": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Zones attached to the HVAC.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SmartspaceLicenseStatusDTO": {
        "type": "object",
        "properties": {
          "numberOfMeetingRooms": {
            "type": "integer",
            "description": "Number of meeting rooms configured for smartspace.",
            "format": "int64"
          },
          "numberOfLicensedRooms": {
            "type": "integer",
            "description": "Number of meeting rooms covered by license.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "License status for smartspace."
      },
      "SmartspaceOccupancyStateDTO": {
        "type": "object",
        "properties": {
          "occupancy": {
            "$ref": "#/components/schemas/SmartspaceForceOccupancy"
          },
          "forced": {
            "type": "boolean",
            "description": "True if the state was forced"
          }
        },
        "additionalProperties": false,
        "description": "Occupancy state of a room"
      },
      "SmartspaceSettingsDTO": {
        "type": "object",
        "properties": {
          "buildingOccupancyHoursPerDay": {
            "type": "integer",
            "description": "Number of occupancy hours per day for the building.",
            "format": "int64"
          },
          "buildingGlobalCalendarAddress": {
            "type": "string",
            "description": "Address of the global calendar used for the building.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Global settings for smartspaces."
      },
      "SmartspaceValidationStatusDTO": {
        "type": "object",
        "properties": {
          "countOK": {
            "type": "integer",
            "description": "Number of successful validations.",
            "format": "int64"
          },
          "countWarning": {
            "type": "integer",
            "description": "Number of failed non-blocking validations.",
            "format": "int64"
          },
          "countError": {
            "type": "integer",
            "description": "Number of failed blocking validations.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Validation status of a smartspace."
      },
      "SmartspaceZoneConfigurationDTO": {
        "type": "object",
        "properties": {
          "zoneInstanceId": {
            "type": "string",
            "description": "Id of the zone instance.",
            "nullable": true
          },
          "calendarAddress": {
            "type": "string",
            "description": "Calendar address used for the smartspace.",
            "nullable": true
          },
          "selected": {
            "type": "boolean",
            "description": "Indicates if the smartspace is selected to be managed."
          }
        },
        "additionalProperties": false,
        "description": "Configuration of a smartspace."
      },
      "SmartspaceZoneDetailDatapointDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "description": "Tag",
            "nullable": true
          },
          "trendInstanceId": {
            "type": "string",
            "description": "Id of the trend if exists, otherwise null",
            "nullable": true
          },
          "displayUnit": {
            "type": "string",
            "description": "Display unit",
            "nullable": true
          },
          "assigned": {
            "type": "boolean",
            "description": "Indicates if the datapoint has a bus address to subscribe to"
          }
        },
        "additionalProperties": false,
        "description": "Datapoint of the zone detail"
      },
      "SmartspaceZoneDetailPropDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "description": "Tag",
            "nullable": true
          },
          "value": {
            "description": "Value",
            "nullable": true
          },
          "displayUnit": {
            "type": "string",
            "description": "Display unit",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Property of the zone detail"
      },
      "SmartspaceZoneDetailRequestDTO": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Id of the connection for subscription events",
            "nullable": true
          },
          "propertiesTag": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags of properties requested",
            "nullable": true
          },
          "zoneDatapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceDatapointRequestDTO"
            },
            "description": "Zone Datapoints to be subscribed and/or to be shown trend",
            "nullable": true
          },
          "globalDatapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceDatapointRequestDTO"
            },
            "description": "Global datapoints to be subscribed and/or to be shown trend",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO of a Datapoint with subscription and/or trend"
      },
      "SmartspaceZoneDetailResponseDTO": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags of the zone",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceZoneDetailPropDTO"
            },
            "description": "List of requested properties of the zone",
            "nullable": true
          },
          "zoneDatapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceZoneDetailDatapointDTO"
            },
            "description": "List of requested datapoints of the zone",
            "nullable": true
          },
          "globalDatapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartspaceZoneDetailDatapointDTO"
            },
            "description": "List of global datapoints of the zone",
            "nullable": true
          },
          "subscriptionId": {
            "type": "string",
            "description": "Id of the subscription to be used to close the subscription when window is closed with normal subscription route",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Property of the zone detail"
      },
      "SourceBoolDestDoubleConverterDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromDouble": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DoubleToBoolDTO"
            },
            "nullable": true
          },
          "mappingFromBool": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "typeSource": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "typeDest": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceBoolDestEnumConverterDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConverterDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromBool": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "mappingFromEnumeration": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceDoubleDestBoolConverterDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConverterDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromDouble": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DoubleToBoolDTO"
            },
            "nullable": true
          },
          "mappingFromBool": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceDoubleDestEnumConverterDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConverterDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromDouble": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DoubleToEnumDTO"
            },
            "nullable": true
          },
          "mappingFromEnumeration": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceEnumDestBoolConverterDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromBool": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "mappingFromEnumeration": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "typeSource": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "typeDest": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceEnumDestDoubleConverterDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromDouble": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DoubleToEnumDTO"
            },
            "nullable": true
          },
          "mappingFromEnumeration": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "typeSource": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "typeDest": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceEnumDestEnumConverterDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConverterDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromSource": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "mappingFromDest": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceEnumDestLongConverterDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromLong": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LongToEnumDTO"
            },
            "nullable": true
          },
          "mappingFromEnumeration": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "typeSource": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "typeDest": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceLongDestBoolConverterDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConverterDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromLong": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LongToBoolDTO"
            },
            "nullable": true
          },
          "mappingFromBool": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceLongDestEnumConverterDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConverterDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConverterType"
          },
          "mappingFromLong": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LongToEnumDTO"
            },
            "nullable": true
          },
          "mappingFromEnumeration": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpaceDTO": {
        "type": "object",
        "properties": {
          "spaceType": {
            "type": "string",
            "description": "Type of space (last part of tag bos:space:)",
            "nullable": true
          },
          "structureParents": {
            "type": "string",
            "description": "Resource path to query the parent structure of the space",
            "nullable": true
          },
          "zoneChildren": {
            "type": "string",
            "description": "Resource path to query the children zones of the space",
            "nullable": true
          },
          "zoneParents": {
            "type": "string",
            "description": "Resource path to query the children zones of the space",
            "nullable": true
          },
          "spaceChildren": {
            "type": "string",
            "description": "Resource path to query the children spaces of the space",
            "nullable": true
          },
          "spaceParents": {
            "type": "string",
            "description": "Resource path to query the parent spaces of the space",
            "nullable": true
          },
          "tenants": {
            "type": "string",
            "description": "Resource path to query the tenants of the space",
            "nullable": true
          },
          "owners": {
            "type": "string",
            "description": "Resource path to query the owners of the space",
            "nullable": true
          },
          "propertyManagers": {
            "type": "string",
            "description": "Resource path to query the property managers of the space",
            "nullable": true
          },
          "facilityManagers": {
            "type": "string",
            "description": "Resource path to query the facility managers of the space",
            "nullable": true
          },
          "visitors": {
            "type": "string",
            "description": "Resource path to query the visitors of the space",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceDTO"
            },
            "description": "List of dataPoint instances inherited from datapoint template",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "List of properties inherited from property template",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceOfZoneDTO"
            },
            "description": "List of functional block instances attached to the zone",
            "nullable": true
          },
          "authorized": {
            "type": "boolean",
            "description": "If true access is granted to this zone."
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent zones attached to the zone",
            "nullable": true
          },
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of children zone instance definition attached to the created zone\r\n(information only)",
            "nullable": true
          },
          "hasMapView": {
            "type": "boolean",
            "description": "True if zone has a mapview attached to it"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Represents a space"
      },
      "SshServiceStatus": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SshStatus"
          },
          "allocatedPort": {
            "type": "integer",
            "description": "Which port has been allocated on the relay server for this device",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Shows the status of the tunnel plus the allocated port used on the relay server"
      },
      "SshStatus": {
        "enum": [
          "stopped",
          "connecting",
          "connected",
          "error",
          "stalled"
        ],
        "type": "string"
      },
      "StationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique database identifier of the station",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the station",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/IPEndPointDTO"
          },
          "disabled": {
            "type": "boolean",
            "description": "Indicates if the station is enabled or disabled.\r\nIf it is disabled, it is not possible to write datapoint values on it."
          },
          "isLocal": {
            "type": "boolean",
            "description": "Indicates if the station is the local one."
          },
          "automaticSynchro": {
            "type": "boolean",
            "description": "Indicates if automatic BOS to middleware synchronization is activated."
          },
          "floorIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique database identifiers of the floors managed by the station.",
            "nullable": true
          },
          "hardwareLayoutId": {
            "type": "string",
            "description": "Unique database identifier of the hardware layout of the station.",
            "nullable": true
          },
          "needFullSynchro": {
            "type": "boolean",
            "description": "Indicates if the station needs a full BOS to middleware synchronization."
          },
          "synchroPeriodAfterChange": {
            "type": "integer",
            "description": "Period of time in milliseconds before to start a BOS to middleware synchronization after a change in BOS entity.",
            "format": "int64"
          },
          "synchroPeriodAfterError": {
            "type": "integer",
            "description": "Period of time in milliseconds before to retry a BOS to middleware synchronization after a synchronization error.",
            "format": "int64"
          },
          "networkIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique database identifiers of the networks linked to the station.",
            "nullable": true
          },
          "driverIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique database identifiers of the drivers available on the station.",
            "nullable": true
          },
          "reconnectionInterval": {
            "type": "string",
            "description": "Period of time in seconds before to retry to reconnect to the station.",
            "format": "date-span"
          },
          "reconnectionIntervalOnInternalError": {
            "type": "string",
            "description": "Period of time in minutes before to retry to reconnect to the station after an error.",
            "format": "date-span"
          }
        },
        "additionalProperties": false,
        "description": "Information about a station"
      },
      "StationInfoDTO": {
        "type": "object",
        "properties": {
          "trendRecentValueEventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "trendLatestPurgeDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Unique database identifier of the station",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the station",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/IPEndPointDTO"
          },
          "disabled": {
            "type": "boolean",
            "description": "Indicates if the station is enabled or disabled.\r\nIf it is disabled, it is not possible to write datapoint values on it."
          },
          "isLocal": {
            "type": "boolean",
            "description": "Indicates if the station is the local one."
          },
          "automaticSynchro": {
            "type": "boolean",
            "description": "Indicates if automatic BOS to middleware synchronization is activated."
          },
          "floorIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique database identifiers of the floors managed by the station.",
            "nullable": true
          },
          "hardwareLayoutId": {
            "type": "string",
            "description": "Unique database identifier of the hardware layout of the station.",
            "nullable": true
          },
          "needFullSynchro": {
            "type": "boolean",
            "description": "Indicates if the station needs a full BOS to middleware synchronization."
          },
          "synchroPeriodAfterChange": {
            "type": "integer",
            "description": "Period of time in milliseconds before to start a BOS to middleware synchronization after a change in BOS entity.",
            "format": "int64"
          },
          "synchroPeriodAfterError": {
            "type": "integer",
            "description": "Period of time in milliseconds before to retry a BOS to middleware synchronization after a synchronization error.",
            "format": "int64"
          },
          "networkIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique database identifiers of the networks linked to the station.",
            "nullable": true
          },
          "driverIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique database identifiers of the drivers available on the station.",
            "nullable": true
          },
          "reconnectionInterval": {
            "type": "string",
            "description": "Period of time in seconds before to retry to reconnect to the station.",
            "format": "date-span"
          },
          "reconnectionIntervalOnInternalError": {
            "type": "string",
            "description": "Period of time in minutes before to retry to reconnect to the station after an error.",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "StationSynchroStatusDTO": {
        "type": "object",
        "properties": {
          "stationId": {
            "type": "string",
            "nullable": true
          },
          "lastSynchroDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastSynchroResult": {
            "type": "string",
            "nullable": true
          },
          "lastSynchroType": {
            "$ref": "#/components/schemas/SynchroType"
          },
          "numberOfConsecutiveSynchroErrors": {
            "type": "integer",
            "format": "int32"
          },
          "alarmSynchroErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlarmSynchroErrorDTO"
            },
            "nullable": true
          },
          "networkSynchroErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkSynchroErrorDTO"
            },
            "nullable": true
          },
          "trendSynchroErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendSynchroErrorDTO"
            },
            "nullable": true
          },
          "needFullSynchro": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "StringAnimationDTO": {
        "required": [
          "animationType"
        ],
        "type": "object",
        "properties": {
          "animationType": {
            "$ref": "#/components/schemas/AnimationType"
          },
          "defaultValue": {
            "type": "string",
            "description": "Default value (may be not used).",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the animation.",
            "nullable": true
          },
          "datapointTemplateId": {
            "type": "string",
            "description": "Datapoint template id.",
            "nullable": true
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Functional block template containing the datapoint template (if exists) (read only).",
            "nullable": true
          },
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Type of the datapoint template (read only).",
            "nullable": true
          },
          "selectionModeForZone": {
            "$ref": "#/components/schemas/FBTypeOfSelection"
          },
          "complexDataTypeFieldName": {
            "type": "string",
            "description": "Name of the field of the complex data type of the datapoint to use\r\nIgnored if the datapoint data type is not a complex data type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Base for all string animations.",
        "discriminator": {
          "propertyName": "animationType",
          "mapping": {
            "Float": "#/components/schemas/FloatStringAnimationDTO",
            "Enum": "#/components/schemas/EnumStringAnimationDTO",
            "Bool": "#/components/schemas/BooleanStringAnimationDTO"
          }
        }
      },
      "StringAnimationRangeDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "String value for the range.",
            "nullable": true
          },
          "min": {
            "type": "number",
            "description": "Lower bound of the range.",
            "format": "double",
            "nullable": true
          },
          "minIncluded": {
            "type": "boolean",
            "description": "True if the the range contains the lower bound."
          },
          "max": {
            "type": "number",
            "description": "Upper bound of the range.",
            "format": "double",
            "nullable": true
          },
          "maxIncluded": {
            "type": "boolean",
            "description": "True if the upper bound belongs to the range."
          }
        },
        "additionalProperties": false,
        "description": "Definition of a range for a string animation."
      },
      "StringDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          }
        },
        "additionalProperties": false
      },
      "StringStringValueTuple": {
        "type": "object",
        "properties": {
          "item1": {
            "type": "string",
            "nullable": true
          },
          "item2": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StructureDTO": {
        "type": "object",
        "properties": {
          "surfaceGross": {
            "type": "string",
            "description": "Gross surface",
            "nullable": true
          },
          "surfaceNet": {
            "type": "string",
            "description": "Net surface",
            "nullable": true
          },
          "people": {
            "type": "string",
            "description": "Number of people",
            "nullable": true
          },
          "structureType": {
            "type": "string",
            "description": "Type of structure",
            "nullable": true
          },
          "building": {
            "type": "string",
            "description": "Resource path to query the buildings of the structure",
            "nullable": true
          },
          "structureChildren": {
            "type": "string",
            "description": "Resource path to query the children structure of the structure",
            "nullable": true
          },
          "structureParents": {
            "type": "string",
            "description": "Resource path to query the parent structure of the structure",
            "nullable": true
          },
          "zoneChildren": {
            "type": "string",
            "description": "Resource path to query the children zone of the structure",
            "nullable": true
          },
          "zoneParents": {
            "type": "string",
            "description": "Resource path to query the parent zones of the structure",
            "nullable": true
          },
          "spaceChildren": {
            "type": "string",
            "description": "Resource path to query the children spaces of the structure",
            "nullable": true
          },
          "mapview": {
            "type": "string",
            "description": "Resource path to query the map view of the structure",
            "nullable": true
          },
          "tenants": {
            "type": "string",
            "description": "Resource path to query the tenants of the structure",
            "nullable": true
          },
          "owners": {
            "type": "string",
            "description": "Resource path to query the owners of the structure",
            "nullable": true
          },
          "propertyManagers": {
            "type": "string",
            "description": "Resource path to query the property managers of the structure",
            "nullable": true
          },
          "facilityManagers": {
            "type": "string",
            "description": "Resource path to query the facility managers of the structure",
            "nullable": true
          },
          "visitors": {
            "type": "string",
            "description": "Resource path to query the visitors of the structure",
            "nullable": true
          },
          "administrators": {
            "type": "string",
            "description": "Resource path to query the administrators of the structure",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceDTO"
            },
            "description": "List of dataPoint instances inherited from datapoint template",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "List of properties inherited from property template",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceOfZoneDTO"
            },
            "description": "List of functional block instances attached to the zone",
            "nullable": true
          },
          "authorized": {
            "type": "boolean",
            "description": "If true access is granted to this zone."
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent zones attached to the zone",
            "nullable": true
          },
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of children zone instance definition attached to the created zone\r\n(information only)",
            "nullable": true
          },
          "hasMapView": {
            "type": "boolean",
            "description": "True if zone has a mapview attached to it"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Represents a structure"
      },
      "StructureInitializationDTO": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/SiteDTO"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitUserDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SynchronizationStateDTO": {
        "type": "object",
        "properties": {
          "synchronizationState": {
            "$ref": "#/components/schemas/PendingSynchronization"
          },
          "receivedSynchronizationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "appliedSynchronizationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "buildingNeedResolution": {
            "type": "boolean"
          },
          "functionalBlockTemplatesNeedResolution": {
            "type": "boolean"
          },
          "mapsNeedResolution": {
            "type": "boolean"
          },
          "networksNeedResolution": {
            "type": "boolean"
          },
          "networksOfMapNeedSynchronization": {
            "type": "boolean"
          },
          "zoneTemplatesNeedResolution": {
            "type": "boolean"
          },
          "dataToApply": {
            "type": "boolean"
          },
          "userLevel": {
            "$ref": "#/components/schemas/ImportUserLevel"
          },
          "projectAvailable": {
            "type": "boolean"
          },
          "migrationStatus": {
            "$ref": "#/components/schemas/ProjectApplicationStatus"
          },
          "migrationAll": {
            "type": "boolean",
            "nullable": true
          },
          "dateLastStep": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastStep": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SynchronizationStateSetDTO": {
        "type": "object",
        "properties": {
          "dateLastStep": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastStep": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SynchroState": {
        "enum": [
          "Idle",
          "Modified",
          "Deleted",
          "SyncModified",
          "SyncDeleted"
        ],
        "type": "string"
      },
      "SynchroType": {
        "enum": [
          "Full",
          "Partial"
        ],
        "type": "string"
      },
      "SyncMethodLaunchDTO": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverPropertyValueDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TemplatedDatapointSelectorDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SelectorType"
          },
          "datapointTemplateId": {
            "type": "string",
            "nullable": true
          },
          "selector": {
            "$ref": "#/components/schemas/SelectorDTO"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TemplateScheduleConfigurationDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleConfigurationDTO"
          }
        ],
        "properties": {
          "publicId": {
            "type": "string",
            "nullable": true
          },
          "zoneTemplateIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplatedDatapointSelectorDTO"
            },
            "nullable": true
          },
          "overridableZoneInstanceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ScheduleConfigurationType"
          }
        },
        "additionalProperties": false
      },
      "TemplateScheduleConfigurationInfoDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleConfigurationInfoDTO"
          }
        ],
        "properties": {
          "zoneTemplateNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "needToBeRefreshed": {
            "type": "boolean"
          },
          "zoneInstanceNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ScheduleConfigurationType"
          }
        },
        "additionalProperties": false
      },
      "TextAnimationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the animation.",
            "nullable": true
          },
          "datapointTemplateId": {
            "type": "string",
            "description": "Datapoint template id.",
            "nullable": true
          },
          "functionalBlockTemplateId": {
            "type": "string",
            "description": "Functional block template containing the datapoint template (if exists) (read only).",
            "nullable": true
          },
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Type of the datapoint template (read only).",
            "nullable": true
          },
          "selectionModeForZone": {
            "$ref": "#/components/schemas/FBTypeOfSelection"
          },
          "complexDataTypeFieldName": {
            "type": "string",
            "description": "Name of the field of the complex data type of the datapoint to use\r\nIgnored if the datapoint data type is not a complex data type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Text animation in a functional block animation (may be enriched in the future)."
      },
      "TimeSpanDataTypeDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataTypeDTO"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DataTypeType"
          }
        },
        "additionalProperties": false
      },
      "ToggleRescueModeDTO": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TransportType": {
        "enum": [
          "none",
          "BACnet",
          "KNXIP",
          "Lonworks",
          "ModbusSerial",
          "ModbusIP",
          "MBus",
          "xDriver",
          "Memory"
        ],
        "type": "string"
      },
      "TrendConfigurationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the trendtemplate",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "description": "Frequency of the trend in milliseconds.\r\nIf not present it is will be 10 seconds, if zero disable the trend",
            "format": "int64",
            "default": 10000,
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband\r\nIf not present it is will be 0",
            "format": "double",
            "default": 0,
            "nullable": true
          },
          "retention": {
            "type": "string",
            "description": "Retention policy name\r\nIf empty it is use the default retention policy",
            "default": "",
            "nullable": true
          },
          "generateDummyValues": {
            "type": "boolean",
            "description": "Generate dummy values\r\nIf true, random trend values are generated",
            "default": false
          },
          "valuesConfiguration": {
            "$ref": "#/components/schemas/TrendValuesConfigurationDTO"
          }
        },
        "additionalProperties": false,
        "description": "Trend configuration"
      },
      "TrendInstanceAdvancedDTO": {
        "type": "object",
        "properties": {
          "zoneName": {
            "type": "string",
            "description": "Name of the zone of the datapoint instance or empty",
            "nullable": true
          },
          "zoneTemplateName": {
            "type": "string",
            "description": "Name of the zone template of the datapoint instance or empty",
            "nullable": true
          },
          "zoneParentName": {
            "type": "string",
            "description": "Name of the zone parent of the zone of the datapoint instance or empty",
            "nullable": true
          },
          "functionalBlockName": {
            "type": "string",
            "description": "Name of the functionalBlock of the datapoint instance or empty",
            "nullable": true
          },
          "functionalBlockTemplateName": {
            "type": "string",
            "description": "Name of the functionalBlock template of the datapoint instance or empty",
            "nullable": true
          },
          "datapointInstanceName": {
            "type": "string",
            "description": "Name of the datapoint instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon of functional block if datapoint of the trend attached to a functional block\r\nIcon of zone if datapoint of the trend attached to a zone\r\nEmpty in other case",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Fillcolor (if any) of Icon",
            "nullable": true
          },
          "type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/LongDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DoubleDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/BoolDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/StringDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/EnumerationDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ComplexDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/DateTimeOffsetDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/TimeSpanDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPAddressDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/IPEndPointDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ArrayDataTypeDTO"
              },
              {
                "$ref": "#/components/schemas/ByteDataTypeDTO"
              }
            ],
            "description": "Data type of the datapoint.",
            "nullable": true
          },
          "unitShortString": {
            "type": "string",
            "description": "Small unit string",
            "nullable": true
          },
          "unitID": {
            "type": "string",
            "description": "ID of the unit.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Identifier of the trend instance",
            "nullable": true
          },
          "override": {
            "type": "boolean",
            "description": "True if trend instance data override its template"
          },
          "templateId": {
            "type": "string",
            "description": "Identifier of the template of the trend instance",
            "nullable": true
          },
          "datapoint": {
            "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
          },
          "datapointId": {
            "type": "string",
            "description": "Alternate definition of datapoint for compatibility.",
            "nullable": true
          },
          "retentionPolicyId": {
            "type": "string",
            "description": "Identifier of the retention policy used by this trend instance",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the trend instance",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Trend values transmission frequency",
            "format": "int64",
            "nullable": true
          },
          "display": {
            "$ref": "#/components/schemas/DisplayType"
          },
          "defaultColor": {
            "type": "string",
            "description": "Default color used to display trends",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Trend instance should be active to retrieve trend values"
          },
          "store": {
            "$ref": "#/components/schemas/TrendStoreDTO"
          },
          "realTimeValueAligned": {
            "type": "boolean",
            "description": "True when timestamp of real time trend's value will be aligned with trend's frequency"
          },
          "useIfExist": {
            "type": "boolean",
            "description": "if True, the creation returns the existing trend instance if the trend instance is linked to the same datapoint and the same store\r\nelse the creation raize an error when a trend is already present\r\nFalse by default"
          },
          "applicationSource": {
            "type": "string",
            "description": "Name of the application responsible for alarm instance creation/update. May be null",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Id of asset. For individual trend only.",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Id of zone. For individual trend only.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendInstanceCreationDTO": {
        "type": "object",
        "properties": {
          "datapoint": {
            "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
          },
          "datapointId": {
            "type": "string",
            "description": "Alternate definition of datapoint for compatibility.",
            "nullable": true
          },
          "retentionPolicyId": {
            "type": "string",
            "description": "Identifier of the retention policy used by this trend instance",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the trend instance",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Trend values transmission frequency",
            "format": "int64",
            "nullable": true
          },
          "display": {
            "$ref": "#/components/schemas/DisplayType"
          },
          "defaultColor": {
            "type": "string",
            "description": "Default color used to display trends",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Trend instance should be active to retrieve trend values"
          },
          "store": {
            "$ref": "#/components/schemas/TrendStoreDTO"
          },
          "realTimeValueAligned": {
            "type": "boolean",
            "description": "True when timestamp of real time trend's value will be aligned with trend's frequency"
          },
          "useIfExist": {
            "type": "boolean",
            "description": "if True, the creation returns the existing trend instance if the trend instance is linked to the same datapoint and the same store\r\nelse the creation raize an error when a trend is already present\r\nFalse by default"
          },
          "applicationSource": {
            "type": "string",
            "description": "Name of the application responsible for alarm instance creation/update. May be null",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Id of asset. For individual trend only.",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Id of zone. For individual trend only.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendInstanceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the trend instance",
            "nullable": true
          },
          "override": {
            "type": "boolean",
            "description": "True if trend instance data override its template"
          },
          "templateId": {
            "type": "string",
            "description": "Identifier of the template of the trend instance",
            "nullable": true
          },
          "datapoint": {
            "$ref": "#/components/schemas/DatapointIdentifierWithNameDTO"
          },
          "datapointId": {
            "type": "string",
            "description": "Alternate definition of datapoint for compatibility.",
            "nullable": true
          },
          "retentionPolicyId": {
            "type": "string",
            "description": "Identifier of the retention policy used by this trend instance",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the trend instance",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Trend values transmission frequency",
            "format": "int64",
            "nullable": true
          },
          "display": {
            "$ref": "#/components/schemas/DisplayType"
          },
          "defaultColor": {
            "type": "string",
            "description": "Default color used to display trends",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Trend instance should be active to retrieve trend values"
          },
          "store": {
            "$ref": "#/components/schemas/TrendStoreDTO"
          },
          "realTimeValueAligned": {
            "type": "boolean",
            "description": "True when timestamp of real time trend's value will be aligned with trend's frequency"
          },
          "useIfExist": {
            "type": "boolean",
            "description": "if True, the creation returns the existing trend instance if the trend instance is linked to the same datapoint and the same store\r\nelse the creation raize an error when a trend is already present\r\nFalse by default"
          },
          "applicationSource": {
            "type": "string",
            "description": "Name of the application responsible for alarm instance creation/update. May be null",
            "nullable": true
          },
          "functionalBlockId": {
            "type": "string",
            "description": "Id of asset. For individual trend only.",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "Id of zone. For individual trend only.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendPeriodType": {
        "enum": [
          "Auto",
          "RealTime",
          "DownSampling"
        ],
        "type": "string"
      },
      "TrendStoreDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "durationDays": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TrendSubscriptionCreationDTO": {
        "type": "object",
        "properties": {
          "trendInstanceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendSubscriptionDTO": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "format": "int32"
          },
          "trendInstanceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendSubscriptionResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          },
          "invalidTrendInstanceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendSynchroErrorDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendTemplateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "nullable": true
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the alarm template (read only)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the trend template",
            "nullable": true
          },
          "datapointSelector": {
            "$ref": "#/components/schemas/DatapointSelectorDTO"
          },
          "retentionPolicyId": {
            "type": "string",
            "description": "Unique identifier of the retention policy",
            "nullable": true
          },
          "deadband": {
            "type": "number",
            "description": "Deadband of the trend template",
            "format": "double"
          },
          "frequency": {
            "type": "integer",
            "description": "Frequency of the trend template",
            "format": "int64",
            "nullable": true
          },
          "display": {
            "$ref": "#/components/schemas/DisplayType"
          },
          "defaultColor": {
            "type": "string",
            "description": "Default Color of trend template\r\nMust be an hexa color, ex : #FFFFFF",
            "nullable": true
          },
          "needRefreshInstances": {
            "type": "boolean",
            "description": "Need refresh instance indicator of trend template.\r\n If true indicates that after an update of a trend template, you must call RefreshInstances rest API \r\n to regenerate trend instance of this trend template"
          },
          "complexDataTypeFieldName": {
            "type": "string",
            "description": "Name of the field of the complex data type of the datapoint to use\r\nIgnored if the datapoint data type is not a complex data type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendToDatapointSubscriptionCreateDTO": {
        "type": "object",
        "properties": {
          "ignoreErrors": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendToDatapointSubscriptionCreateItemDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendToDatapointSubscriptionCreateItemDTO": {
        "type": "object",
        "properties": {
          "scanRate": {
            "type": "integer",
            "format": "int32"
          },
          "deadBand": {
            "type": "number",
            "format": "double"
          },
          "datapointClientId": {
            "type": "string",
            "nullable": true
          },
          "trendInstanceId": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendValueRowDTO": {
        "type": "object",
        "properties": {
          "quality": {
            "$ref": "#/components/schemas/Quality"
          },
          "min": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "max": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "totalPoints": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrendValuesConfigurationDTO": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start of date time interval for trend values timestamp",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End of date time interval for trend values timestamp",
            "format": "date-time"
          },
          "min": {
            "type": "number",
            "description": "Minimum value for generated values",
            "format": "double"
          },
          "max": {
            "type": "number",
            "description": "Maximum value for generated values",
            "format": "double"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency between 2 values",
            "format": "date-span"
          },
          "withBadQuality": {
            "type": "boolean",
            "description": "Randomly generate bad quality value"
          }
        },
        "additionalProperties": false,
        "description": "Configuration of trend values"
      },
      "TrendValuesGenerationDTO": {
        "type": "object",
        "properties": {
          "trendInstanceId": {
            "type": "string",
            "description": "Trend instance identifier for trend values",
            "nullable": true
          },
          "refreshDownsamplings": {
            "type": "boolean",
            "description": "Enable downsampling refreshing after trend values are generated and inserted"
          },
          "clearValues": {
            "type": "boolean",
            "description": "True to clear all values of the trend instance before injecting new values"
          },
          "generateLongValues": {
            "type": "boolean",
            "description": "Generate long values and not double"
          },
          "valuesConfiguration": {
            "$ref": "#/components/schemas/TrendValuesConfigurationDTO"
          },
          "synchronousGeneration": {
            "type": "boolean",
            "description": "If true generation of database will be synchronous (rest call will be blocked during execution)",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Settings to generate the trend values"
      },
      "TrendValuesHeatmapInjectionDTO": {
        "type": "object",
        "properties": {
          "trendInstanceId": {
            "type": "string",
            "description": "Trend instance identifier for trend values",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Settings to generate the trend values"
      },
      "TrendValuesResultDTO": {
        "type": "object",
        "properties": {
          "downSamplingId": {
            "type": "string",
            "description": "Id of downsampling (null if realtime values)",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendValueRowDTO"
            },
            "description": "Trend value data",
            "nullable": true
          },
          "displayUnitShortString": {
            "type": "string",
            "description": "Display unit.",
            "nullable": true
          },
          "downSamplingPeriod": {
            "type": "string",
            "description": "Downsampling period (if available).",
            "format": "date-span",
            "nullable": true
          },
          "cannotMatchMaximumCount": {
            "type": "boolean",
            "description": "True means the route was not able to find a downsampling to match the maximumCount of request.\r\nIf true Values is always empty."
          },
          "valuesCount": {
            "type": "integer",
            "description": "Number of values.\r\nIf CannotMatchMaximumCount is false then it is equal to the number of element in Values.\r\nIf CannotMatchMaximumCount is true then it is equal to the number of found elements.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TrustedAppDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the application (i.e. AAD app registration client id)",
            "nullable": true
          },
          "friendlyName": {
            "type": "string",
            "description": "The name of the application",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact person email address for this application",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This defines a trusted application that can be enabled on the edge device"
      },
      "TrustedAppEnableDTO": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to the application",
            "nullable": true
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique identifiers of roles to be assigned to the application",
            "nullable": true
          },
          "accessRights": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Read-only list of access right identifiers enabled for the application",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the application (i.e. AAD app registration client id)",
            "nullable": true
          },
          "friendlyName": {
            "type": "string",
            "description": "The name of the application",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact person email address for this application",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TypeOverride": {
        "enum": [
          "Inherit",
          "Override",
          "Excluded"
        ],
        "type": "string"
      },
      "UnitConversionDTO": {
        "type": "object",
        "properties": {
          "unitFrom": {
            "type": "string",
            "description": "Id of unit of Value",
            "nullable": true
          },
          "unitTo": {
            "type": "string",
            "description": "Id of unit to convert.",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Value to convert",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "UnitConversionExtendedDTO": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "Id of unit",
            "nullable": true
          },
          "displayUnit": {
            "type": "string",
            "description": "Id of display unit.\r\nIf empty, display unit based on user culture info will be used",
            "nullable": true
          },
          "displayUnitToDisplayUnit": {
            "type": "boolean",
            "description": "If true value is based on DisplayUnit. Returned value is based too on DisplayUnit but with rounding conversion (if any).\r\nIf false, value is based on Unit. Returned value is based on DisplayUnit."
          },
          "floatValue": {
            "type": "number",
            "description": "Value to convert",
            "format": "double",
            "nullable": true
          },
          "longValue": {
            "type": "integer",
            "description": "Value to convert",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnitConversionExtendedResultDTO": {
        "type": "object",
        "properties": {
          "displayUnit": {
            "type": "string",
            "description": "Id of display unit that has been used for conversion.",
            "nullable": true
          },
          "displayUnitShortString": {
            "type": "string",
            "description": "Short string of display unit that has been used for conversion.",
            "nullable": true
          },
          "floatValue": {
            "type": "number",
            "description": "Converted value",
            "format": "double",
            "nullable": true
          },
          "longValue": {
            "type": "integer",
            "description": "Converted value",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnitDTO": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Localized name of the unit",
            "nullable": true
          },
          "unitShortString": {
            "type": "string",
            "description": "Small unit string",
            "nullable": true
          },
          "resolution": {
            "type": "number",
            "description": "Resolution of the unit",
            "format": "double"
          },
          "category": {
            "type": "string",
            "description": "Unique identifier of the family of the unit (electricity, weight, ...)",
            "nullable": true
          },
          "preferredMin": {
            "type": "number",
            "description": "Preferred minimum value supported if any",
            "format": "double",
            "nullable": true
          },
          "preferredMax": {
            "type": "number",
            "description": "Preferred maximum value supported if any",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Unit description"
      },
      "UpdateInformationDTO": {
        "type": "object",
        "properties": {
          "newVersion": {
            "type": "string",
            "description": "The newest version that can be installed on the device",
            "nullable": true
          },
          "currentVersion": {
            "type": "string",
            "description": "The current version of the device",
            "nullable": true
          },
          "slot0IsOk": {
            "type": "boolean",
            "description": "True if the boot slot 0 is ok"
          },
          "slot1IsOk": {
            "type": "boolean",
            "description": "True if the boot slot 1 is ok"
          },
          "lastUpdateCheckTime": {
            "type": "string",
            "description": "The last time it was checked if an update is available",
            "format": "date-time"
          },
          "nextUpdateCheckTime": {
            "type": "string",
            "description": "The next time the device will check for an update",
            "format": "date-time"
          },
          "updateError": {
            "$ref": "#/components/schemas/EmbeddedErrorDTO"
          }
        },
        "additionalProperties": false
      },
      "UserCreationDTO": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          },
          "firstTimeConnection": {
            "type": "boolean",
            "description": "Indicates if the user connects for the first time"
          },
          "authenticationProviderId": {
            "type": "string",
            "description": "Unique identifier of the user provider",
            "nullable": true
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique identifier of roles the user is member of",
            "nullable": true
          },
          "company": {
            "type": "string",
            "description": "Company",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone",
            "nullable": true
          },
          "accessRights": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of access right identifiers enabled for the user",
            "nullable": true
          },
          "preferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of access right identifiers enabled for the user",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Define if user is currently active"
          },
          "hasAccessFromCloud": {
            "type": "boolean",
            "description": "Define if user has access to the edge device from the cloud",
            "nullable": true
          },
          "cloudRegistrationStatus": {
            "$ref": "#/components/schemas/CloudRegistrationStatus"
          },
          "culture": {
            "type": "string",
            "description": "Culture of the user",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "description": "Timezone of the user",
            "nullable": true
          },
          "kind": {
            "type": "string",
            "description": "What kind of security principal this is: interactive user or application",
            "nullable": true
          },
          "termsAndConditions": {
            "type": "string",
            "description": "Last terms and conditions the user accepted",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the user",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the user",
            "nullable": true
          },
          "initials": {
            "type": "string",
            "description": "Initials of the user",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon of the user",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to user",
            "nullable": true
          },
          "isReadonly": {
            "type": "boolean",
            "description": "Readonly user.\r\nReadonly user cannot be deleted and its roles cannot be changed"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a user for creation"
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "firstTimeConnection": {
            "type": "boolean",
            "description": "Indicates if the user connects for the first time"
          },
          "authenticationProviderId": {
            "type": "string",
            "description": "Unique identifier of the user provider",
            "nullable": true
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique identifier of roles the user is member of",
            "nullable": true
          },
          "company": {
            "type": "string",
            "description": "Company",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone",
            "nullable": true
          },
          "accessRights": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of access right identifiers enabled for the user",
            "nullable": true
          },
          "preferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of access right identifiers enabled for the user",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Define if user is currently active"
          },
          "hasAccessFromCloud": {
            "type": "boolean",
            "description": "Define if user has access to the edge device from the cloud",
            "nullable": true
          },
          "cloudRegistrationStatus": {
            "$ref": "#/components/schemas/CloudRegistrationStatus"
          },
          "culture": {
            "type": "string",
            "description": "Culture of the user",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "description": "Timezone of the user",
            "nullable": true
          },
          "kind": {
            "type": "string",
            "description": "What kind of security principal this is: interactive user or application",
            "nullable": true
          },
          "termsAndConditions": {
            "type": "string",
            "description": "Last terms and conditions the user accepted",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the user",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the user",
            "nullable": true
          },
          "initials": {
            "type": "string",
            "description": "Initials of the user",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon of the user",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to user",
            "nullable": true
          },
          "isReadonly": {
            "type": "boolean",
            "description": "Readonly user.\r\nReadonly user cannot be deleted and its roles cannot be changed"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of a user"
      },
      "UserInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the user",
            "nullable": true
          },
          "initials": {
            "type": "string",
            "description": "Initials of the user",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Icon of the user",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags attached to user",
            "nullable": true
          },
          "isReadonly": {
            "type": "boolean",
            "description": "Readonly user.\r\nReadonly user cannot be deleted and its roles cannot be changed"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Basic information of a user"
      },
      "UserLocalizationDataDTO": {
        "type": "object",
        "properties": {
          "culture": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserType": {
        "enum": [
          "Tenant",
          "Owner",
          "PropertyManager",
          "FacilityManager",
          "Visitor",
          "Administrator"
        ],
        "type": "string",
        "description": "Type of user"
      },
      "VersionInformationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Software name.\r\nCan be bos, middleware, ui, firmware",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version. Empty indicates undefined.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Version information of a software part"
      },
      "WebServerConfigDTO": {
        "type": "object",
        "properties": {
          "useHttps": {
            "type": "boolean",
            "description": "Indicates whether or not the https protocol is activated or not"
          }
        },
        "additionalProperties": false,
        "description": "Object with configuration of the webserver"
      },
      "WizardSubscriptionDTO": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZoneAnimationDTO": {
        "type": "object",
        "properties": {
          "zoneTemplateId": {
            "type": "string",
            "description": "Zone template id.",
            "nullable": true
          },
          "backgroundColorAnimation": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FloatStringAnimationDTO"
              },
              {
                "$ref": "#/components/schemas/EnumStringAnimationDTO"
              },
              {
                "$ref": "#/components/schemas/BooleanStringAnimationDTO"
              }
            ],
            "description": "Animation for background color (if exists).",
            "nullable": true
          },
          "borderColorAnimation": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FloatStringAnimationDTO"
              },
              {
                "$ref": "#/components/schemas/EnumStringAnimationDTO"
              },
              {
                "$ref": "#/components/schemas/BooleanStringAnimationDTO"
              }
            ],
            "description": "Animation color (if exists).",
            "nullable": true
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the map animation (read only)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the animation.",
            "nullable": true
          },
          "showAlarms": {
            "type": "boolean",
            "description": "Are alarms displayed ?."
          },
          "active": {
            "type": "boolean",
            "description": "Is the animation active."
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Zone animation."
      },
      "ZoneAnimationRuntimeDTO": {
        "type": "object",
        "properties": {
          "animationId": {
            "type": "string",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "backgroundDatapointId": {
            "type": "string",
            "nullable": true
          },
          "borderDatapointId": {
            "type": "string",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZoneInstanceControlPanelDTO": {
        "type": "object",
        "properties": {
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedDatapointInstanceDTO"
            },
            "description": "List of datapoint instances to display in the control panel",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedPropertyInstanceDTO"
            },
            "description": "List of property instances to display in the control panel",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceControlPanelDTO"
            },
            "description": "List of functional block instances control panels to display in the control panel",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about the control panel of a zone instance"
      },
      "ZoneInstanceDTO": {
        "type": "object",
        "properties": {
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceDTO"
            },
            "description": "List of dataPoint instances inherited from datapoint template",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointInstanceDTO"
            },
            "description": "List of properties inherited from property template",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceOfZoneDTO"
            },
            "description": "List of functional block instances attached to the zone",
            "nullable": true
          },
          "authorized": {
            "type": "boolean",
            "description": "If true access is granted to this zone."
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent zones attached to the zone",
            "nullable": true
          },
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of children zone instance definition attached to the created zone\r\n(information only)",
            "nullable": true
          },
          "hasMapView": {
            "type": "boolean",
            "description": "True if zone has a mapview attached to it"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Zone instance definition"
      },
      "ZoneInstanceHierarchyDTO": {
        "type": "object",
        "properties": {
          "authorized": {
            "type": "boolean",
            "description": "If true access is granted to this zone."
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent zones attached to the zone",
            "nullable": true
          },
          "childrenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of children zone instance definition attached to the created zone\r\n(information only)",
            "nullable": true
          },
          "hasMapView": {
            "type": "boolean",
            "description": "True if zone has a mapview attached to it"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Basic information on a zone instance"
      },
      "ZoneInstanceInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Basic information on a zone instance"
      },
      "ZoneInstanceTreeDisplayDTO": {
        "type": "object",
        "properties": {
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockInstanceTreeDisplayDTO"
            },
            "description": "List of functional block instances attached to the zone",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointInstanceTreeDisplayDTO"
            },
            "description": "List of dataPoint instances attached to the zone",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone instance",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone instance",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Optional image representing the zoneInstance\r\nThis field is readonly and ignored during a put/post for a zone instance attached to a zone template",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "Unique identifier of the zone instance template (if any)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tag matching the zone",
            "nullable": true
          },
          "propertyZoneType": {
            "$ref": "#/components/schemas/PropertyZoneType"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Zone instance definition for tree display"
      },
      "ZoneLiveAlarmSubscriptionDTO": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "webhookURL": {
            "type": "string",
            "nullable": true
          },
          "webhookRetryCount": {
            "type": "integer",
            "format": "int32"
          },
          "webhookRetryDelay": {
            "type": "integer",
            "format": "int32"
          },
          "webhookPersist": {
            "type": "boolean"
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "returnInternalFormat": {
            "type": "boolean"
          },
          "webhookLeaseTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "suffixForOctetStream": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZoneOfFunctionalBlockDTO": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "description": "Unique identifier of Zone",
            "nullable": true
          },
          "inZone": {
            "type": "boolean",
            "description": "Weither the functionalblock belongs to this zone or a child zone"
          }
        },
        "additionalProperties": false,
        "description": "Definition of a zone linked to functionalBlockInstance"
      },
      "ZoneOverviewDTO": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "nullable": true
          },
          "zoneName": {
            "type": "string",
            "nullable": true
          },
          "spaceCount": {
            "type": "integer",
            "format": "int32"
          },
          "unAcknowledgedAlarmCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalAlarmCount": {
            "type": "integer",
            "format": "int32"
          },
          "activeNotificationCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalNotificationCount": {
            "type": "integer",
            "format": "int32"
          },
          "activeScheduleCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalScheduleCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ZoneTemplateControlPanelDTO": {
        "type": "object",
        "properties": {
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the control panel (read only)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the configuration of the control panel, may be null or empty",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the configuration of the control panel is active or not"
          },
          "zoneTemplateId": {
            "type": "string",
            "description": "Unique identifier of the zone template",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedDatapointTemplateDTO"
            },
            "description": "List of datapoint templates of the zone template to display in the control panel",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedPropertyTemplateDTO"
            },
            "description": "List of property templates of the zone template to display in the control panel",
            "nullable": true
          },
          "functionalBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionalBlockTemplateControlPanelDTO"
            },
            "description": "List of functional block templates to display in the control panel",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of the configuration of the control panel of a zone template"
      },
      "ZoneTemplateDTO": {
        "type": "object",
        "properties": {
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ZoneTemplate usages (information only)",
            "nullable": true
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointTemplateDTO"
            },
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDatapointTemplateDTO"
            },
            "nullable": true
          },
          "optionalFunctionalBlocks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional functional block identifiers (must be empty if SupportAllFunctionalBlocks is true).",
            "nullable": true
          },
          "mandatoryFunctionalBlocks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Mandatory functional block identifiers (must be empty if SupportAllFunctionalBlocks is true).",
            "nullable": true
          },
          "supportAllFunctionalBlocks": {
            "type": "boolean",
            "description": "If true, any functional block can be added."
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone template",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone template",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Image uri",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags atached to the template",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "ZoneTemplate parent of this zonetemplate.\r\nNull if root. Not null for a zonetemplate usage.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "ZoneTemplate version.\r\nInformation only. Readonly.",
            "nullable": true
          },
          "instancesCount": {
            "type": "integer",
            "description": "Number of zone instances using this template.\r\nInformation only. Readonly.",
            "format": "int64"
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the zone template",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false
      },
      "ZoneTemplateDuplicateDTO": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "description": "Base64 string of the new icon",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "New name of duplicate item",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZoneTemplateImportResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "added": {
            "type": "boolean"
          },
          "uptodate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ZoneTemplateInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the zone template",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Localized name of the zone template",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "description": "Image uri",
            "nullable": true
          },
          "iconFillColor": {
            "type": "string",
            "description": "Icon fill color. null for none",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags atached to the template",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "ZoneTemplate parent of this zonetemplate.\r\nNull if root. Not null for a zonetemplate usage.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "ZoneTemplate version.\r\nInformation only. Readonly.",
            "nullable": true
          },
          "instancesCount": {
            "type": "integer",
            "description": "Number of zone instances using this template.\r\nInformation only. Readonly.",
            "format": "int64"
          },
          "publicId": {
            "type": "string",
            "description": "Unique public identifier of the zone template",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True when the entity has been created by an external tool\r\neg : migration of a ETS MoovNGroup project"
          }
        },
        "additionalProperties": false,
        "description": "Basic information on a zone template"
      },
      "ZoneTemplateWizardDTO": {
        "type": "object",
        "properties": {
          "used": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "doNotImport": {
            "type": "boolean"
          },
          "applied": {
            "type": "boolean"
          },
          "iconChanged": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isLogic": {
            "type": "boolean"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "iconExtension": {
            "type": "string",
            "nullable": true
          },
          "optionalFunctionalBlocks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "mandatoryFunctionalBlocks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointTemplateDesc"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZoneType": {
        "enum": [
          "Physical",
          "Logical",
          "Technical"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
 	  "oauthsample": {
		"type": "oauth2",
		"flows":{
			"authorizationCode":{
				"authorizationUrl": "https://login.microsoftonline.com/372ee9e0-9ce0-4033-a64a-c07073a91ecd/oauth2/v2.0/authorize",
				"tokenUrl": "https://login.microsoftonline.com/372ee9e0-9ce0-4033-a64a-c07073a91ecd/oauth2/v2.0/token",
					"scopes":{
					"api://openbos/BosApi.Proxy": "Access edge"
				}
			}
		}
	  }
    }
  },
  "tags": [
    {
      "name": "Basics",
      "description": "Authentication and basics resources and methods on edge"
    },
    {
      "name": "Edge and stations",
      "description": "How to manage the edge and the stations"
    },
    {
      "name": "Network organizations, drivers and protocols",
      "description": "How to manage the edge and the stations"
    },
    {
      "name": "Topology of the property",
      "description": "Get the property details: the buildings, structure, spaces and areas of that property"
    },
    {
      "name": "Core root objects: ZONE and TAGS",
      "description": "All is a zone and openBOS offers zone in zone concept. Every object has a TAG"
    },
    {
      "name": "The templates",
      "description": "openBOS ontology is fully based on templates"
    },
    {
      "name": "Read values and update status on premises",
      "description": "Collection of routes to read and write datapoints in the automation devices within a property."
    },
    {
      "name": "Alarms",
      "description": "Manage the alarms within a property"
    },
    {
      "name": "Trends",
      "description": "Manage the trends within a property"
    },
    {
      "name": "Schedules",
      "description": "Manage the schedules within a property"
    },
    {
      "name": "Edge resource files",
      "description": "Routes used to upload files into the edge"
    },
    {
      "name": "Meters",
      "description": "Api used to access electrical distribution and meters hierarhcy"
    }
  ]
}